<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浅笑整个夏季</title>
  
  <subtitle>做一个快乐的程序媛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangliminabc.github.io/"/>
  <updated>2021-09-01T07:44:39.000Z</updated>
  <id>http://zhangliminabc.github.io/</id>
  
  <author>
    <name>浅笑整个夏季</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue深入之computed源码</title>
    <link href="http://zhangliminabc.github.io/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B9%8Bcomputed/"/>
    <id>http://zhangliminabc.github.io/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B9%8Bcomputed/</id>
    <published>2021-09-01T07:44:39.000Z</published>
    <updated>2021-09-01T07:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: initComputed</span><br><span class="line">op1&#x3D;&gt;operation: 遍历computed中的属性值列表</span><br><span class="line">op1-1&#x3D;&gt;operation: 判断是否是服务器端渲染</span><br><span class="line">cond1&#x3D;&gt;condition: Yes or no</span><br><span class="line"></span><br><span class="line">op2&#x3D;&gt;operation: defineComputed为vm上添加对key的代理, 设置get&#x2F;set</span><br><span class="line">op3&#x3D;&gt;operation: 为每一个key值初始化watcher实例,保存到vm._computedWatcher数组</span><br><span class="line">op4&#x3D;&gt;operation: 当对key读取时，会触发getter, getter会从_computedWatcher上找到对应的watcher,然后通过evaluate触发get函数, pushTarget收集对应的watcher</span><br><span class="line">op5&#x3D;&gt;operation: 触发_data中的get函数,</span><br><span class="line">op6&#x3D;&gt;operation: dep.depend -&gt; watcher.addDep(dep)</span><br><span class="line">op7&#x3D;&gt;operation: dep.addSub(watcher)</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op1-&gt;op1-1-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;op2-&gt;op4-&gt;op5-&gt;op6-&gt;op7-&gt;e</span><br><span class="line">cond1(no)-&gt;op3-&gt;op2-&gt;op4-&gt;op5-&gt;op6-&gt;op7-&gt;e</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 设置值</span><br><span class="line">op&#x3D;&gt;operation: dep.notify</span><br><span class="line">op&#x3D;&gt;operation: watcher.update</span><br><span class="line">op&#x3D;&gt;operation: </span><br></pre></td></tr></table></figure><ol><li>通过Object.defineProperty方法对对象的某个属性进行set、get实现一个数据更新值的拦截</li><li>取值的时</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zhangliminabc.github.io/categories/vue/"/>
    
    
      <category term="框架" scheme="http://zhangliminabc.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="vue" scheme="http://zhangliminabc.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之知识图谱</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(26)-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(26)-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</id>
    <published>2021-09-01T00:57:16.000Z</published>
    <updated>2021-09-01T00:57:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="javascript-知识架构图"><a href="#javascript-知识架构图" class="headerlink" title="javascript 知识架构图"></a>javascript 知识架构图</h4><img src="../../../static/JavaScript.png"/>]]></content>
    
    <summary type="html">
    
      这是js的整体知识框架图以及深入剖析了js代码的执行顺序；在执行的过程中浅析js, js代码分为文法、语法、和执行时三种顺序, 用一定的词法和语法表达一定的语义; js的文法是用一定的表达式和操作符构成一个语句
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://zhangliminabc.github.io/interview/js-generator/"/>
    <id>http://zhangliminabc.github.io/interview/js-generator/</id>
    <published>2021-08-31T10:58:26.000Z</published>
    <updated>2021-08-31T10:58:26.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浏览器深入之web-worker</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-webworker/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-webworker/</id>
    <published>2021-08-31T02:50:19.000Z</published>
    <updated>2021-08-31T02:50:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面"><a href="#web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面" class="headerlink" title="web Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面"></a>web Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面</h4><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个专用worker</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initWorker</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!<span class="built_in">window</span>.Worker)  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Worker(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">const</span> myWorker = initWorker()</span><br><span class="line">first.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myWorker.postMessage([<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;seound&#x27;</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Message posted to worker&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">secound.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> myWorker.postMessage([<span class="string">&#x27;secound&#x27;</span>])</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Message posted to Worker&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker线程</span></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;message received from main script&#x27;</span>)</span><br><span class="line"> <span class="keyword">const</span> workerResult = <span class="string">&#x27;result:&#x27;</span> + e.data</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Posting message back to main script&#x27;</span>);</span><br><span class="line"> postMessage(workerResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line">myWorker.onMessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Message received from worker&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="workers和主线程之间的数据传递通过-postMessage-传递消息；-使用-onmessage-事件处理函数来响应消息-消息被包含在Message事件的data属性中-这个过程中数据并不是被共享而是被复制"><a href="#workers和主线程之间的数据传递通过-postMessage-传递消息；-使用-onmessage-事件处理函数来响应消息-消息被包含在Message事件的data属性中-这个过程中数据并不是被共享而是被复制" class="headerlink" title="workers和主线程之间的数据传递通过 postMessage 传递消息； 使用 onmessage 事件处理函数来响应消息(消息被包含在Message事件的data属性中), 这个过程中数据并不是被共享而是被复制"></a>workers和主线程之间的数据传递通过 postMessage 传递消息； 使用 onmessage 事件处理函数来响应消息(消息被包含在Message事件的data属性中), 这个过程中数据并不是被共享而是被复制</h4><h4 id="worker-Api"><a href="#worker-Api" class="headerlink" title="worker Api"></a>worker Api</h4><ul><li><p>terminate(): 从主线程中立刻终止一个运行中的worker</p></li><li><p>close(): 在workers线程中调用自己的close方法进行关闭</p></li><li><p>onError(): worker执行错误时发生</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面&quot;&gt;&lt;a href=&quot;#web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://zhangliminabc.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="浏览器" scheme="http://zhangliminabc.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之对象</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(25)-%E5%AF%B9%E8%B1%A1/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(25)-%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-08-31T02:41:56.000Z</published>
    <updated>2021-08-31T02:41:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-对象属性"><a href="#1-对象属性" class="headerlink" title="1. 对象属性"></a>1. 对象属性</h4><p><em>数据属性:</em><br>configurable: 能否通过 delete 删除属性从而重新定义属性，默认值 true<br>enumerable: 是否可以通过 forin 循环， 默认值 true<br>writable: 能否修改属性的值， 默认值 true<br>value： 获取修改属性的值。 默认值 undifined<br>Object.defineProperty( 属性所在的对象， 需要修改的属性名， 描述符对象)</p><p><em>访问器属性：</em><br>configurable: 能否通过 delete 删除属性从而重新定义属性，默认值 true<br>enumerable: 是否可以通过 forin 循环， 默认值 true<br>get: 获取属性值， 默认值 undifined<br>set：设置属性值。 默认值 undifined<br>访问器属性不能直接定义， 只能通过 Object.defineProperty 来定义<br>Object.defineProperties(target， {})</p><h4 id="hasOwnProperty-检测属性是否存在于实例中"><a href="#hasOwnProperty-检测属性是否存在于实例中" class="headerlink" title="hasOwnProperty: 检测属性是否存在于实例中"></a>hasOwnProperty: 检测属性是否存在于实例中</h4><h4 id="hasPrototypeProperty-检测对象中是否在原型中存在给定的属性"><a href="#hasPrototypeProperty-检测对象中是否在原型中存在给定的属性" class="headerlink" title="hasPrototypeProperty: 检测对象中是否在原型中存在给定的属性"></a>hasPrototypeProperty: 检测对象中是否在原型中存在给定的属性</h4><h4 id="in操作符-检测对象中是否存在给定的属性值"><a href="#in操作符-检测对象中是否存在给定的属性值" class="headerlink" title="in操作符: 检测对象中是否存在给定的属性值"></a>in操作符: 检测对象中是否存在给定的属性值</h4><h4 id="isPrototypeOf-对象之前是否存在存在某种关系"><a href="#isPrototypeOf-对象之前是否存在存在某种关系" class="headerlink" title="isPrototypeOf: 对象之前是否存在存在某种关系"></a>isPrototypeOf: 对象之前是否存在存在某种关系</h4><h4 id="getPrototypeof-获取对象的的隐式原型，即对象的proto属性"><a href="#getPrototypeof-获取对象的的隐式原型，即对象的proto属性" class="headerlink" title="getPrototypeof: 获取对象的的隐式原型，即对象的proto属性"></a>getPrototypeof: 获取对象的的隐式原型，即对象的<strong>proto</strong>属性</h4><h4 id="Object-getOwnPropertypeNames-得到所有的实例属性，无论它是否可枚举"><a href="#Object-getOwnPropertypeNames-得到所有的实例属性，无论它是否可枚举" class="headerlink" title="Object.getOwnPropertypeNames: 得到所有的实例属性，无论它是否可枚举"></a>Object.getOwnPropertypeNames: 得到所有的实例属性，无论它是否可枚举</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最新的定义访问器属性的方法</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  year: <span class="number">2004</span>,</span><br><span class="line">  editor: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">&quot;year&quot;</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._year;</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._year = newValue + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">//2006</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧版的定义访问器属性的方法</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  year: <span class="number">2004</span>,</span><br><span class="line">  editor: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">book.__defineGetter__(<span class="string">&quot;year&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.year;</span><br><span class="line">&#125;);</span><br><span class="line">book.__defineSetter__(<span class="string">&quot;year&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.year = newValue + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">//2006</span></span><br></pre></td></tr></table></figure><h4 id="2-创建对象"><a href="#2-创建对象" class="headerlink" title="2. 创建对象"></a>2. 创建对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.job = job;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;校长&quot;</span>, <span class="number">10</span>, <span class="string">&quot;softarea&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">20</span>, <span class="string">&quot;doctor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2.constructor == Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">30</span>;</span><br><span class="line">Person.prototype.job = <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;校长&quot;</span>, <span class="number">10</span>, <span class="string">&quot;softarea&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">20</span>, <span class="string">&quot;doctor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor); <span class="comment">//Person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isPrototypeOf： 验证对象之间是否存在关系</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person2)); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//hasOwnProperty: 验证对象属性是存在于实例中还是原型中</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-对象属性&quot;&gt;&lt;a href=&quot;#1-对象属性&quot; class=&quot;headerlink&quot; title=&quot;1. 对象属性&quot;&gt;&lt;/a&gt;1. 对象属性&lt;/h4&gt;&lt;p&gt;&lt;em&gt;数据属性:&lt;/em&gt;&lt;br&gt;configurable: 能否通过 delete 删除属性从而重新
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之函数</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(24)-%E5%87%BD%E6%95%B0/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(24)-%E5%87%BD%E6%95%B0/</id>
    <published>2021-08-31T02:38:41.000Z</published>
    <updated>2021-08-31T02:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>概述</p><hr style="margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;"/><p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值</p></li><li><p>声明(Function Declaration)</p><hr style="margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;"/><p>1.function 命令声明的代码区块，就是一个函数。function 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面</p></li></ul>  <a id="more"></a>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  2.函数表达式， 将匿名函数赋值给变量，这是这个匿名函数叫函数表达式</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionVar = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 带有函数名的函数表达式</span></span><br><span class="line"><span class="keyword">var</span> funtionWithName = <span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> functionName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上面代码在函数表达式中，加入了函数名functionName。这个functionName只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错（除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数）</span></span><br><span class="line"><span class="comment">  * ReferenceError: functionName is not defined</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">functionName(<span class="string">&quot;这是参数有参数的函数表达式);</span></span><br></pre></td></tr></table></figure><p>  3.Function 构造函数</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot; return x + y&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  retuen x + u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>函数的重复声明<br>如果同一个函数被多次声明， 后面的会覆盖前面的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是第一个函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是重复声明的函数， 这个函数会覆盖第一个函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 这是重复声明的函数， 这个函数会覆盖第一个函数</span></span><br><span class="line"><span class="comment"> * 原因： js中的函数本身属于一个挂载到window对象上的一个属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">firstFunc();</span><br></pre></td></tr></table></figure></li><li><p>属性和方法</p></li><li><p>递归</p></li><li><p>作用域</p><p>在 es5 中 JavaScript 只有两种作用域， 一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在</p><p>函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;这是全局作用域的变量&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 这是全局作用域的变量</span></span><br><span class="line"><span class="comment"> *  在函数体内可以访问具有全局作用域的变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">globalFun();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;这是函数体内定义的变量&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReferenceError: b is not defined</span></span><br><span class="line"><span class="comment"> * 函数内定义的变量不能再函数体之外访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果在函数体内存在跟全局变量相同的局部变量，局部变量会覆盖全部变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">f();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure><p>与全局作用域一样，函数作用域内部也会产生“变量提升”现象。var 命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// firstFun 函数的作用域是全局的</span></span><br><span class="line"><span class="keyword">var</span> firstFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">souncedFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  firstFun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * result =&gt; 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">souncedFun();</span><br></pre></td></tr></table></figure></li><li><p>参数</p></li><li><p>闭包<br>定义在函数体内的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Uncaught ReferenceError: n is not defined</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结： 函数内部可以直接读取全局变量，但是函数外部无法读取函数内部声明的变量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改造之后的函数体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(parentFun());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖: 防抖是任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行，一般用于输入框实时搜索</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流: 节流是规定函数在指定的时间间隔内只执行一次，一般用于scroll事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>立即调用函数<br>在 Javascript 中，圆括号()是一种运算符，跟在函数名之后，表示调用该函数</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;概述&lt;/p&gt;
&lt;hr style=&quot;margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;&quot;/&gt;

&lt;p&gt;函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;声明(Function Declaration)&lt;/p&gt;
&lt;hr style=&quot;margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;&quot;/&gt;

&lt;p&gt;1.function 命令声明的代码区块，就是一个函数。function 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之js内存</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(23)-%E5%86%85%E5%AD%98/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(23)-%E5%86%85%E5%AD%98/</id>
    <published>2021-08-28T09:46:22.000Z</published>
    <updated>2021-08-28T09:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>js的内存结构</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  将一个对象赋值给obj变量，js引擎会先在队内存中生成一个对象，然将堆内存的地址赋值给变量obj， 所以实际上变量obj指向的是一个堆内存地址</p>   <p style="color: red;">也就是说，变量obj是一个地址（reference）。后面如果要读取obj.a，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的a属性</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">     a: <span class="number">1</span>,</span><br><span class="line">     getValue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">f() <span class="comment">// undefined</span></span><br><span class="line">obj.f() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><img src="../../../static/js中的this.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js的内存结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之语法分析</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(22)-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(22)-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2021-08-28T08:20:11.000Z</published>
    <updated>2021-08-28T08:20:11.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="js基础语法"><a href="#js基础语法" class="headerlink" title="js基础语法"></a>js基础语法</h4><pre><code>1. 区分大小写: js 中的变量标识符区分大小写，也就意味这 test/Test 是两个不同的变量2. 标识符: js 中的标识符是指函数名、变量名、参数名等    a. 第一个字符必须是字符、下划线、美元符号    b. 其他字符可以是字母、数字、下划线、美元符号    c. 关键字不能作为标识符3. 注释: 单行注释和多行注释4.  语句: 语句以;结尾        - 虽然分号不是必须的，但是加上也会在某些情况下增加代码的性能5. 变量是松散类型，松散类型可以保存任何类型的数据</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> message; <span class="comment">// 定义变量但未初始化，默认值为undifined</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.区分大小写, a 和A 是两个不同的变量。改变其中一个值不会影响另一个变量的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> A = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a == A); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="标识符的声明方式-let-const-var"><a href="#标识符的声明方式-let-const-var" class="headerlink" title="标识符的声明方式( let/ const/ var)"></a>标识符的声明方式( let/ const/ var)</h4><p>   1, let、const、var三者之间的区别<br>           相同点： 都是定义变量的方式<br>           不同点：<br>               1. var有全局和函数作用域, let和const是块级作用域<br>               2. var可以先使用后声明， let和const不可以，let和const会生成暂时性死区，不在在初始化</p><ol><li>var对应同名标识符的处理规则？</li></ol><span style="color:red;">  对于同名的变量声明，Javascript采用的是忽略原则，后声明的会被忽略。  对于同名的函数声明，Javascript采用的是覆盖原则，先声明的会被覆盖。  对于同名的函数声明和变量声明，采用的是忽略原则，为了确保函数能够被引用到，在提升时函数声明会提升到变量声明之前，变量声明会被忽略，但是变量赋值以后会被覆盖 </span><h4 id="js变量提升"><a href="#js变量提升" class="headerlink" title="js变量提升"></a>js变量提升</h4><p>   js 中的变量可以先使用后声明，这一现叫做变量提升， 提升后的变量返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="comment">// 声明一个变量，可选初始化一个值</span></span><br><span class="line"><span class="keyword">let</span> A <span class="comment">// 声明一个块级作用， 可选初始化一个值</span></span><br><span class="line"><span class="keyword">const</span> c <span class="comment">// 声明一个块作用域的只读常量</span></span><br></pre></td></tr></table></figure><p>为什么var会发生变量的提升？<br>   js分为编译和执行，js引擎在编译阶段会收集所有的变量并绑定到当前所有在的作用域，而变量的赋值操作在执行阶段执行，所以才会出现变量的提升</p><h4 id="js-操作符"><a href="#js-操作符" class="headerlink" title="js 操作符"></a>js 操作符</h4><ul><li><p>算数操作符</p><ol><li>前置型操作符(前置型递增递减): 执行前置递增或者递减，变量的值都是在被求值以前改变的, 返回的是自增减一之后的值</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> anotherAge = ++age + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// output: 10</span></span><br><span class="line"><span class="built_in">console</span>.log(anotherAge); <span class="comment">// output: 11</span></span><br></pre></td></tr></table></figure><pre><code>1. 后置操作符(后置型递增递减): 执行递增递减操作是在包它们的语句被求值之后执行， 返回没有自增减之后的值    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age1 = <span class="number">10</span>;</span><br><span class="line">age1++; <span class="comment">// 如果没有对age求值话age1还是10</span></span><br><span class="line"><span class="built_in">console</span>.log(age1); <span class="comment">// output: 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = num1-- + num2; <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">var</span> num4 = num1 + num2; <span class="comment">// 21</span></span><br></pre></td></tr></table></figure>2. 一元负值/ 一元正值操作符: &lt;span style=&quot;color:red;&quot;&gt;以一个+ 放到数值之前，不会对数值有任何影响, 对于非数值应用一元加减操作符，该操作符会像 Number 函数一样对值转型&lt;/span&gt;       a. 对于布尔值转成 0|1     b. 对于字符串，会按照一定的规则解析     c. 对于对象，会调用 valueof/tostring 方法</code></pre><ul><li><p>逻辑操作符</p><ol><li><p><span style="color: red;">逻辑非(!): 用于任何类型的值, 在应用的时候会存在类型的转换</span></p><pre><code>对象 -&gt; false空字符串 -&gt; true非空字符串 -&gt; false数值 0 -&gt; true任意非空 0 -&gt; falsenull -&gt; trueNaN -&gt; trueundefined -&gt; true</code></pre></li><li><p><span style="color: red;">逻辑与(||): 当条件满足为真时返回第一个条件为真的值</span></p><pre><code>如果第一个操作符是对象，则直接返回第一个操作符如果第一个操作符的求值结果为 false， 则返回第二个操作符的值如果两个操作符都是对象，则返回第一个操作符如果两个操作符都是 null， 则返回 null如果连个操作符都是 NaN, 则返回 NaN如果两个操作符都是 undefined， 则返回 undefined</code></pre> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> c = &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">a || c; <span class="comment">// output: a</span></span><br><span class="line"></span><br><span class="line">b || c; <span class="comment">// output: c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> result = found || someUndefinedVar; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">found = <span class="literal">false</span>;</span><br><span class="line">result = found || someUndefinedVar; <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li><li><p><span style="color: red;">逻辑与(&amp;&amp;): 短路操作符, 当遇到为false的条件时返回false, 当第一个条件为true， 则返回第二个值</span></p><pre><code>如果第一个操作符是对象，则返回第二个操作符如果第二个操作符是对象，则只有在第一个操作符返回 true 的情况下才会返回此对象两个操作符都是对象，则返回第二个操作符如果有一个操作符是 null，则返回 null如果有一个操作符是 nan， 则返回 nan如果有一个操作符是 undefined, 则返回 undefined</code></pre> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">a &amp;&amp; b; <span class="comment">// output: b</span></span><br><span class="line"></span><br><span class="line">a &amp;&amp; <span class="literal">NaN</span>; <span class="comment">// output: NaN</span></span><br><span class="line"></span><br><span class="line">a &amp;&amp; <span class="literal">undefined</span>; <span class="comment">// output: undefined</span></span><br><span class="line"></span><br><span class="line">a &amp;&amp; <span class="literal">true</span>; <span class="comment">// output: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> founed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> result = founed &amp;&amp; someUndefinedVar; <span class="comment">// errro:  someUndefinedVar 未定义</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 这句代码不会执行</span></span><br><span class="line"></span><br><span class="line">found = <span class="literal">false</span>;</span><br><span class="line">result = founed &amp;&amp; someUndefinedVar; <span class="comment">// 不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// output: false</span></span><br></pre></td></tr></table></figure></li><li><p><span style="color: red;">乘法操作符: 如果参与运算的值不是数值型就会使用 Number()函数自动转成数值，然后参与计算</span></p><pre><code>如果有一个值是 NaN, 则返回 NaN如果是 infinity \* 0， 则返回 infinity如果是 infinity 与非 0 数值想剩，则返回 infinity 或者 -infinity如果操作值都是数值，则参与正常的计算，如果超过了 js 的最大限制则返回 infinity 或者 -infinity如果值不为 number 类型则会调用 number()函数转换为数值，在应用上面的规则</code></pre></li></ol></li><li><p>关系操作符</p><ol><li><p><span style="color: red;">instanceof:检测某个对象是不是另一个对象的实例</span></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Parent.prototype) <span class="comment">// &#123;constructor: function Parent()&#123;&#125;, __proto__: Object&#125;</span></span><br><span class="line"><span class="comment">// 理解instanceof 只需要理解下面这句话</span></span><br><span class="line">Parent.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure></li></ol></li><li><p>一元操作符</p><ol><li><p><span style="color: red;">typeof操作符: 判断一个标识符属于哪种数据类型</span></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof 操作符返回值的类型有： &quot;number&quot;、&quot;string&quot;、&quot;boolean&quot;、&quot;object&quot;、&quot;function&quot; 和 &quot;undefined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span> <span class="comment">// Number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;dede&#x27;</span> <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> !!<span class="string">&#x27;0&#x27;</span> <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Function</span>() <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> a <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="js中的数据类型"><a href="#js中的数据类型" class="headerlink" title="js中的数据类型"></a>js中的数据类型</h4><ul><li><span style="color: red;"> 基本数据类型: undefined、 null、 string、 boolean、 number</span></li><li><span style="color: red;">引用数据类型: object</span></li></ul><h4 id="js中的typeof类型检测函数"><a href="#js中的typeof类型检测函数" class="headerlink" title="js中的typeof类型检测函数"></a>js中的typeof类型检测函数</h4><ul><li>typeof(类型监测)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * undefined: 这个值未定义</span></span><br><span class="line"><span class="comment"> * boolean: 布尔类型</span></span><br><span class="line"><span class="comment"> * string: 字符串</span></span><br><span class="line"><span class="comment"> * number: 数字</span></span><br><span class="line"><span class="comment"> * object: objetc 或者 null</span></span><br><span class="line"><span class="comment"> * function: 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;这是测试&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;string&quot;</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;boolean&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;number&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;object&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;function&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;undefined&quot;</span>; <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="1-Undefined类型：-Undefined类型只有一即undefined，-在声明变量但未赋值的情况下，变量的值为undefined"><a href="#1-Undefined类型：-Undefined类型只有一即undefined，-在声明变量但未赋值的情况下，变量的值为undefined" class="headerlink" title="1, Undefined类型： Undefined类型只有一即undefined， 在声明变量但未赋值的情况下，变量的值为undefined"></a>1, Undefined类型： Undefined类型只有一即undefined， 在声明变量但未赋值的情况下，变量的值为undefined</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用场景：</span></span><br><span class="line"><span class="comment"> * 1. 变量声明但没赋值</span></span><br><span class="line"><span class="comment"> * 2. 调用函数时该传入的参数没传</span></span><br><span class="line"><span class="comment"> * 3. 函数没有返回值时默认返回undefined</span></span><br><span class="line"><span class="comment"> * 4. 对象中属性值没有赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="2-Null类型-null是JavaScript中的关键字；-Null类型只有一个即null，-null表示空对象指针-变量的值将来是用来保存对象最好设置为null"><a href="#2-Null类型-null是JavaScript中的关键字；-Null类型只有一个即null，-null表示空对象指针-变量的值将来是用来保存对象最好设置为null" class="headerlink" title="2, Null类型: null是JavaScript中的关键字； Null类型只有一个即null， null表示空对象指针, 变量的值将来是用来保存对象最好设置为null"></a>2, Null类型: null是JavaScript中的关键字； Null类型只有一个即null， null表示空对象指针, 变量的值将来是用来保存对象最好设置为null</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 使用场景：</span></span><br><span class="line"><span class="comment"> *  1. 定义的变量在将来用来保存对象</span></span><br><span class="line"><span class="comment"> *  2. 在一个数据不再使用的时候，我们最好将其值设置为null来释放其引用，以便垃圾回收下一次对其回收</span></span><br><span class="line"><span class="comment"> *  3. 作为对象原型链的终端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="3-Boolean-布尔类型，该类型只有两个值true-和-false，要将一个值转换为boolean类型的值需要用到Boolean转换"><a href="#3-Boolean-布尔类型，该类型只有两个值true-和-false，要将一个值转换为boolean类型的值需要用到Boolean转换" class="headerlink" title="3,Boolean: 布尔类型，该类型只有两个值true 和 false，要将一个值转换为boolean类型的值需要用到Boolean转换"></a>3,Boolean: 布尔类型，该类型只有两个值true 和 false，要将一个值转换为boolean类型的值需要用到Boolean转换</h4><table><thead><tr><th>数据类型</th><th>转换为true的值</th><th>转换为false的值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任何非空字符串</td><td>“”(空字符串)</td></tr><tr><td>Number</td><td>任何非零数字值(包括无穷大)</td><td>0和NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>false</td><td>Undefined</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 转换规则：</span></span><br><span class="line"><span class="comment"> * 1. 字符串： 任意非空类型的字符串-&gt;true, 空类型的字符串-&gt;false</span></span><br><span class="line"><span class="comment"> * 2. number: 任何非0数字,包括正(负)的无穷大-&gt; true,</span></span><br><span class="line"><span class="comment"> * 3. object: 任何对象-&gt;true</span></span><br><span class="line"><span class="comment"> * 4. undefined: undefined -&gt;false</span></span><br><span class="line"><span class="comment"> * 5, null: null -&gt; false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(-<span class="number">0.4774</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="4-number-数字类型，-对应数学中的有理数，在计算机中有-定的精度限制，-NaN-infinity-infinity"><a href="#4-number-数字类型，-对应数学中的有理数，在计算机中有-定的精度限制，-NaN-infinity-infinity" class="headerlink" title="4, number: 数字类型， 对应数学中的有理数，在计算机中有-定的精度限制， NaN/ infinity/ -infinity"></a>4, number: 数字类型， 对应数学中的有理数，在计算机中有-定的精度限制， NaN/ infinity/ -infinity</h4><ul><li>NaN: 非数值，即本来应该要返回数值操作但是未返回数值的情况， 任何涉及NaN的操作都会返回NaN,其次NaN与任何值都不相等包括NaN本身<br>  <span style="color:red;"> isNaN函数用来判断一个是否是NaN,j接受任意类型的值，该函数会尝将值转换为数字型，任何不能被转换的值该函数都会返回true</span></li></ul><table><thead><tr><th>数据类型</th><th>Number</th><th>parseInt</th><th>parseFloat</th></tr></thead><tbody><tr><td>Number</td><td>简单的传入和返回</td><td>简单的传入和返回</td><td>简单的传入和返回</td></tr><tr><td>String</td><td>字符串为空 -&gt; 0; 字符串包含十六进制 -&gt; 转换为十六进制的值; 字符串包含数字 -&gt; 十进制的数</td><td>忽略字符串前面的空格，找到第一个非空字符，如果找不到数字字符返回NaN; 如果找到字符是数字就会继续解析第二个字符，直到字符不是数字为止</td><td>忽略字符前面的空格, 从第一个字符开始解析; 解析遇到第一个无效的浮点数字字符或者 字符串最后为止</td></tr><tr><td>Boolean</td><td>true -&gt; 1; false -&gt; 0</td><td>NaN</td><td>NaN</td></tr><tr><td>Null</td><td>0</td><td>NaN</td><td>NaN</td></tr><tr><td>Undefined</td><td>0</td><td>NaN</td><td>NaN</td></tr><tr><td>Object</td><td>调用对象的valueOf方法按照上述规则转换，如果转结果为NaN则会调用对象的toString方法，然后按照上面的规则再次转换</td><td>NaN</td><td>NaN</td></tr><tr><td>Symbol</td><td>/</td><td>/</td><td>/</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 转换规则</span></span><br><span class="line"><span class="comment"> * 1. boolean: true -&gt; 1, false -&gt; 0</span></span><br><span class="line"><span class="comment"> * 2. number: 简单的传入和返回</span></span><br><span class="line"><span class="comment"> * 3. null: null -&gt; 0</span></span><br><span class="line"><span class="comment"> * 4. undefined: undefined -&gt; 0</span></span><br><span class="line"><span class="comment"> * 5. 字符串: 字符串为空 -&gt; 0; 字符串包含十六进制 -&gt; 转换为十六进制的值; 字符串包含数字 -&gt; 十进制的数值</span></span><br><span class="line"><span class="comment"> * 6. object: 对象 -&gt; valueOf方法按照上述规则转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;hello wrod&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot; &quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;000011&quot;</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  parseInt: 忽略字符串前面的空格，找到第一个非空字符串，如果第一个字符不是数* 字或者负号返回NaN; 如果第一个字符是数字就会继续解析第二个字符，直到字符不是* 数字为止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1266rhfur&quot;</span>); <span class="comment">// 1266</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;rufgrfr&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseFloat: 从第一个字符开始解析; 解析遇到第一个无效的浮点数字字符或者* 字符串最后为止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;23.38434.8484&quot;</span>); <span class="comment">// 23.38434</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;frfr&quot;</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>Question:</p><ul><li><p>为什么 0.2 + 0.1 == 0.3 为false</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0.05</span> + <span class="number">0.25</span> == <span class="number">0.3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>answer:机器只识别二进制，将小数转为二进制数之后可能有精度丢失的问题[参考资料](https://zhuanlan.zhihu.com/p/159075016)</code></pre></li></ul><h4 id="5-string-字符串一旦创就不可变，如果需要改变其值需要销毁原有的值-然后在用一个包含新值得字符串去填充该变量"><a href="#5-string-字符串一旦创就不可变，如果需要改变其值需要销毁原有的值-然后在用一个包含新值得字符串去填充该变量" class="headerlink" title="5, string: 字符串一旦创就不可变，如果需要改变其值需要销毁原有的值, 然后在用一个包含新值得字符串去填充该变量"></a>5, string: 字符串一旦创就不可变，如果需要改变其值需要销毁原有的值, 然后在用一个包含新值得字符串去填充该变量</h4><table><thead><tr><th>数据类型</th><th>toString</th></tr></thead><tbody><tr><td>null</td><td>error</td></tr><tr><td>Undefined</td><td>error</td></tr><tr><td>Number</td><td>返回相应值的字符串形式</td></tr><tr><td>Boolean</td><td>返回相应值得字符串形式</td></tr><tr><td>String</td><td>返回相应值得字符串形式</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 将一个值转为字符串</span></span><br><span class="line"><span class="comment"> *  toString方法</span></span><br><span class="line"><span class="comment"> *  number、boolean、Object、 string都有toString方式, 多数情况下调用toString方法不用传* 参数， 但是对于number类型可以传一个参数代表返回的进制, 一般情况下是以十进制返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="number">11</span>;</span><br><span class="line">message.toString(); <span class="comment">// &#x27;11&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num.toString(<span class="number">16</span>); <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在不知道转换的值的类型时可以使用String方法转成string类型，然后调用tostring方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">String</span>(a).toString(); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="6-Object-一组数据和功能的集合-object-是所有它的实例基础"><a href="#6-Object-一组数据和功能的集合-object-是所有它的实例基础" class="headerlink" title="6, Object: 一组数据和功能的集合, object 是所有它的实例基础"></a>6, Object: 一组数据和功能的集合, object 是所有它的实例基础</h4><ul><li>每一个对象都有几个属性:<ol><li>constructor: 保存用于创建当前对象的函数</li><li>hasOwnProperty(propertyName) : 检查给定的属性是否存在当前实例上而不是原型上</li><li>valueOf: 返回字符串，通常与toString方法返回值相同</li><li>tostring: 返回对象的字符串标识</li></ol></li></ul><h4 id="7-Symbol-symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型"><a href="#7-Symbol-symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型" class="headerlink" title="7, Symbol: symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型"></a>7, Symbol: symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型</h4><ul><li>解决问题： 对象中的属性名都是字符串容易造成冲突</li></ul><p>总结：<br>1, undefined和null的区别<br>    a， undefined表示变量未声明或者声明未赋值； null表示什么都没有<br>    b， js会将未赋值的变量默认值设为undefined； js不会将变量设置为null<br>    c， undefined使用typeof返回值是undefined; null类型返回object</p><p>2, instanceof 和 typeof 的区别？<br>    <span style="color: red;">typeof 用于判断标识符的类型， 但是不能判断对象的类型， 比如data， 数组,对于typeof来讲都是返回object， instanceof用于判断对象是否属于某一个对象的实例， 原型上的相等</span></p><h4 id="javascript-语句"><a href="#javascript-语句" class="headerlink" title="javascript 语句"></a>javascript 语句</h4><ol><li><p>if语句</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * if (condition) statement1 esle statement2</span></span><br><span class="line"><span class="comment"> *  condition: 可以为任意的表达式，而且对这个值的求职结果不一定是布尔值。js自动会对condition的值调用boolean方法去转* 为布尔值</span></span><br><span class="line"><span class="comment"> * 如果condition为true就在执行statement1, 否则就执行statement2语句。这个两个语句可以是一句代码，也可以是个代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">25</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;fyrgfyr&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do-while 语句: 是一种后测试语句(只有在循环体的中的代码执行完之后才会测试出口条件, 循环体至少执行一次)</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * do&#123;statement&#125; whild(expressiong)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &gt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p>while 语句: 前测试循环语句(循环体可一次都不执行)</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  while(expression) statement</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">while</span>(<span class="params"> i&lt; = <span class="number">10</span> </span>)</span> &#123;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for 语句: 前测试循环语句（有执行循环之前初始化变量和定义循环后要执行的代码的能力）</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for(initalnition; expressiong; loop-expressiong) statement</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= count; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>forin 语句: 是一种精准的迭代语句，用来枚举对象的属性</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for(property in expression) statement</span></span><br><span class="line"><span class="keyword">for</span> (pro <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pro);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>break 和 continue 语句: 用于在循环中精确的控制代码的执行</p></li></ol><ul><li><p>break: 会立即退出循环, 强制执行循环语句后面的语句</p></li><li><p>countinue: 会立即退出循环, 但是退出循环之后会从循环的顶部立即执行</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li>switch 语句: 在比较时是采用全等操作符，因此不会发生类型装换</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;js基础语法&quot;&gt;&lt;a href=&quot;#js基础语法&quot; class=&quot;headerlink&quot; title=&quot;js基础语法&quot;&gt;&lt;/a&gt;js基础语法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1. 区分大小写: js 中的变量标识符区分大小写，也就意味这 test/Test 是两个不
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之词法分析</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(21)-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(21)-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2021-08-28T08:18:02.000Z</published>
    <updated>2021-08-28T08:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h4><h5 id="之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）"><a href="#之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）" class="headerlink" title="之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）"></a>之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）</h5><h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><pre><code>- 全局词法环境- 函数词法环境- with词法环境- catch词法环境</code></pre><img src="https://user-gold-cdn.xitu.io/2018/12/3/1677429807aea76d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"/><p> 伪代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LexicalEnvironment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.EnvironmentRecord =  <span class="keyword">new</span> EnvironmentRecord()<span class="comment">// 自己的词法环境</span></span><br><span class="line">    <span class="built_in">this</span>.outer = <span class="literal">undefined</span> <span class="comment">// 外部的词法环境的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EnvironmentRecord</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnvironmentRecord.prototype.rigister = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings.set(name, <span class="literal">undefined</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnvironmentRecord.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings[name] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnvironmentRecord.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.bindings[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;词法环境&quot;&gt;&lt;a href=&quot;#词法环境&quot; class=&quot;headerlink&quot; title=&quot;词法环境&quot;&gt;&lt;/a&gt;词法环境&lt;/h4&gt;&lt;h5 id=&quot;之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js引擎</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(20)-js%E5%BC%95%E6%93%8E/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(20)-js%E5%BC%95%E6%93%8E/</id>
    <published>2021-08-28T00:30:37.000Z</published>
    <updated>2021-08-28T00:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js引擎的执行流程"><a href="#js引擎的执行流程" class="headerlink" title="js引擎的执行流程"></a>js引擎的执行流程</h3><img src="../../../static/js引擎流程.png"><p><a href="https://zhuanlan.zhihu.com/p/96969423">参考资料</a><br><a href="https://juejin.im/post/6844903788629721096">js引擎</a></p><ul><li><p>js的词法分析</p><p> JS文件只是一个源码，机器是无法执行的，词法分析就是把源码的字符串分割出来，生成一系列的token</p> <img src="../../../static/js的词法分析.jpg" /></li><li><p>词法分析完后，接下来的阶段就是进行语法分析。语法分析语法分析的输入就是词法分析的输出，输出是AST抽象语法树。当程序出现语法错误的时候，V8在语法分析阶段抛出异常</p>  <img src="../../../static/js语法分析.jpg"></li></ul><p>v8引擎解阶段分为预解析和代码执行两阶段， 在预解阶段会有变量预解析和函数预解析</p><ul><li><p>js的字节码生阶段， 根据抽象语法树生成字节码</p> <img src="../../../static/js的字节码生成.jpg"></li><li><p>字节码的阶段</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;js引擎的执行流程&quot;&gt;&lt;a href=&quot;#js引擎的执行流程&quot; class=&quot;headerlink&quot; title=&quot;js引擎的执行流程&quot;&gt;&lt;/a&gt;js引擎的执行流程&lt;/h3&gt;&lt;img src=&quot;../../../static/js引擎流程.png&quot;&gt;

&lt;p&gt;&lt;a
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue深入之diff算法</title>
    <link href="http://zhangliminabc.github.io/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(1)-diff%E7%AE%97%E6%B3%95/"/>
    <id>http://zhangliminabc.github.io/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(1)-diff%E7%AE%97%E6%B3%95/</id>
    <published>2021-08-27T03:48:21.000Z</published>
    <updated>2021-08-27T03:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: diff算法</span><br><span class="line">op&#x3D;&gt;operation: 形参 oldVnode, newVnode</span><br><span class="line"></span><br><span class="line">op2&#x3D;&gt;operation: oldVnode的标签是否为undefined</span><br><span class="line"></span><br><span class="line">con1&#x3D;&gt;condition: 标签和key值是否相同(sameVnode)</span><br><span class="line"></span><br><span class="line">op3&#x3D;&gt;operation: pathVnode</span><br><span class="line">con2&#x3D;&gt;condition: oldVnode &#x3D;&#x3D;&#x3D; newVnode yes or no?</span><br><span class="line"></span><br><span class="line">con3&#x3D;&gt;condition: newVnode是否有text？</span><br><span class="line">con4&#x3D;&gt;condition: oldVnode.text !&#x3D;&#x3D; newVnode.text ?</span><br><span class="line">op6&#x3D;&gt;operation: removeOldVnodeChildren(删除老节点下的子元素) &#x2F; setTextContent(elm, newVnode.text)(以新节点为基准更新text值)</span><br><span class="line"></span><br><span class="line">op7&#x3D;&gt;operation: 新vnode无内容，有children</span><br><span class="line"></span><br><span class="line">con5&#x3D;&gt;condition: 新vnode有子节点， 老vnode也有子节点</span><br><span class="line">op8&#x3D;&gt;operation: updateChildren</span><br><span class="line"></span><br><span class="line">con6&#x3D;&gt;condition: 新vnode有子节点； 老oldVNode没有无子节点</span><br><span class="line">op9&#x3D;&gt;operation: addVnodes以新节点为基准添加子节点到对应的元素中</span><br><span class="line"></span><br><span class="line">con7&#x3D;&gt;condition: 老的vnode有子节点, 新vnode没有子节点</span><br><span class="line">op10&#x3D;&gt;operation: removeVnodes遍历老节点下的子节点移除</span><br><span class="line"></span><br><span class="line">con8&#x3D;&gt;condition: 老vnode有内容</span><br><span class="line">op11&#x3D;&gt;operation: setTextContent</span><br><span class="line"></span><br><span class="line">p4&#x3D;&gt;operation: 基于newVnode创建元素插入</span><br><span class="line"></span><br><span class="line">end&#x3D;&gt;end: 结束</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;con1</span><br><span class="line"></span><br><span class="line">con1(yes)-&gt;op3-&gt;con2</span><br><span class="line">con1(no)-&gt;op4</span><br><span class="line"></span><br><span class="line">con2(yes)-&gt;end</span><br><span class="line">con2(no)-&gt;con3</span><br><span class="line"></span><br><span class="line">con3(yes)-&gt;con4</span><br><span class="line">con3(no)-&gt;op7-&gt;con5</span><br><span class="line"></span><br><span class="line">con4(yes)-&gt;op6-&gt;end</span><br><span class="line">con4(no)-&gt;end</span><br><span class="line"></span><br><span class="line">con5(yes)-&gt;op8</span><br><span class="line">con5(no)-&gt;con6</span><br><span class="line"></span><br><span class="line">con6(yes)-&gt;op9</span><br><span class="line">con6(no)-&gt;con7</span><br><span class="line"></span><br><span class="line">con7(yes)-&gt;op10</span><br><span class="line">con7(no)-&gt;con8</span><br><span class="line"></span><br><span class="line">con8(yes)-&gt;op11</span><br><span class="line">con8(no)-&gt;end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="虚拟dom的作用？"><a href="#虚拟dom的作用？" class="headerlink" title="虚拟dom的作用？"></a>虚拟dom的作用？</h4><p>为了不必要的dom操作，优化性能</p><p>数据改变 -&gt;虚拟DOM(计算变更)-&gt; 操作DOM -&gt; 视图更新</p><h4 id="v-for中的key的作用？"><a href="#v-for中的key的作用？" class="headerlink" title="v-for中的key的作用？"></a>v-for中的key的作用？</h4><p>在进行计算dom变动的时候可以对同级元素可以更高效的计算出变动，对性能的优化</p><h4 id="简述diff过程"><a href="#简述diff过程" class="headerlink" title="简述diff过程"></a>简述diff过程</h4><p>diff原理：</p><p>不同标签直接替换</p><p>同级相同变量通过key计算变动</p><p><a href="https://juejin.cn/post/6844903950886371342">https://juejin.cn/post/6844903950886371342</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zhangliminabc.github.io/categories/vue/"/>
    
    
      <category term="框架" scheme="http://zhangliminabc.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="vue" scheme="http://zhangliminabc.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>css深入之flex</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(11)-flex/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(11)-flex/</id>
    <published>2021-08-26T12:58:56.000Z</published>
    <updated>2021-08-26T12:58:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="flex-弹性布局"><a href="#flex-弹性布局" class="headerlink" title="flex: 弹性布局"></a>flex: 弹性布局</h4><p>采用flex布局的元素称为flex容器, 它所有的子元素自动成为容器成员</p><img src=".././../../static/flex.png"><p>容器中默认存在两根轴：</p><p>水平的主轴(main axis)<br>垂直的主轴(cross axis)<br>项目默认沿主轴排列，单个项目占据的主轴空间叫 main size</p><p>容器的属性:</p><ol><li><p style="color: red;">flex-direction</p><p>决定主轴的方向：row | row-reverse | column | column-reverse;</p><img align="center" src="../../../static/flexdirection.png">row: 主轴为水平方向，起点在左端row-reverse: 主轴为水平方向，起点在右端。column:主轴为垂直方向，起点在上沿column-reverse:主轴为垂直方向，起点在下沿</li><li><p style="color:red;">flex-wrap</p><p>决定主轴方向换行规则：nowrap | wrap | wrap-reverse;</p><img align="center" src="../../../static/flexwrap.png"><p>nowrap: 不换行<br>wrap:  换行，第一行在上方。<br>wrap-reverse: 换行，第一行在下方。</p></li><li><p style="color:red;">flex-flow</p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</li><li><p style="color:red;">justify-content: 定义了项目在主轴上的对齐方式。(水平)</p></li></ol><p>取值： flex-start | flex-end | center | space-between | space-around;<br><img src="../../../static/flexjutify.png"/><br>flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center： 居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p><ol start="5"><li><p style="color: red;">align-items: 定义项目在交叉轴上如何对齐。</p></li></ol><p>取值: flex-start | flex-end | center | baseline | stretch<br><img src="../../../static/flexaligin.png"><br>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</p><ol start="6"><li><p style="color:red;">align-content: 多根轴线在垂直方向上的对齐</p></li></ol><p>取值: flex-start | flex-end | center | space-between | space-around | stretch</p><img src="../../../static/flexaligncontent.png"><p>flex-start: 与交叉轴的起点对齐<br>flex-end：与交叉轴的终点对齐<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>center：与交叉轴的中点对齐。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。</p><h4 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h4><ol><li>order: 项目的排列顺序。数值越小，排列越靠前，默认为0</li><li>flex-grow: 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li><li>flex-shrink: 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</li><li>flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间</li><li>flex: flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto</li><li>align-self: 单个项目在垂直方向的对齐规则, 默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;flex-弹性布局&quot;&gt;&lt;a href=&quot;#flex-弹性布局&quot; class=&quot;headerlink&quot; title=&quot;flex: 弹性布局&quot;&gt;&lt;/a&gt;flex: 弹性布局&lt;/h4&gt;&lt;p&gt;采用flex布局的元素称为flex容器, 它所有的子元素自动成为容器成员&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://zhangliminabc.github.io/categories/css/"/>
    
    
      <category term="CSS" scheme="http://zhangliminabc.github.io/tags/css/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Flex" scheme="http://zhangliminabc.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>css深入之css的单位</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(10)-%E5%8D%95%E4%BD%8D/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(10)-%E5%8D%95%E4%BD%8D/</id>
    <published>2021-08-26T09:48:45.000Z</published>
    <updated>2021-08-26T09:48:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="css中有哪些单位？，各单位之间有什么不同？"><a href="#css中有哪些单位？，各单位之间有什么不同？" class="headerlink" title="css中有哪些单位？，各单位之间有什么不同？"></a>css中有哪些单位？，各单位之间有什么不同？</h4><p>之前对这块只是也是一知半解，今天彻底来捋捋</p><ol><li><p>px: 固定像素，</p></li><li><p>em: 相对单位，相对于自身的fontsize或者父元素的fontsize值计算<br>缺点: 使用时需要知道相对元素的字体大小</p></li><li><p>rem: 相对于根元素字体大小进行布局</p></li></ol><p>分辨率: 设备尺寸 * 像素密度</p><p>物理像素： 分辨率大小</p><p>设备独立像素： 视觉窗口大小</p><p>设备像素比： 物理像素和设备像素之间的关系</p><p>设备像素比 = 物理像素 / 设备像素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 将可视区域宽度分为10分，每一份占比width / 10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adportRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"> <span class="keyword">return</span> width / <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> docEl = win.document.documentElement;</span><br><span class="line"> <span class="keyword">const</span> resiezeEvt = <span class="string">&#x27;orientationchange&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">&#x27;orientationchange&#x27;</span> : <span class="string">&#x27;resize&#x27;</span>;</span><br><span class="line"> <span class="keyword">const</span> refreshRem = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">const</span> clientWidth = win.innerWidth || doc.documentElement.clientWidth || doc.body.clientWidth;</span><br><span class="line">     <span class="built_in">console</span>.log(clientWidth)</span><br><span class="line">     <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">     <span class="keyword">let</span> fz;</span><br><span class="line">     <span class="keyword">const</span> width = clientWidth;</span><br><span class="line">     fz = <span class="number">16</span> * width / <span class="number">375</span>;</span><br><span class="line">     docEl.style.fontSize = fz + <span class="string">&#x27;px&#x27;</span>;<span class="comment">//这样每一份也是16px,即1rem=16px</span></span><br><span class="line">   &#125;;</span><br><span class="line"> <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">   win.addEventListener(resizeEvt, refreshRem, <span class="literal">false</span>);</span><br><span class="line">   doc.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, refreshRem, <span class="literal">false</span>);</span><br><span class="line">   refreshRem();</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>vw/vh: 视图宽度的1/100, 视图高度的1/100</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> viewPortHeight = <span class="number">900</span></span><br><span class="line"><span class="keyword">const</span> vh = <span class="number">900</span> * <span class="number">1</span>/<span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> viewPortWidth = <span class="number">1</span>/ <span class="number">100</span> </span><br><span class="line"><span class="keyword">const</span> vw  = <span class="number">750</span> * <span class="number">1</span>/<span class="number">100</span></span><br></pre></td></tr></table></figure><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ol><li><p>rem和px的区别？<br>rem: 是一种弹性布局, 相对于根元素的字体大小<br>px: 是相对长度单位，相对物是屏幕分辨率</p></li><li><p>移动端适配有那几种方案？<br>meta-viewport: 动态设置缩放比例<br>rem：动态设置rem的值<br>媒体查询</p></li><li><p>怎样解决1px的问题？<br>设备像素比(dpr)为2的话, 设置border： 0.5px<br>box-shadow: box-shadow: inset 0px -1px 1px -1px #c8c7cc;<br>伪类 + transform 实现</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;css中有哪些单位？，各单位之间有什么不同？&quot;&gt;&lt;a href=&quot;#css中有哪些单位？，各单位之间有什么不同？&quot; class=&quot;headerlink&quot; title=&quot;css中有哪些单位？，各单位之间有什么不同？&quot;&gt;&lt;/a&gt;css中有哪些单位？，各单位之间有什么不
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://zhangliminabc.github.io/categories/css/"/>
    
    
      <category term="CSS" scheme="http://zhangliminabc.github.io/tags/css/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>脚本加载方式</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(19)-%E8%84%9A%E6%9C%AC%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(19)-%E8%84%9A%E6%9C%AC%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/</id>
    <published>2021-08-26T09:34:09.000Z</published>
    <updated>2021-08-26T09:34:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS脚本加载，defer和async的区别"><a href="#JS脚本加载，defer和async的区别" class="headerlink" title="JS脚本加载，defer和async的区别"></a>JS脚本加载，defer和async的区别</h3><p>在html页面使用js通常有两种方式：</p><ol><li>内联js</li><li>外联脚本</li></ol><p>今天主要看一下使用外联脚本模式下defer 和 async 的 区别</p><h5 id="defer-立即加载但是延迟执行并且是有一定的顺序（效果更加类似于将脚本放在body元素之后的效果）"><a href="#defer-立即加载但是延迟执行并且是有一定的顺序（效果更加类似于将脚本放在body元素之后的效果）" class="headerlink" title="defer: 立即加载但是延迟执行并且是有一定的顺序（效果更加类似于将脚本放在body元素之后的效果）"></a>defer: 立即加载但是延迟执行并且是有一定的顺序（效果更加类似于将脚本放在body元素之后的效果）</h5><h5 id="async-异步加载不能保证执行的顺序"><a href="#async-异步加载不能保证执行的顺序" class="headerlink" title="async: 异步加载不能保证执行的顺序"></a>async: 异步加载不能保证执行的顺序</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JS脚本加载，defer和async的区别&quot;&gt;&lt;a href=&quot;#JS脚本加载，defer和async的区别&quot; class=&quot;headerlink&quot; title=&quot;JS脚本加载，defer和async的区别&quot;&gt;&lt;/a&gt;JS脚本加载，defer和async的区别&lt;/
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>函数柯里化</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(18)-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(18)-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</id>
    <published>2021-08-26T07:37:15.000Z</published>
    <updated>2021-08-26T07:37:15.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="什么是函数柯里化？"><a href="#什么是函数柯里化？" class="headerlink" title="什么是函数柯里化？"></a>什么是函数柯里化？</h5><p>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数（多参数函数转化成一系列使用一个参数的函数的技术）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> params = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (params.length &gt;= fn.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> fn(...args)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">args</span>) =&gt;</span> curry(fn, ...params, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y, z) <span class="comment">// 1,2,3</span></span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(curry(add1, <span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="为什么要函数柯里化？"><a href="#为什么要函数柯里化？" class="headerlink" title="为什么要函数柯里化？"></a>为什么要函数柯里化？</h5><p>参数复用： 利用闭包内存中记录上一个函数的参数<br>提前返回： 避免部分逻辑重复执行<br>延迟执行： 每次调用之后并不是真正的执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;什么是函数柯里化？&quot;&gt;&lt;a href=&quot;#什么是函数柯里化？&quot; class=&quot;headerlink&quot; title=&quot;什么是函数柯里化？&quot;&gt;&lt;/a&gt;什么是函数柯里化？&lt;/h5&gt;&lt;p&gt;只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数（多参数函数转化成一
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>bable深入系列1</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/bable%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97(1)/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/bable%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97(1)/</id>
    <published>2021-08-26T02:57:35.000Z</published>
    <updated>2021-08-26T02:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Babel是什么？"><a href="#Babel是什么？" class="headerlink" title="Babel是什么？"></a>Babel是什么？</h4><p>将ES5+的语法向后兼容转换成js语法，以便运行在老版或者旧版浏览器中</p><h4 id="Babel能做什么？"><a href="#Babel能做什么？" class="headerlink" title="Babel能做什么？"></a>Babel能做什么？</h4><ol><li>语法转化</li><li>源码转化</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Babel是什么？&quot;&gt;&lt;a href=&quot;#Babel是什么？&quot; class=&quot;headerlink&quot; title=&quot;Babel是什么？&quot;&gt;&lt;/a&gt;Babel是什么？&lt;/h4&gt;&lt;p&gt;将ES5+的语法向后兼容转换成js语法，以便运行在老版或者旧版浏览器中&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="Babel" scheme="http://zhangliminabc.github.io/categories/babel/"/>
    
    
      <category term="Babel" scheme="http://zhangliminabc.github.io/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>图片优化</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%80%A7%E8%83%BD/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%80%A7%E8%83%BD/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/</id>
    <published>2021-08-25T01:56:44.000Z</published>
    <updated>2021-08-25T01:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="懒加载-只加载可视区域内的图片"><a href="#懒加载-只加载可视区域内的图片" class="headerlink" title="懒加载: 只加载可视区域内的图片"></a>懒加载: 只加载可视区域内的图片</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadelayer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到可视区域内的高度</span></span><br><span class="line">  <span class="keyword">const</span> viewHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">  <span class="comment">// 拿到所有的图片</span></span><br><span class="line">  <span class="keyword">const</span> images = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line"> <span class="keyword">const</span> images = <span class="built_in">Array</span>.from(images)</span><br><span class="line"> <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i =<span class="number">0</span> ; i&lt;= images.length-<span class="number">1</span>; i++</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> img = images[i]</span><br><span class="line">  <span class="comment">// 用可视区域高度减去元素顶部距离可视区域顶部的高度</span></span><br><span class="line">  <span class="keyword">let</span> distance = viewHeight - imgs.getBoundingClientRect().top;</span><br><span class="line">  <span class="keyword">if</span> (distance &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 给元素写入真实的src，展示图片</span></span><br><span class="line">        imgs[i].src = imgs[i].getAttribute(<span class="string">&quot;data-src&quot;</span>);</span><br><span class="line">        <span class="comment">// 前i张图片已经加载完毕，下次从第i+1张开始检查是否露出</span></span><br><span class="line">        num = i + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="图片预加载"><a href="#图片预加载" class="headerlink" title="图片预加载"></a>图片预加载</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">proloadImage</span>(<span class="params">images</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> preloadImage = []</span><br><span class="line">    <span class="keyword">if</span> (images.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> preloadImage</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; images.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> imageItem = <span class="keyword">new</span> Image()</span><br><span class="line">        imageItem.src = images[i]</span><br><span class="line">        <span class="keyword">if</span> (imageItem.complete) &#123;</span><br><span class="line">            preloadImage.push(imageItem)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            imageItem.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                proloadImage.push(imageItem)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;懒加载-只加载可视区域内的图片&quot;&gt;&lt;a href=&quot;#懒加载-只加载可视区域内的图片&quot; class=&quot;headerlink&quot; title=&quot;懒加载: 只加载可视区域内的图片&quot;&gt;&lt;/a&gt;懒加载: 只加载可视区域内的图片&lt;/h5&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="性能优化" scheme="http://zhangliminabc.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="性能优化" scheme="http://zhangliminabc.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浏览器深入之跨页通信</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(1)-%E8%B7%A8%E9%A1%B5%E9%80%9A%E4%BF%A1/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(1)-%E8%B7%A8%E9%A1%B5%E9%80%9A%E4%BF%A1/</id>
    <published>2021-08-23T14:37:10.000Z</published>
    <updated>2021-08-23T14:37:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="同源-域名，协议，端口相同"><a href="#同源-域名，协议，端口相同" class="headerlink" title="同源: 域名，协议，端口相同"></a>同源: 域名，协议，端口相同</h4><h4 id="跨域-指跨域名的访问"><a href="#跨域-指跨域名的访问" class="headerlink" title="跨域: 指跨域名的访问"></a>跨域: 指跨域名的访问</h4><h5 id="同源页之间的通信"><a href="#同源页之间的通信" class="headerlink" title="同源页之间的通信"></a>同源页之间的通信</h5><h6 id="BroadcastChannel"><a href="#BroadcastChannel" class="headerlink" title="BroadcastChannel"></a>BroadcastChannel</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接到广播频道</span></span><br><span class="line"><span class="keyword">var</span> bc = <span class="keyword">new</span> BroadcastChannel(<span class="string">&#x27;test_channel&#x27;</span>);</span><br><span class="line"><span class="comment">// 发送简单消息的示例</span></span><br><span class="line">bc.postMessage(<span class="string">&#x27;This is a test message.&#x27;</span>);</span><br><span class="line"><span class="comment">// 简单示例，用于将事件打印到控制台</span></span><br><span class="line">bc.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123; <span class="built_in">console</span>.log(ev); &#125;</span><br></pre></td></tr></table></figure><h6 id=""><a href="#" class="headerlink" title=""></a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;同源-域名，协议，端口相同&quot;&gt;&lt;a href=&quot;#同源-域名，协议，端口相同&quot; class=&quot;headerlink&quot; title=&quot;同源: 域名，协议，端口相同&quot;&gt;&lt;/a&gt;同源: 域名，协议，端口相同&lt;/h4&gt;&lt;h4 id=&quot;跨域-指跨域名的访问&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://zhangliminabc.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="浏览器" scheme="http://zhangliminabc.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSS深入之性能优化</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(9)-css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(9)-css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2021-08-23T14:11:21.000Z</published>
    <updated>2021-08-23T14:11:21.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="css性能优化的方式"><a href="#css性能优化的方式" class="headerlink" title="css性能优化的方式"></a>css性能优化的方式</h4><ol><li>合并css文件, 如果页面加载10个1kb的css文件，也比加载一个100kb的css快</li><li>减少css的嵌套，最好不要嵌套三层以上</li><li>不要在id选择器下面进行嵌套，id选择器本就是层级最高</li><li>建立公共样式，吧相同样式抽取出来</li><li>gzip压缩</li><li>避免过分的重排</li><li>css动画</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;css性能优化的方式&quot;&gt;&lt;a href=&quot;#css性能优化的方式&quot; class=&quot;headerlink&quot; title=&quot;css性能优化的方式&quot;&gt;&lt;/a&gt;css性能优化的方式&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;合并css文件, 如果页面加载10个1kb的css文件，也比加载
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://zhangliminabc.github.io/categories/css/"/>
    
    
      <category term="CSS" scheme="http://zhangliminabc.github.io/tags/css/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(8)-css3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(8)-css3%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-08-23T14:10:48.000Z</published>
    <updated>2021-08-23T14:10:48.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
