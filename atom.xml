<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浅笑整个夏季</title>
  
  <subtitle>做一个快乐的程序媛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangliminabc.github.io/"/>
  <updated>2022-05-30T03:22:32.000Z</updated>
  <id>http://zhangliminabc.github.io/</id>
  
  <author>
    <name>浅笑整个夏季</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见tsconfig配置</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8Btsconfig/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8Btsconfig/</id>
    <published>2022-05-30T03:22:32.000Z</published>
    <updated>2022-05-30T03:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions:"></a>compilerOptions:</h3><ul><li>@types, typeRoots, types</li></ul><p>types: string[] : 被列出来的包才会被包含进来<br>typeRoots: string[]: typeRoots 被列出来的包才会包含进来</p><ul><li><p>target<br>target： string: 指定ECMAScript 目标版本</p></li><li><p>experimentalDecorators: boolean<br>是否开启装饰器</p></li></ul><p>(tsconfig-compilerOption-参考文档)[<a href="https://www.tslang.cn/docs/handbook/compiler-options.htm]">https://www.tslang.cn/docs/handbook/compiler-options.htm]</a></p><h3 id="files-string-指定一个包含相对或绝对文件路径的列表"><a href="#files-string-指定一个包含相对或绝对文件路径的列表" class="headerlink" title="files: string[]:  指定一个包含相对或绝对文件路径的列表"></a>files: string[]:  指定一个包含相对或绝对文件路径的列表</h3><h3 id="include-string-包含文件"><a href="#include-string-包含文件" class="headerlink" title="include: string[]: 包含文件"></a>include: string[]: 包含文件</h3><h3 id="exclude-string-排除文件"><a href="#exclude-string-排除文件" class="headerlink" title="exclude: string[]: 排除文件"></a>exclude: string[]: 排除文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;compilerOptions&quot;&gt;&lt;a href=&quot;#compilerOptions&quot; class=&quot;headerlink&quot; title=&quot;compilerOptions:&quot;&gt;&lt;/a&gt;compilerOptions:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;@types, ty
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>高级类型</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-05-30T02:59:16.000Z</published>
    <updated>2022-05-30T02:59:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="交叉类型-T-amp-U：-将多个类型合并为一个类型"><a href="#交叉类型-T-amp-U：-将多个类型合并为一个类型" class="headerlink" title="交叉类型 T &amp; U： 将多个类型合并为一个类型"></a>交叉类型 T &amp; U： 将多个类型合并为一个类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Extends</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; (<span class="params">first: T, second: U</span>): <span class="title">T</span> &amp; <span class="title">U</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="xml"><span class="tag">&lt;<span class="name">T</span> &amp; <span class="attr">U</span>&gt;</span>&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">for(let key in first) &#123;</span></span><br><span class="line">(&lt;any&gt;result)[key] = first[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(let key in second) &#123;</span><br><span class="line">(&lt;any&gt;result)[key] = second[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return result</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="联合类型-T-U-值可以是几种类型之一-竖线（-）分隔每个类型"><a href="#联合类型-T-U-值可以是几种类型之一-竖线（-）分隔每个类型" class="headerlink" title="联合类型 T | U : 值可以是几种类型之一, 竖线（ |）分隔每个类型"></a>联合类型 T | U : 值可以是几种类型之一, 竖线（ |）分隔每个类型</h3><h3 id="类型保护：-parameterName-is-Type"><a href="#类型保护：-parameterName-is-Type" class="headerlink" title="类型保护： parameterName is Type"></a>类型保护： parameterName is Type</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;交叉类型-T-amp-U：-将多个类型合并为一个类型&quot;&gt;&lt;a href=&quot;#交叉类型-T-amp-U：-将多个类型合并为一个类型&quot; class=&quot;headerlink&quot; title=&quot;交叉类型 T &amp;amp; U： 将多个类型合并为一个类型&quot;&gt;&lt;/a&gt;交叉类型 T
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-05-30T02:30:13.000Z</published>
    <updated>2022-05-30T02:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><ul><li><p>布尔值（boolean）</p></li><li><p>数字 （ number)</p></li><li><p>字符串 （ string)</p></li><li><p>数组 array</p></li><li><p>元组（Tuple） ： 已知元素数量和类型的数组</p></li><li><p>枚举 （ enum ）</p></li><li><p>any: 不清楚变量的类型</p></li><li><p>void： 没有任何类型， 函数返回值</p></li><li><p>null | undefined： </p></li><li><p>never：永不存在的值的类型</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础类型&quot;&gt;&lt;a href=&quot;#基础类型&quot; class=&quot;headerlink&quot; title=&quot;基础类型&quot;&gt;&lt;/a&gt;基础类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;布尔值（boolean）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数字 （ number)&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-29-ts%E4%B9%8Bmixin/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-29-ts%E4%B9%8Bmixin/</id>
    <published>2022-05-29T09:34:33.000Z</published>
    <updated>2022-05-29T09:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mixin（混入）"><a href="#mixin（混入）" class="headerlink" title="mixin（混入）"></a>mixin（混入）</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMixins</span>(<span class="params">derivedCtor: <span class="built_in">any</span>, baseCtors: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">  baseCtors.forEach(<span class="function">(<span class="params">baseCtor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disposable</span> </span>&#123;</span><br><span class="line">isDisposed: <span class="built_in">boolean</span></span><br><span class="line"><span class="function"><span class="title">dispose</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.isDisposed = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Activetable</span> </span>&#123;</span><br><span class="line">isActive: <span class="built_in">boolean</span></span><br><span class="line">active () &#123;</span><br><span class="line"><span class="built_in">this</span>.isActive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">deactivate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.isActive = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartObject</span> <span class="title">implement</span> <span class="title">Disposable</span>, <span class="title">Activetable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">interact</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.activate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disposable</span></span><br><span class="line">  isDisposed: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  dispose: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="comment">// Activatable</span></span><br><span class="line">  isActive: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  activate: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  deactivate: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyMixins(SmartObject, [Disposable, Activatable]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> smartObj = <span class="keyword">new</span> SmartObject();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> smartObj.interact(), <span class="number">1000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Disposable Mixin</span></span><br><span class="line"><span class="keyword">var</span> Disposable = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Disposable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Disposable.prototype.dispose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.isDisposed = <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Disposable;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Activatable Mixin</span></span><br><span class="line"><span class="keyword">var</span> Activatable = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Activatable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Activatable.prototype.activate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.isActive = <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Activatable.prototype.deactivate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.isActive = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Activatable;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SmartObject = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SmartObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">// Disposable</span></span><br><span class="line">        <span class="built_in">this</span>.isDisposed = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// Activatable</span></span><br><span class="line">        <span class="built_in">this</span>.isActive = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(_this.isActive + <span class="string">&#x27; : &#x27;</span> + _this.isDisposed); &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SmartObject.prototype.interact = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.activate();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> SmartObject;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">applyMixins(SmartObject, [Disposable, Activatable]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> smartObj = <span class="keyword">new</span> SmartObject();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> smartObj.interact(); &#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// In your runtime library somewhere</span></span><br><span class="line"><span class="comment">////////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMixins</span>(<span class="params">derivedCtor, baseCtors</span>) </span>&#123;</span><br><span class="line">    baseCtors.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">baseCtor</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mixin 的本质是将 混入元素的 prototype 拷贝到目标元素上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mixin（混入）&quot;&gt;&lt;a href=&quot;#mixin（混入）&quot; class=&quot;headerlink&quot; title=&quot;mixin（混入）&quot;&gt;&lt;/a&gt;mixin（混入）&lt;/h3&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-27-ts%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-27-ts%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2022-05-27T09:16:24.000Z</published>
    <updated>2022-05-27T09:16:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h3><p>装饰器是一种特殊的声明， 可以附加到 类声明、方法、访问器、属性 或者参数上。</p><p>@expression</p><h3 id="多个装饰器的运行方式？"><a href="#多个装饰器的运行方式？" class="headerlink" title="多个装饰器的运行方式？"></a>多个装饰器的运行方式？</h3><p>每个装饰器的表达式都是从上到下计算的<br>然后将结果作为函数从下到上调用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@f</span></span><br><span class="line"><span class="meta">@g</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>上面的例子 = f( g(x) )</p><h3 id="如何启用装饰器？"><a href="#如何启用装饰器？" class="headerlink" title="如何启用装饰器？"></a>如何启用装饰器？</h3><p>要启用对装饰器的支持，需要在tsconfig.json中配置experimentalDecorators</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>,</span><br><span class="line"><span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何定义一个装饰器"><a href="#如何定义一个装饰器" class="headerlink" title="如何定义一个装饰器"></a>如何定义一个装饰器</h3><p>装饰器工厂函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;first(): factory evaluated&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKeys: <span class="built_in">string</span>, description: PropertyDescription</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;first(): called&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;second(): factory evaluated&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, propertyKeys: <span class="built_in">string</span>, description: PropertyDescription</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;second(): called&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * first(): factory evaluated </span></span><br><span class="line"><span class="comment"> * second(): factory evaluated</span></span><br><span class="line"><span class="comment"> * second(): called</span></span><br><span class="line"><span class="comment"> * first(): called</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@first</span>()</span><br><span class="line"><span class="meta">@second</span>()</span><br><span class="line"><span class="function"><span class="title">method</span>(<span class="params"></span>)</span> &#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器的种类"><a href="#装饰器的种类" class="headerlink" title="装饰器的种类"></a>装饰器的种类</h3><ul><li>类装饰器</li></ul><p>类装饰器在类声明之前被定义<br>类装饰器表达式会在运行时被当做函数调用，类的构造函数作为其唯一的参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;<span class="keyword">new</span>(...args:<span class="built_in">any</span>[]):&#123;&#125;&#125;&gt;(<span class="title">constructor</span>:<span class="title">T</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">constructor</span> </span>&#123;</span><br><span class="line">        newProperty = <span class="string">&quot;new property&quot;</span>;</span><br><span class="line">        hello = <span class="string">&quot;override&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@classDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    property = <span class="string">&quot;property&quot;</span>;</span><br><span class="line">    hello: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hello = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Greeter(<span class="string">&quot;world&quot;</span>));</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hello: &quot;override&quot;</span></span><br><span class="line"><span class="comment"> * newProperty: &quot;new property&quot;</span></span><br><span class="line"><span class="comment"> * property: &quot;property&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>方法装饰器</li></ul><p>方法装饰器声明在一个方法的声明之前，它会被应用到方法的属性描述上，可以用来监视修改或替换方法定义<br>方法装饰器会在运行时被当作函数调用</p><p>装饰器参数：<br>静态成员的类的构造函数，或者实例成员的类的原型<br>成员的姓名<br>成员的属性描述符</p><ul><li>访问器装饰器<br>访问器装饰器声明在一个访问器之前<br>访问器装饰器会在运行时当做函数运行</li></ul><p>访问器参数：</p><p>静态成员是类的构造函数， 实例成员是类的原型对象<br>成员的名字<br>成员的属性描述符</p><p>如果访问器返回一个值，他会被用作方法的属性描述符</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configurable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">descriptor.configurable = value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> _x : <span class="built_in">number</span></span><br><span class="line"><span class="keyword">private</span> _y: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._x = x</span><br><span class="line"><span class="built_in">this</span>._y = y</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">get</span> <span class="title">x</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>属性装饰器</li></ul><p>属性访问器声明在属性声明之前</p><p>属性装饰器在运行时被当做函数运行</p><p>参数：</p><p>静态成员来说是类的构造函数，对于实例成员来说是类的原型对象<br>成员的名字</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatMetadataKey = <span class="built_in">Symbol</span>(<span class="string">&quot;format&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">formatString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.metadata(formatMetadataKey, formatString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormat</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.getMetadata(formatMetadataKey, target, propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">greeter: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.greeter = message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">greet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> formatString = getFormat(<span class="built_in">this</span>, <span class="string">&#x27;greeter&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> formatString.replace(<span class="string">&#x27;%s&#x27;</span>, <span class="built_in">this</span>.greeter)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>参数装饰器</li></ul><p>参数装饰器声明在参数之前</p><p>参数：</p><p>静态成员是类的构造函数，实例成员是类的原型对象<br>成员的名字<br>参数在函数参数列表中的索引</p><h3 id="装饰器能干什么？"><a href="#装饰器能干什么？" class="headerlink" title="装饰器能干什么？"></a>装饰器能干什么？</h3><p>它可以在不修改代码自身的前提下，给已有代码增加额外的行为</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是装饰器？&quot;&gt;&lt;a href=&quot;#什么是装饰器？&quot; class=&quot;headerlink&quot; title=&quot;什么是装饰器？&quot;&gt;&lt;/a&gt;什么是装饰器？&lt;/h3&gt;&lt;p&gt;装饰器是一种特殊的声明， 可以附加到 类声明、方法、访问器、属性 或者参数上。&lt;/p&gt;
&lt;p&gt;@ex
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>React-SSR 之基础知识</title>
    <link href="http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/react-ssr-%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/react-ssr-%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2022-05-23T06:59:09.000Z</published>
    <updated>2022-05-23T06:59:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSR VS SSR 的比较：</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a8041b9-5aee-49b9-a519-c83d7f8d50de/Untitled.png" alt="Untitled"></p><p>完美解决方式： React SSR( SSR + SPA)</p><h3 id="React-SSR-vs-SSR-vs-CSR-的-区别？"><a href="#React-SSR-vs-SSR-vs-CSR-的-区别？" class="headerlink" title="React SSR vs SSR vs CSR 的 区别？"></a>React SSR vs SSR vs CSR 的 区别？</h3><h6 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h6><p>SSR(SSR是 Server Side Rendering， 对应的中文名是服务端渲染也就是将渲染的工作放在服务端进行); 浏览器得到完整的结构后就可直接进行 DOM 的解析、构建、加载资源及后续的渲染。</p><p>优点： 首屏展示快， 搜索引擎比较友好有利于SEO<br>缺点： 页面加载需要向服务端请求完整页面内容和资源，访问量大时会对服务器造成一定压力<br>工作原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Server 端返回html页面</span><br><span class="line">end&#x3D;&gt;end: render</span><br><span class="line">st-&gt;end</span><br></pre></td></tr></table></figure><p>CSR(CSR是Client Side Rendering， 对应的中文名是客服端渲染）→ 常见的SPA(单页面应用）<br>优点：局部刷新提升用户体验， 只需要加载一次js和css，页面路由维护在客户端页面间组件跳转很快<br>缺点：SEO不够友好， 增加页面的白屏展示时间<br>工作原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Server 端返回初始Html</span><br><span class="line">op&#x3D;&gt;operation: 然后再由JS去异步加载数据完成页面的渲染</span><br><span class="line">e&#x3D;&gt;end: render</span><br><span class="line">st-&gt;op-&gt;e</span><br></pre></td></tr></table></figure><h3 id="React-SSR-的根本原理？"><a href="#React-SSR-的根本原理？" class="headerlink" title="React SSR 的根本原理？"></a>React SSR 的根本原理？</h3><p>React SSR  = SSR + CSR</p><h3 id="实现最基本的-React-SSR"><a href="#实现最基本的-React-SSR" class="headerlink" title="实现最基本的 React SSR?"></a>实现最基本的 React SSR?</h3><h3 id="何为同构？"><a href="#何为同构？" class="headerlink" title="何为同构？"></a>何为同构？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSR VS SSR 的比较：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a8041b9-5aee-49b9-a519-c83d7f8d50de/Untitle
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>uni-app之分包</title>
    <link href="http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-app%E4%B9%8B%E5%88%86%E5%8C%85/"/>
    <id>http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-app%E4%B9%8B%E5%88%86%E5%8C%85/</id>
    <published>2022-05-23T06:07:49.000Z</published>
    <updated>2022-05-23T06:07:49.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="小程序分包背景"><a href="#小程序分包背景" class="headerlink" title="小程序分包背景"></a>小程序分包背景</h5><p>小程序有体积和资源加载限制,各家小程序平台提供了分包方式，优化小程序的下载和启动速度， 目前微信支持每个包是2M</p><p>在小程序启动时，默认会下载主包并启动主包内页面，当用户进入分包内某个页面时，会把对应分包自动下载下来，下载完成后再进行展示。此时终端界面会有等待提示。</p><p>主包： 即放置默认启动页面 / TabBar 页面，以及一些分包都需要用到的公共资源或 JS脚本</p><p>而分包则是根据page.json的配置进行划分的</p><h5 id="如何分包？"><a href="#如何分包？" class="headerlink" title="如何分包？"></a>如何分包？</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;subPackages&quot;</span>: [</span><br><span class="line">  &#123; </span><br><span class="line">   <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;pages/signup&quot;</span>, <span class="comment">// 配置子包的根目录</span></span><br><span class="line">   <span class="attr">&quot;pages&quot;</span>: [ <span class="comment">// 子包由哪些页面组成</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line"> ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分包预载配置"><a href="#分包预载配置" class="headerlink" title="分包预载配置"></a>分包预载配置</h6><table><thead><tr><th align="left">字段</th><th align="right">类型</th><th align="center">必填</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">packages</td><td align="right">StringArray</td><td align="center">是</td><td align="center">无</td><td align="center">进入页面后预下载分包的 root 或 name。<strong>APP</strong> 表示主包。</td></tr><tr><td align="left">network</td><td align="right">String</td><td align="center">否</td><td align="center">wifi</td><td align="center">在指定网络下预下载，可选值为：all（不限网络）、wifi（仅wifi下预下载）</td></tr></tbody></table><p><a href="https://uniapp.dcloud.io/collocation/pages.html#subpackages">最后附上 uni-app关于分包的官方文档</a></p>]]></content>
    
    <summary type="html">
    
      小程序有体积和资源加载限制,各家小程序平台提供了分包方式，优化小程序的下载和启动速度， 目前微信支持每个包是2M; 在小程序启动时，默认会下载主包并启动主包内页面，当用户进入分包内某个页面时，会把对应分包自动下载下来，下载完成后再进行展示。此时终端界面会有等待提示。
    
    </summary>
    
    
      <category term="uni-app" scheme="http://zhangliminabc.github.io/categories/uni-app/"/>
    
    
      <category term="小程序" scheme="http://zhangliminabc.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染的性能优化</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%80%A7%E8%83%BD/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%80%A7%E8%83%BD/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2021-09-07T08:49:15.000Z</published>
    <updated>2021-09-07T08:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在浏览器中输入url到渲染的流程去优化"><a href="#在浏览器中输入url到渲染的流程去优化" class="headerlink" title="在浏览器中输入url到渲染的流程去优化"></a>在浏览器中输入url到渲染的流程去优化</h4><ol><li>域名解析: DNS根据对于的域名解析找到对应的ip地址</li><li>TCP的三次握手</li><li>浏览器拿到响应文件后开始解析</li></ol><h6 id="dns预解析"><a href="#dns预解析" class="headerlink" title="dns预解析"></a>dns预解析</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;dns-prefetch&quot;</span> href=<span class="string">&quot;//zhanglimin.github.io&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h6 id="资源预加载"><a href="#资源预加载" class="headerlink" title="资源预加载"></a>资源预加载</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;preload&quot;</span> href=<span class="string">&quot;http://example.com&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="从业务上去优化"><a href="#从业务上去优化" class="headerlink" title="从业务上去优化"></a>从业务上去优化</h4><h6 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h6><p>节流： 在一定时间内触发一次<br>防抖：在一定时间内不在触发才执行</p><h6 id="图片的赖加载"><a href="#图片的赖加载" class="headerlink" title="图片的赖加载"></a>图片的赖加载</h6><h6 id="图片的预加载"><a href="#图片的预加载" class="headerlink" title="图片的预加载"></a>图片的预加载</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在浏览器中输入url到渲染的流程去优化&quot;&gt;&lt;a href=&quot;#在浏览器中输入url到渲染的流程去优化&quot; class=&quot;headerlink&quot; title=&quot;在浏览器中输入url到渲染的流程去优化&quot;&gt;&lt;/a&gt;在浏览器中输入url到渲染的流程去优化&lt;/h4&gt;&lt;ol&gt;

      
    
    </summary>
    
    
      <category term="性能优化" scheme="http://zhangliminabc.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="性能优化" scheme="http://zhangliminabc.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端监控</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/</id>
    <published>2021-09-06T10:33:37.000Z</published>
    <updated>2021-09-06T10:33:37.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="页面埋点"><a href="#页面埋点" class="headerlink" title="页面埋点"></a>页面埋点</h4><h4 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h4><h4 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;页面埋点&quot;&gt;&lt;a href=&quot;#页面埋点&quot; class=&quot;headerlink&quot; title=&quot;页面埋点&quot;&gt;&lt;/a&gt;页面埋点&lt;/h4&gt;&lt;h4 id=&quot;性能监控&quot;&gt;&lt;a href=&quot;#性能监控&quot; class=&quot;headerlink&quot; title=&quot;性能监控&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="页面监控" scheme="http://zhangliminabc.github.io/categories/%E9%A1%B5%E9%9D%A2%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="页面监控" scheme="http://zhangliminabc.github.io/tags/%E9%A1%B5%E9%9D%A2%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>深入之移动端布局</title>
    <link href="http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    <id>http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/</id>
    <published>2021-09-05T13:08:52.000Z</published>
    <updated>2021-09-05T13:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域"><a href="#viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域" class="headerlink" title="viewport: 在移动设备上, viewport是设备屏幕用来显示我们网页的那一块区域"></a>viewport: 在移动设备上, viewport是设备屏幕用来显示我们网页的那一块区域</h4><p>viewport怎么设置？<br>viewport大小就等于可视区域的大小吗?</p><p>带着上面的问题我们进一步研究…</p><h6 id="viewport怎么设置"><a href="#viewport怎么设置" class="headerlink" title="viewport怎么设置?"></a>viewport怎么设置?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mate name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>viewport跟mate标签相关， 那content中的值代表什么意思那？<br>|  属性   | 定义  | 值 |<br>|  —-  | —-  | —- |<br>| width | 规定页面的宽度 | 可以为字符串值也可以为正整数 |<br>| initial-scale | 页面初始缩放比例 | 为数字也可以为小树 |<br>| maximum-scale  | 页面最大缩放比例 | 为数字也可以为小数 |<br>| minimum-scale | 页面最小缩放比例 | 为数字也可以为小 |<br>| user-scalable | 是否允许用户进行拖动缩放 | yes or no |</p><p>关于viewport就先熟悉到这里</p><p>css中的常用单位px和我们移动设备屏幕上的像素(pixel)有什么关系？ css里面的1px == 移动设备上的1pixel吗？</p><h5 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h5><p>设备的物理像素是移动设备在出厂时就固定了的像素，整个屏幕由一个挨着一个的间隙级小的像素组成； 分辨率 === 物理像素</p><h5 id="逻辑像素"><a href="#逻辑像素" class="headerlink" title="逻辑像素"></a>逻辑像素</h5><p>逻辑像素是屏幕接受程序控制的最小单位; css中的1px === 1个逻辑像素</p><h6 id="设备像素比-物理像素-逻辑像素"><a href="#设备像素比-物理像素-逻辑像素" class="headerlink" title="设备像素比 = 物理像素 / 逻辑像素"></a>设备像素比 = 物理像素 / 逻辑像素</h6><p>好了, 上面介绍了关于移动端的相关概念，接下来我们讨论一下对于移动端设配的方案</p><h6 id="rem-动态设置根元素的大小-等比例缩放"><a href="#rem-动态设置根元素的大小-等比例缩放" class="headerlink" title="rem: 动态设置根元素的大小(等比例缩放)"></a>rem: 动态设置根元素的大小(等比例缩放)</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> rem = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">10</span></span><br><span class="line"> docEl.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setRemUnit()</span><br></pre></td></tr></table></figure><p>postcss-pxtorem: 将单位转为rem</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">       rootValue: <span class="number">37.5</span>,</span><br><span class="line">       propList: [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;!font-size&#x27;</span>],</span><br><span class="line">       selectorBlackList: [<span class="string">&#x27;van-circle__layer&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>],</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>淘宝lib-flexible库:<br>a. 先获取页面中viewport中的mate标签上的初始化缩放值，计算出dpr和缩放<br>b. 没有dpr和缩放的话， 通过获取设备像素比dpr计算出缩放值<br>c. 如果没有mate标签就创建带有缩放的viewport的mate标签<br>d. 获取可视区域的宽度 / 10, 得到rem值然后设为html上的根元素的字体大小</p><h6 id="vw-vh-方案"><a href="#vw-vh-方案" class="headerlink" title="vw / vh 方案"></a>vw / vh 方案</h6><p>将可视区域等比划分为100分</p><p>如果视图窗口375px， 那么1vw = 3.75px</p><p>可以通过 postcss-px-to-viewport: 将px值转为vw/vh值</p><h6 id="媒体查询适应"><a href="#媒体查询适应" class="headerlink" title="媒体查询适应"></a>媒体查询适应</h6><h6 id="flex-rem"><a href="#flex-rem" class="headerlink" title="flex + rem"></a>flex + rem</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域&quot;&gt;&lt;a href=&quot;#viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域&quot; class=&quot;headerlink&quot; title=&quot;viewpo
      
    
    </summary>
    
    
      <category term="移动端" scheme="http://zhangliminabc.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://zhangliminabc.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack深入之基础配置</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E6%B7%B1%E5%85%A5(1)-%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E6%B7%B1%E5%85%A5(1)-%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/</id>
    <published>2021-09-02T00:31:34.000Z</published>
    <updated>2021-09-02T00:31:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="入口配置"><a href="#入口配置" class="headerlink" title="入口配置"></a>入口配置</h4><h6 id="单入口文件"><a href="#单入口文件" class="headerlink" title="单入口文件"></a>单入口文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: string | [string]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h6><p>dependOn: 当前入口所依赖的入口。它们必须在该入口被加载前被加载。<br>filename: 指定要输出的文件名称。<br>import: 启动时需加载的模块。<br>library: 指定 library 选项，为当前 entry 构建一个 library。<br>runtime: 运行时 chunk 的名字。如果设置了，就会创建一个新的运行时 chunk。在 webpack 5.43.0 之后可将其设为 false 以避免一个新的运行时 chunk。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">  app: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">  verdor: &#123;</span><br><span class="line">   dependOn: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">   <span class="keyword">import</span>: <span class="string">&#x27;src/app.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分离文件"><a href="#分离文件" class="headerlink" title="分离文件"></a>分离文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">  app: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">  verdor: <span class="string">&#x27;./verdor.js&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="输入-output-设置为对象输入"><a href="#输入-output-设置为对象输入" class="headerlink" title="输入(output): 设置为对象输入"></a>输入(output): 设置为对象输入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123; </span><br><span class="line"> output: &#123;</span><br><span class="line">  filename:  <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多文件配置,使用占位符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">   app: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">   search: <span class="string">&#x27;./src/search.js&#x27;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line"> output: &#123;</span><br><span class="line">   filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">   path: __dirname + <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="loader-对源代码进行转换"><a href="#loader-对源代码进行转换" class="headerlink" title="loader: 对源代码进行转换"></a>loader: 对源代码进行转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> <span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">     &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, use: <span class="string">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, use: <span class="string">&#x27;ts-loader&#x27;</span> &#125;,</span><br><span class="line">   ],</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="plugin插件"><a href="#plugin插件" class="headerlink" title="plugin插件"></a>plugin插件</h4><p>常见的plugin插件有哪些？</p><p>ProgressPlugin: 自定义编译过程中的进度条<br>HtmlWebpackPlugin: 生成html文件<br>DllPlugin: 可以将特定的类库提前打包然后引入<br>webpack-parallel-uglify-plugin: 压缩代码<br>UglifyJS： 单线程压缩代码<br>Tree Shaking： 删除项目中未被引用的代码</p><h4 id="webpack-优化："><a href="#webpack-优化：" class="headerlink" title="webpack 优化："></a>webpack 优化：</h4><ol><li>resolve.extensions：用来表明文件后缀列表，默认查找顺序是 [‘.js’, ‘.json’]，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该</li><li>可能减少后缀列表长度，然后将出现频率高的后缀排在前面</li><li>resolve.alias：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径</li><li>module.noParse：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助</li></ol><ol><li>loader优化， 指定包含的路径 include: [resolve(‘src)]; 指定不包含的路径exclude: /node_modules/</li><li>loader缓存 loader: ‘babel-loader?cacheDirectory=true’</li><li>HappyPack： 将loader的同步执行转换为并行</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      include: [resolve(<span class="string">&#x27;src&#x27;</span>)],</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// id 后面的内容对应下面</span></span><br><span class="line">      loader: <span class="string">&#x27;happypack/loader?id=happybabel&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">&#x27;happybabel&#x27;</span>,</span><br><span class="line">    loaders: [<span class="string">&#x27;babel-loader?cacheDirectory&#x27;</span>],</span><br><span class="line">    <span class="comment">// 开启 4 个线程</span></span><br><span class="line">    threads: <span class="number">4</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="4"><li>DllPlugin</li><li>Tree Shaking 可以实现删除项目中未被引用的代码</li><li>webpack-parallel-uglify-plugin || UglifyJS: 代码压缩</li></ol><p>a -&gt; bc -&gt;d -&gt; e</p><p>浅比对， 深比对</p><p>打包 -&gt; </p><p>css -&gt; </p><p>加载：<br>鋆： 避讳， css，performance</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;入口配置&quot;&gt;&lt;a href=&quot;#入口配置&quot; class=&quot;headerlink&quot; title=&quot;入口配置&quot;&gt;&lt;/a&gt;入口配置&lt;/h4&gt;&lt;h6 id=&quot;单入口文件&quot;&gt;&lt;a href=&quot;#单入口文件&quot; class=&quot;headerlink&quot; title=&quot;单入口文件&quot;&gt;
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://zhangliminabc.github.io/categories/webpack/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="webpack" scheme="http://zhangliminabc.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue深入之computed源码</title>
    <link href="http://zhangliminabc.github.io/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B9%8Bcomputed/"/>
    <id>http://zhangliminabc.github.io/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B9%8Bcomputed/</id>
    <published>2021-09-01T07:44:39.000Z</published>
    <updated>2021-09-01T07:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: initComputed</span><br><span class="line">op1&#x3D;&gt;operation: 遍历computed中的属性值列表</span><br><span class="line">op1-1&#x3D;&gt;operation: 判断是否是服务器端渲染</span><br><span class="line">cond1&#x3D;&gt;condition: Yes or no</span><br><span class="line"></span><br><span class="line">op2&#x3D;&gt;operation: defineComputed为vm上添加对key的代理, 设置get&#x2F;set</span><br><span class="line">op3&#x3D;&gt;operation: 为每一个key值初始化watcher实例,保存到vm._computedWatcher数组</span><br><span class="line">op4&#x3D;&gt;operation: 当对key读取时，会触发getter, getter会从_computedWatcher上找到对应的watcher,然后通过evaluate触发get函数, pushTarget收集对应的watcher</span><br><span class="line">op5&#x3D;&gt;operation: 触发_data中的get函数,</span><br><span class="line">op6&#x3D;&gt;operation: dep.depend -&gt; watcher.addDep(dep)</span><br><span class="line">op7&#x3D;&gt;operation: dep.addSub(watcher)</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op1-&gt;op1-1-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;op2-&gt;op4-&gt;op5-&gt;op6-&gt;op7-&gt;e</span><br><span class="line">cond1(no)-&gt;op3-&gt;op2-&gt;op4-&gt;op5-&gt;op6-&gt;op7-&gt;e</span><br></pre></td></tr></table></figure><h4 id="简述vue响应式原理"><a href="#简述vue响应式原理" class="headerlink" title="简述vue响应式原理"></a>简述vue响应式原理</h4><ol><li>深度递归遍历增加数据劫持</li><li>当对劫持数据进行访问的时会判断当前是否有watcher实例， 如果有会保存当前的watcher实例到dep中的subs(订阅者)</li><li>当对劫持数据进行设置值时会触发dep中的notify， 遍历dep中存储的sub执行sub的update方法（发布）</li><li>组件实例之后会调用render生成虚拟dom， 在render过程中对用到的数据会执行updatecomponted</li></ol><img align="center" src="../../static/vue响应式原理.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zhangliminabc.github.io/categories/vue/"/>
    
    
      <category term="框架" scheme="http://zhangliminabc.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="vue" scheme="http://zhangliminabc.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之知识图谱</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(26)-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(26)-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</id>
    <published>2021-09-01T00:57:16.000Z</published>
    <updated>2021-09-01T00:57:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="javascript-知识架构图"><a href="#javascript-知识架构图" class="headerlink" title="javascript 知识架构图"></a>javascript 知识架构图</h4><img src="../../../static/JavaScript.png"/>]]></content>
    
    <summary type="html">
    
      这是js的整体知识框架图以及深入剖析了js代码的执行顺序；在执行的过程中浅析js, js代码分为文法、语法、和执行时三种顺序, 用一定的词法和语法表达一定的语义; js的文法是用一定的表达式和操作符构成一个语句
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浏览器深入之web-worker</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-webworker/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-webworker/</id>
    <published>2021-08-31T02:50:19.000Z</published>
    <updated>2021-08-31T02:50:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面"><a href="#web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面" class="headerlink" title="web Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面"></a>web Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面</h4><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个专用worker</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initWorker</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!<span class="built_in">window</span>.Worker)  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Worker(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">const</span> myWorker = initWorker()</span><br><span class="line">first.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myWorker.postMessage([<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;seound&#x27;</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Message posted to worker&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">secound.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> myWorker.postMessage([<span class="string">&#x27;secound&#x27;</span>])</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Message posted to Worker&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker线程</span></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;message received from main script&#x27;</span>)</span><br><span class="line"> <span class="keyword">const</span> workerResult = <span class="string">&#x27;result:&#x27;</span> + e.data</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Posting message back to main script&#x27;</span>);</span><br><span class="line"> postMessage(workerResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line">myWorker.onMessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Message received from worker&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="workers和主线程之间的数据传递通过-postMessage-传递消息；-使用-onmessage-事件处理函数来响应消息-消息被包含在Message事件的data属性中-这个过程中数据并不是被共享而是被复制"><a href="#workers和主线程之间的数据传递通过-postMessage-传递消息；-使用-onmessage-事件处理函数来响应消息-消息被包含在Message事件的data属性中-这个过程中数据并不是被共享而是被复制" class="headerlink" title="workers和主线程之间的数据传递通过 postMessage 传递消息； 使用 onmessage 事件处理函数来响应消息(消息被包含在Message事件的data属性中), 这个过程中数据并不是被共享而是被复制"></a>workers和主线程之间的数据传递通过 postMessage 传递消息； 使用 onmessage 事件处理函数来响应消息(消息被包含在Message事件的data属性中), 这个过程中数据并不是被共享而是被复制</h4><h4 id="worker-Api"><a href="#worker-Api" class="headerlink" title="worker Api"></a>worker Api</h4><ul><li><p>terminate(): 从主线程中立刻终止一个运行中的worker</p></li><li><p>close(): 在workers线程中调用自己的close方法进行关闭</p></li><li><p>onError(): worker执行错误时发生</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面&quot;&gt;&lt;a href=&quot;#web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://zhangliminabc.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="浏览器" scheme="http://zhangliminabc.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之对象</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(25)-%E5%AF%B9%E8%B1%A1/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(25)-%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-08-31T02:41:56.000Z</published>
    <updated>2021-08-31T02:41:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-对象属性"><a href="#1-对象属性" class="headerlink" title="1. 对象属性"></a>1. 对象属性</h4><p><em>数据属性:</em><br>configurable: 能否通过 delete 删除属性从而重新定义属性，默认值 true<br>enumerable: 是否可以通过 forin 循环， 默认值 true<br>writable: 能否修改属性的值， 默认值 true<br>value： 获取修改属性的值。 默认值 undifined<br>Object.defineProperty( 属性所在的对象， 需要修改的属性名， 描述符对象)</p><p><em>访问器属性：</em><br>configurable: 能否通过 delete 删除属性从而重新定义属性，默认值 true<br>enumerable: 是否可以通过 forin 循环， 默认值 true<br>get: 获取属性值， 默认值 undifined<br>set：设置属性值。 默认值 undifined<br>访问器属性不能直接定义， 只能通过 Object.defineProperty 来定义<br>Object.defineProperties(target， {})</p><h4 id="hasOwnProperty-检测属性是否存在于实例中"><a href="#hasOwnProperty-检测属性是否存在于实例中" class="headerlink" title="hasOwnProperty: 检测属性是否存在于实例中"></a>hasOwnProperty: 检测属性是否存在于实例中</h4><h4 id="hasPrototypeProperty-检测对象中是否在原型中存在给定的属性"><a href="#hasPrototypeProperty-检测对象中是否在原型中存在给定的属性" class="headerlink" title="hasPrototypeProperty: 检测对象中是否在原型中存在给定的属性"></a>hasPrototypeProperty: 检测对象中是否在原型中存在给定的属性</h4><h4 id="in操作符-检测对象中是否存在给定的属性值"><a href="#in操作符-检测对象中是否存在给定的属性值" class="headerlink" title="in操作符: 检测对象中是否存在给定的属性值"></a>in操作符: 检测对象中是否存在给定的属性值</h4><h4 id="isPrototypeOf-对象之前是否存在存在某种关系"><a href="#isPrototypeOf-对象之前是否存在存在某种关系" class="headerlink" title="isPrototypeOf: 对象之前是否存在存在某种关系"></a>isPrototypeOf: 对象之前是否存在存在某种关系</h4><h4 id="getPrototypeof-获取对象的的隐式原型，即对象的proto属性"><a href="#getPrototypeof-获取对象的的隐式原型，即对象的proto属性" class="headerlink" title="getPrototypeof: 获取对象的的隐式原型，即对象的proto属性"></a>getPrototypeof: 获取对象的的隐式原型，即对象的<strong>proto</strong>属性</h4><h4 id="Object-getOwnPropertypeNames-得到所有的实例属性，无论它是否可枚举"><a href="#Object-getOwnPropertypeNames-得到所有的实例属性，无论它是否可枚举" class="headerlink" title="Object.getOwnPropertypeNames: 得到所有的实例属性，无论它是否可枚举"></a>Object.getOwnPropertypeNames: 得到所有的实例属性，无论它是否可枚举</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最新的定义访问器属性的方法</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  year: <span class="number">2004</span>,</span><br><span class="line">  editor: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">&quot;year&quot;</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._year;</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._year = newValue + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">//2006</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧版的定义访问器属性的方法</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  year: <span class="number">2004</span>,</span><br><span class="line">  editor: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">book.__defineGetter__(<span class="string">&quot;year&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.year;</span><br><span class="line">&#125;);</span><br><span class="line">book.__defineSetter__(<span class="string">&quot;year&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.year = newValue + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">//2006</span></span><br></pre></td></tr></table></figure><h4 id="2-创建对象"><a href="#2-创建对象" class="headerlink" title="2. 创建对象"></a>2. 创建对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.job = job;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;校长&quot;</span>, <span class="number">10</span>, <span class="string">&quot;softarea&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">20</span>, <span class="string">&quot;doctor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2.constructor == Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">30</span>;</span><br><span class="line">Person.prototype.job = <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;校长&quot;</span>, <span class="number">10</span>, <span class="string">&quot;softarea&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">20</span>, <span class="string">&quot;doctor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor); <span class="comment">//Person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isPrototypeOf： 验证对象之间是否存在关系</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person2)); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//hasOwnProperty: 验证对象属性是存在于实例中还是原型中</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-对象属性&quot;&gt;&lt;a href=&quot;#1-对象属性&quot; class=&quot;headerlink&quot; title=&quot;1. 对象属性&quot;&gt;&lt;/a&gt;1. 对象属性&lt;/h4&gt;&lt;p&gt;&lt;em&gt;数据属性:&lt;/em&gt;&lt;br&gt;configurable: 能否通过 delete 删除属性从而重新
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之函数</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(24)-%E5%87%BD%E6%95%B0/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(24)-%E5%87%BD%E6%95%B0/</id>
    <published>2021-08-31T02:38:41.000Z</published>
    <updated>2021-08-31T02:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>概述</p><hr style="margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;"/><p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值</p></li><li><p>声明(Function Declaration)</p><hr style="margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;"/><p>1.function 命令声明的代码区块，就是一个函数。function 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面</p></li></ul>  <a id="more"></a>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  2.函数表达式， 将匿名函数赋值给变量，这是这个匿名函数叫函数表达式</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionVar = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 带有函数名的函数表达式</span></span><br><span class="line"><span class="keyword">var</span> funtionWithName = <span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> functionName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上面代码在函数表达式中，加入了函数名functionName。这个functionName只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错（除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数）</span></span><br><span class="line"><span class="comment">  * ReferenceError: functionName is not defined</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">functionName(<span class="string">&quot;这是参数有参数的函数表达式);</span></span><br></pre></td></tr></table></figure><p>  3.Function 构造函数</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot; return x + y&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  retuen x + u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>函数的重复声明<br>如果同一个函数被多次声明， 后面的会覆盖前面的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是第一个函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是重复声明的函数， 这个函数会覆盖第一个函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 这是重复声明的函数， 这个函数会覆盖第一个函数</span></span><br><span class="line"><span class="comment"> * 原因： js中的函数本身属于一个挂载到window对象上的一个属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">firstFunc();</span><br></pre></td></tr></table></figure></li><li><p>属性和方法</p></li><li><p>递归</p></li><li><p>作用域</p><p>在 es5 中 JavaScript 只有两种作用域， 一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在</p><p>函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;这是全局作用域的变量&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 这是全局作用域的变量</span></span><br><span class="line"><span class="comment"> *  在函数体内可以访问具有全局作用域的变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">globalFun();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;这是函数体内定义的变量&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReferenceError: b is not defined</span></span><br><span class="line"><span class="comment"> * 函数内定义的变量不能再函数体之外访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果在函数体内存在跟全局变量相同的局部变量，局部变量会覆盖全部变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">f();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure><p>与全局作用域一样，函数作用域内部也会产生“变量提升”现象。var 命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// firstFun 函数的作用域是全局的</span></span><br><span class="line"><span class="keyword">var</span> firstFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">souncedFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  firstFun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * result =&gt; 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">souncedFun();</span><br></pre></td></tr></table></figure></li><li><p>参数</p></li><li><p>闭包<br>定义在函数体内的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Uncaught ReferenceError: n is not defined</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结： 函数内部可以直接读取全局变量，但是函数外部无法读取函数内部声明的变量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改造之后的函数体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(parentFun());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖: 防抖是任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行，一般用于输入框实时搜索</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流: 节流是规定函数在指定的时间间隔内只执行一次，一般用于scroll事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>立即调用函数<br>在 Javascript 中，圆括号()是一种运算符，跟在函数名之后，表示调用该函数</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;概述&lt;/p&gt;
&lt;hr style=&quot;margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;&quot;/&gt;

&lt;p&gt;函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;声明(Function Declaration)&lt;/p&gt;
&lt;hr style=&quot;margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;&quot;/&gt;

&lt;p&gt;1.function 命令声明的代码区块，就是一个函数。function 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之js内存</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(23)-%E5%86%85%E5%AD%98/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(23)-%E5%86%85%E5%AD%98/</id>
    <published>2021-08-28T09:46:22.000Z</published>
    <updated>2021-08-28T09:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>js的内存结构</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  将一个对象赋值给obj变量，js引擎会先在队内存中生成一个对象，然将堆内存的地址赋值给变量obj， 所以实际上变量obj指向的是一个堆内存地址</p>   <p style="color: red;">也就是说，变量obj是一个地址（reference）。后面如果要读取obj.a，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的a属性</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">     a: <span class="number">1</span>,</span><br><span class="line">     getValue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">f() <span class="comment">// undefined</span></span><br><span class="line">obj.f() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><img src="../../../static/js中的this.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js的内存结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之语法分析</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(22)-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(22)-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2021-08-28T08:20:11.000Z</published>
    <updated>2021-08-28T08:20:11.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="js基础语法"><a href="#js基础语法" class="headerlink" title="js基础语法"></a>js基础语法</h4><pre><code>1. 区分大小写: js 中的变量标识符区分大小写，也就意味这 test/Test 是两个不同的变量2. 标识符: js 中的标识符是指函数名、变量名、参数名等    a. 第一个字符必须是字符、下划线、美元符号    b. 其他字符可以是字母、数字、下划线、美元符号    c. 关键字不能作为标识符3. 注释: 单行注释和多行注释4.  语句: 语句以;结尾        - 虽然分号不是必须的，但是加上也会在某些情况下增加代码的性能5. 变量是松散类型，松散类型可以保存任何类型的数据</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> message; <span class="comment">// 定义变量但未初始化，默认值为undifined</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.区分大小写, a 和A 是两个不同的变量。改变其中一个值不会影响另一个变量的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> A = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a == A); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="标识符的声明方式-let-const-var"><a href="#标识符的声明方式-let-const-var" class="headerlink" title="标识符的声明方式( let/ const/ var)"></a>标识符的声明方式( let/ const/ var)</h4><p>   1, let、const、var三者之间的区别<br>           相同点： 都是定义变量的方式<br>           不同点：<br>               1. var有全局和函数作用域, let和const是块级作用域<br>               2. var可以先使用后声明， let和const不可以，let和const会生成暂时性死区，不在在初始化</p><ol><li>var对应同名标识符的处理规则？</li></ol><span style="color:red;">  对于同名的变量声明，Javascript采用的是忽略原则，后声明的会被忽略。  对于同名的函数声明，Javascript采用的是覆盖原则，先声明的会被覆盖。  对于同名的函数声明和变量声明，采用的是忽略原则，为了确保函数能够被引用到，在提升时函数声明会提升到变量声明之前，变量声明会被忽略，但是变量赋值以后会被覆盖 </span><h4 id="js变量提升"><a href="#js变量提升" class="headerlink" title="js变量提升"></a>js变量提升</h4><p>   js 中的变量可以先使用后声明，这一现叫做变量提升， 提升后的变量返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="comment">// 声明一个变量，可选初始化一个值</span></span><br><span class="line"><span class="keyword">let</span> A <span class="comment">// 声明一个块级作用， 可选初始化一个值</span></span><br><span class="line"><span class="keyword">const</span> c <span class="comment">// 声明一个块作用域的只读常量</span></span><br></pre></td></tr></table></figure><p>为什么var会发生变量的提升？<br>   js分为编译和执行，js引擎在编译阶段会收集所有的变量并绑定到当前所有在的作用域，而变量的赋值操作在执行阶段执行，所以才会出现变量的提升</p><h4 id="js-操作符"><a href="#js-操作符" class="headerlink" title="js 操作符"></a>js 操作符</h4><ul><li><p>算数操作符</p><ol><li>前置型操作符(前置型递增递减): 执行前置递增或者递减，变量的值都是在被求值以前改变的, 返回的是自增减一之后的值</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> anotherAge = ++age + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// output: 10</span></span><br><span class="line"><span class="built_in">console</span>.log(anotherAge); <span class="comment">// output: 11</span></span><br></pre></td></tr></table></figure><pre><code>1. 后置操作符(后置型递增递减): 执行递增递减操作是在包它们的语句被求值之后执行， 返回没有自增减之后的值    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age1 = <span class="number">10</span>;</span><br><span class="line">age1++; <span class="comment">// 如果没有对age求值话age1还是10</span></span><br><span class="line"><span class="built_in">console</span>.log(age1); <span class="comment">// output: 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = num1-- + num2; <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">var</span> num4 = num1 + num2; <span class="comment">// 21</span></span><br></pre></td></tr></table></figure>2. 一元负值/ 一元正值操作符: &lt;span style=&quot;color:red;&quot;&gt;以一个+ 放到数值之前，不会对数值有任何影响, 对于非数值应用一元加减操作符，该操作符会像 Number 函数一样对值转型&lt;/span&gt;       a. 对于布尔值转成 0|1     b. 对于字符串，会按照一定的规则解析     c. 对于对象，会调用 valueof/tostring 方法</code></pre><ul><li><p>逻辑操作符</p><ol><li><p><span style="color: red;">逻辑非(!): 用于任何类型的值, 在应用的时候会存在类型的转换</span></p><pre><code>对象 -&gt; false空字符串 -&gt; true非空字符串 -&gt; false数值 0 -&gt; true任意非空 0 -&gt; falsenull -&gt; trueNaN -&gt; trueundefined -&gt; true</code></pre></li><li><p><span style="color: red;">逻辑与(||): 当条件满足为真时返回第一个条件为真的值</span></p><pre><code>如果第一个操作符是对象，则直接返回第一个操作符如果第一个操作符的求值结果为 false， 则返回第二个操作符的值如果两个操作符都是对象，则返回第一个操作符如果两个操作符都是 null， 则返回 null如果连个操作符都是 NaN, 则返回 NaN如果两个操作符都是 undefined， 则返回 undefined</code></pre> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> c = &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">a || c; <span class="comment">// output: a</span></span><br><span class="line"></span><br><span class="line">b || c; <span class="comment">// output: c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> result = found || someUndefinedVar; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">found = <span class="literal">false</span>;</span><br><span class="line">result = found || someUndefinedVar; <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li><li><p><span style="color: red;">逻辑与(&amp;&amp;): 短路操作符, 当遇到为false的条件时返回false, 当第一个条件为true， 则返回第二个值</span></p><pre><code>如果第一个操作符是对象，则返回第二个操作符如果第二个操作符是对象，则只有在第一个操作符返回 true 的情况下才会返回此对象两个操作符都是对象，则返回第二个操作符如果有一个操作符是 null，则返回 null如果有一个操作符是 nan， 则返回 nan如果有一个操作符是 undefined, 则返回 undefined</code></pre> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">a &amp;&amp; b; <span class="comment">// output: b</span></span><br><span class="line"></span><br><span class="line">a &amp;&amp; <span class="literal">NaN</span>; <span class="comment">// output: NaN</span></span><br><span class="line"></span><br><span class="line">a &amp;&amp; <span class="literal">undefined</span>; <span class="comment">// output: undefined</span></span><br><span class="line"></span><br><span class="line">a &amp;&amp; <span class="literal">true</span>; <span class="comment">// output: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> founed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> result = founed &amp;&amp; someUndefinedVar; <span class="comment">// errro:  someUndefinedVar 未定义</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 这句代码不会执行</span></span><br><span class="line"></span><br><span class="line">found = <span class="literal">false</span>;</span><br><span class="line">result = founed &amp;&amp; someUndefinedVar; <span class="comment">// 不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// output: false</span></span><br></pre></td></tr></table></figure></li><li><p><span style="color: red;">乘法操作符: 如果参与运算的值不是数值型就会使用 Number()函数自动转成数值，然后参与计算</span></p><pre><code>如果有一个值是 NaN, 则返回 NaN如果是 infinity \* 0， 则返回 infinity如果是 infinity 与非 0 数值想剩，则返回 infinity 或者 -infinity如果操作值都是数值，则参与正常的计算，如果超过了 js 的最大限制则返回 infinity 或者 -infinity如果值不为 number 类型则会调用 number()函数转换为数值，在应用上面的规则</code></pre></li></ol></li><li><p>关系操作符</p><ol><li><p><span style="color: red;">instanceof:检测某个对象是不是另一个对象的实例</span></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Parent.prototype) <span class="comment">// &#123;constructor: function Parent()&#123;&#125;, __proto__: Object&#125;</span></span><br><span class="line"><span class="comment">// 理解instanceof 只需要理解下面这句话</span></span><br><span class="line">Parent.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure></li></ol></li><li><p>一元操作符</p><ol><li><p><span style="color: red;">typeof操作符: 判断一个标识符属于哪种数据类型</span></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof 操作符返回值的类型有： &quot;number&quot;、&quot;string&quot;、&quot;boolean&quot;、&quot;object&quot;、&quot;function&quot; 和 &quot;undefined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span> <span class="comment">// Number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;dede&#x27;</span> <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> !!<span class="string">&#x27;0&#x27;</span> <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Function</span>() <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> a <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="js中的数据类型"><a href="#js中的数据类型" class="headerlink" title="js中的数据类型"></a>js中的数据类型</h4><ul><li><span style="color: red;"> 基本数据类型: undefined、 null、 string、 boolean、 number</span></li><li><span style="color: red;">引用数据类型: object</span></li></ul><h4 id="js中的typeof类型检测函数"><a href="#js中的typeof类型检测函数" class="headerlink" title="js中的typeof类型检测函数"></a>js中的typeof类型检测函数</h4><ul><li>typeof(类型监测)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * undefined: 这个值未定义</span></span><br><span class="line"><span class="comment"> * boolean: 布尔类型</span></span><br><span class="line"><span class="comment"> * string: 字符串</span></span><br><span class="line"><span class="comment"> * number: 数字</span></span><br><span class="line"><span class="comment"> * object: objetc 或者 null</span></span><br><span class="line"><span class="comment"> * function: 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;这是测试&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;string&quot;</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;boolean&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;number&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;object&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;function&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;undefined&quot;</span>; <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="1-Undefined类型：-Undefined类型只有一即undefined，-在声明变量但未赋值的情况下，变量的值为undefined"><a href="#1-Undefined类型：-Undefined类型只有一即undefined，-在声明变量但未赋值的情况下，变量的值为undefined" class="headerlink" title="1, Undefined类型： Undefined类型只有一即undefined， 在声明变量但未赋值的情况下，变量的值为undefined"></a>1, Undefined类型： Undefined类型只有一即undefined， 在声明变量但未赋值的情况下，变量的值为undefined</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用场景：</span></span><br><span class="line"><span class="comment"> * 1. 变量声明但没赋值</span></span><br><span class="line"><span class="comment"> * 2. 调用函数时该传入的参数没传</span></span><br><span class="line"><span class="comment"> * 3. 函数没有返回值时默认返回undefined</span></span><br><span class="line"><span class="comment"> * 4. 对象中属性值没有赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="2-Null类型-null是JavaScript中的关键字；-Null类型只有一个即null，-null表示空对象指针-变量的值将来是用来保存对象最好设置为null"><a href="#2-Null类型-null是JavaScript中的关键字；-Null类型只有一个即null，-null表示空对象指针-变量的值将来是用来保存对象最好设置为null" class="headerlink" title="2, Null类型: null是JavaScript中的关键字； Null类型只有一个即null， null表示空对象指针, 变量的值将来是用来保存对象最好设置为null"></a>2, Null类型: null是JavaScript中的关键字； Null类型只有一个即null， null表示空对象指针, 变量的值将来是用来保存对象最好设置为null</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 使用场景：</span></span><br><span class="line"><span class="comment"> *  1. 定义的变量在将来用来保存对象</span></span><br><span class="line"><span class="comment"> *  2. 在一个数据不再使用的时候，我们最好将其值设置为null来释放其引用，以便垃圾回收下一次对其回收</span></span><br><span class="line"><span class="comment"> *  3. 作为对象原型链的终端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="3-Boolean-布尔类型，该类型只有两个值true-和-false，要将一个值转换为boolean类型的值需要用到Boolean转换"><a href="#3-Boolean-布尔类型，该类型只有两个值true-和-false，要将一个值转换为boolean类型的值需要用到Boolean转换" class="headerlink" title="3,Boolean: 布尔类型，该类型只有两个值true 和 false，要将一个值转换为boolean类型的值需要用到Boolean转换"></a>3,Boolean: 布尔类型，该类型只有两个值true 和 false，要将一个值转换为boolean类型的值需要用到Boolean转换</h4><table><thead><tr><th>数据类型</th><th>转换为true的值</th><th>转换为false的值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任何非空字符串</td><td>“”(空字符串)</td></tr><tr><td>Number</td><td>任何非零数字值(包括无穷大)</td><td>0和NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>false</td><td>Undefined</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 转换规则：</span></span><br><span class="line"><span class="comment"> * 1. 字符串： 任意非空类型的字符串-&gt;true, 空类型的字符串-&gt;false</span></span><br><span class="line"><span class="comment"> * 2. number: 任何非0数字,包括正(负)的无穷大-&gt; true,</span></span><br><span class="line"><span class="comment"> * 3. object: 任何对象-&gt;true</span></span><br><span class="line"><span class="comment"> * 4. undefined: undefined -&gt;false</span></span><br><span class="line"><span class="comment"> * 5, null: null -&gt; false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(-<span class="number">0.4774</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="4-number-数字类型，-对应数学中的有理数，在计算机中有-定的精度限制，-NaN-infinity-infinity"><a href="#4-number-数字类型，-对应数学中的有理数，在计算机中有-定的精度限制，-NaN-infinity-infinity" class="headerlink" title="4, number: 数字类型， 对应数学中的有理数，在计算机中有-定的精度限制， NaN/ infinity/ -infinity"></a>4, number: 数字类型， 对应数学中的有理数，在计算机中有-定的精度限制， NaN/ infinity/ -infinity</h4><ul><li>NaN: 非数值，即本来应该要返回数值操作但是未返回数值的情况， 任何涉及NaN的操作都会返回NaN,其次NaN与任何值都不相等包括NaN本身<br>  <span style="color:red;"> isNaN函数用来判断一个是否是NaN,j接受任意类型的值，该函数会尝将值转换为数字型，任何不能被转换的值该函数都会返回true</span></li></ul><table><thead><tr><th>数据类型</th><th>Number</th><th>parseInt</th><th>parseFloat</th></tr></thead><tbody><tr><td>Number</td><td>简单的传入和返回</td><td>简单的传入和返回</td><td>简单的传入和返回</td></tr><tr><td>String</td><td>字符串为空 -&gt; 0; 字符串包含十六进制 -&gt; 转换为十六进制的值; 字符串包含数字 -&gt; 十进制的数</td><td>忽略字符串前面的空格，找到第一个非空字符，如果找不到数字字符返回NaN; 如果找到字符是数字就会继续解析第二个字符，直到字符不是数字为止</td><td>忽略字符前面的空格, 从第一个字符开始解析; 解析遇到第一个无效的浮点数字字符或者 字符串最后为止</td></tr><tr><td>Boolean</td><td>true -&gt; 1; false -&gt; 0</td><td>NaN</td><td>NaN</td></tr><tr><td>Null</td><td>0</td><td>NaN</td><td>NaN</td></tr><tr><td>Undefined</td><td>0</td><td>NaN</td><td>NaN</td></tr><tr><td>Object</td><td>调用对象的valueOf方法按照上述规则转换，如果转结果为NaN则会调用对象的toString方法，然后按照上面的规则再次转换</td><td>NaN</td><td>NaN</td></tr><tr><td>Symbol</td><td>/</td><td>/</td><td>/</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 转换规则</span></span><br><span class="line"><span class="comment"> * 1. boolean: true -&gt; 1, false -&gt; 0</span></span><br><span class="line"><span class="comment"> * 2. number: 简单的传入和返回</span></span><br><span class="line"><span class="comment"> * 3. null: null -&gt; 0</span></span><br><span class="line"><span class="comment"> * 4. undefined: undefined -&gt; 0</span></span><br><span class="line"><span class="comment"> * 5. 字符串: 字符串为空 -&gt; 0; 字符串包含十六进制 -&gt; 转换为十六进制的值; 字符串包含数字 -&gt; 十进制的数值</span></span><br><span class="line"><span class="comment"> * 6. object: 对象 -&gt; valueOf方法按照上述规则转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;hello wrod&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot; &quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;000011&quot;</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  parseInt: 忽略字符串前面的空格，找到第一个非空字符串，如果第一个字符不是数* 字或者负号返回NaN; 如果第一个字符是数字就会继续解析第二个字符，直到字符不是* 数字为止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1266rhfur&quot;</span>); <span class="comment">// 1266</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;rufgrfr&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseFloat: 从第一个字符开始解析; 解析遇到第一个无效的浮点数字字符或者* 字符串最后为止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;23.38434.8484&quot;</span>); <span class="comment">// 23.38434</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;frfr&quot;</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>Question:</p><ul><li><p>为什么 0.2 + 0.1 == 0.3 为false</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0.05</span> + <span class="number">0.25</span> == <span class="number">0.3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>answer:机器只识别二进制，将小数转为二进制数之后可能有精度丢失的问题[参考资料](https://zhuanlan.zhihu.com/p/159075016)</code></pre></li></ul><h4 id="5-string-字符串一旦创就不可变，如果需要改变其值需要销毁原有的值-然后在用一个包含新值得字符串去填充该变量"><a href="#5-string-字符串一旦创就不可变，如果需要改变其值需要销毁原有的值-然后在用一个包含新值得字符串去填充该变量" class="headerlink" title="5, string: 字符串一旦创就不可变，如果需要改变其值需要销毁原有的值, 然后在用一个包含新值得字符串去填充该变量"></a>5, string: 字符串一旦创就不可变，如果需要改变其值需要销毁原有的值, 然后在用一个包含新值得字符串去填充该变量</h4><table><thead><tr><th>数据类型</th><th>toString</th></tr></thead><tbody><tr><td>null</td><td>error</td></tr><tr><td>Undefined</td><td>error</td></tr><tr><td>Number</td><td>返回相应值的字符串形式</td></tr><tr><td>Boolean</td><td>返回相应值得字符串形式</td></tr><tr><td>String</td><td>返回相应值得字符串形式</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 将一个值转为字符串</span></span><br><span class="line"><span class="comment"> *  toString方法</span></span><br><span class="line"><span class="comment"> *  number、boolean、Object、 string都有toString方式, 多数情况下调用toString方法不用传* 参数， 但是对于number类型可以传一个参数代表返回的进制, 一般情况下是以十进制返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="number">11</span>;</span><br><span class="line">message.toString(); <span class="comment">// &#x27;11&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num.toString(<span class="number">16</span>); <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在不知道转换的值的类型时可以使用String方法转成string类型，然后调用tostring方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">String</span>(a).toString(); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="6-Object-一组数据和功能的集合-object-是所有它的实例基础"><a href="#6-Object-一组数据和功能的集合-object-是所有它的实例基础" class="headerlink" title="6, Object: 一组数据和功能的集合, object 是所有它的实例基础"></a>6, Object: 一组数据和功能的集合, object 是所有它的实例基础</h4><ul><li>每一个对象都有几个属性:<ol><li>constructor: 保存用于创建当前对象的函数</li><li>hasOwnProperty(propertyName) : 检查给定的属性是否存在当前实例上而不是原型上</li><li>valueOf: 返回字符串，通常与toString方法返回值相同</li><li>tostring: 返回对象的字符串标识</li></ol></li></ul><h4 id="7-Symbol-symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型"><a href="#7-Symbol-symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型" class="headerlink" title="7, Symbol: symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型"></a>7, Symbol: symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型</h4><ul><li>解决问题： 对象中的属性名都是字符串容易造成冲突</li></ul><p>总结：<br>1, undefined和null的区别<br>    a， undefined表示变量未声明或者声明未赋值； null表示什么都没有<br>    b， js会将未赋值的变量默认值设为undefined； js不会将变量设置为null<br>    c， undefined使用typeof返回值是undefined; null类型返回object</p><p>2, instanceof 和 typeof 的区别？<br>    <span style="color: red;">typeof 用于判断标识符的类型， 但是不能判断对象的类型， 比如data， 数组,对于typeof来讲都是返回object， instanceof用于判断对象是否属于某一个对象的实例， 原型上的相等</span></p><h4 id="javascript-语句"><a href="#javascript-语句" class="headerlink" title="javascript 语句"></a>javascript 语句</h4><ol><li><p>if语句</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * if (condition) statement1 esle statement2</span></span><br><span class="line"><span class="comment"> *  condition: 可以为任意的表达式，而且对这个值的求职结果不一定是布尔值。js自动会对condition的值调用boolean方法去转* 为布尔值</span></span><br><span class="line"><span class="comment"> * 如果condition为true就在执行statement1, 否则就执行statement2语句。这个两个语句可以是一句代码，也可以是个代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">25</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;fyrgfyr&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do-while 语句: 是一种后测试语句(只有在循环体的中的代码执行完之后才会测试出口条件, 循环体至少执行一次)</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * do&#123;statement&#125; whild(expressiong)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &gt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p>while 语句: 前测试循环语句(循环体可一次都不执行)</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  while(expression) statement</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">while</span>(<span class="params"> i&lt; = <span class="number">10</span> </span>)</span> &#123;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for 语句: 前测试循环语句（有执行循环之前初始化变量和定义循环后要执行的代码的能力）</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for(initalnition; expressiong; loop-expressiong) statement</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= count; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>forin 语句: 是一种精准的迭代语句，用来枚举对象的属性</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for(property in expression) statement</span></span><br><span class="line"><span class="keyword">for</span> (pro <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pro);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>break 和 continue 语句: 用于在循环中精确的控制代码的执行</p></li></ol><ul><li><p>break: 会立即退出循环, 强制执行循环语句后面的语句</p></li><li><p>countinue: 会立即退出循环, 但是退出循环之后会从循环的顶部立即执行</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li>switch 语句: 在比较时是采用全等操作符，因此不会发生类型装换</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;js基础语法&quot;&gt;&lt;a href=&quot;#js基础语法&quot; class=&quot;headerlink&quot; title=&quot;js基础语法&quot;&gt;&lt;/a&gt;js基础语法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1. 区分大小写: js 中的变量标识符区分大小写，也就意味这 test/Test 是两个不
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之词法分析</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(21)-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(21)-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2021-08-28T08:18:02.000Z</published>
    <updated>2021-08-28T08:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h4><h5 id="之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）"><a href="#之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）" class="headerlink" title="之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）"></a>之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）</h5><h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><pre><code>- 全局词法环境- 函数词法环境- with词法环境- catch词法环境</code></pre><img src="https://user-gold-cdn.xitu.io/2018/12/3/1677429807aea76d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"/><p> 伪代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LexicalEnvironment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.EnvironmentRecord =  <span class="keyword">new</span> EnvironmentRecord()<span class="comment">// 自己的词法环境</span></span><br><span class="line">    <span class="built_in">this</span>.outer = <span class="literal">undefined</span> <span class="comment">// 外部的词法环境的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EnvironmentRecord</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnvironmentRecord.prototype.rigister = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings.set(name, <span class="literal">undefined</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnvironmentRecord.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings[name] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnvironmentRecord.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.bindings[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;词法环境&quot;&gt;&lt;a href=&quot;#词法环境&quot; class=&quot;headerlink&quot; title=&quot;词法环境&quot;&gt;&lt;/a&gt;词法环境&lt;/h4&gt;&lt;h5 id=&quot;之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js引擎</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(20)-js%E5%BC%95%E6%93%8E/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(20)-js%E5%BC%95%E6%93%8E/</id>
    <published>2021-08-28T00:30:37.000Z</published>
    <updated>2021-08-28T00:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js引擎的执行流程"><a href="#js引擎的执行流程" class="headerlink" title="js引擎的执行流程"></a>js引擎的执行流程</h3><img src="../../../static/js引擎流程.png"><p><a href="https://zhuanlan.zhihu.com/p/96969423">参考资料</a><br><a href="https://juejin.im/post/6844903788629721096">js引擎</a></p><ul><li><p>js的词法分析</p><p> JS文件只是一个源码，机器是无法执行的，词法分析就是把源码的字符串分割出来，生成一系列的token</p> <img src="../../../static/js的词法分析.jpg" /></li><li><p>词法分析完后，接下来的阶段就是进行语法分析。语法分析语法分析的输入就是词法分析的输出，输出是AST抽象语法树。当程序出现语法错误的时候，V8在语法分析阶段抛出异常</p>  <img src="../../../static/js语法分析.jpg"></li></ul><p>v8引擎解阶段分为预解析和代码执行两阶段， 在预解阶段会有变量预解析和函数预解析</p><ul><li><p>js的字节码生阶段， 根据抽象语法树生成字节码</p> <img src="../../../static/js的字节码生成.jpg"></li><li><p>字节码的阶段</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;js引擎的执行流程&quot;&gt;&lt;a href=&quot;#js引擎的执行流程&quot; class=&quot;headerlink&quot; title=&quot;js引擎的执行流程&quot;&gt;&lt;/a&gt;js引擎的执行流程&lt;/h3&gt;&lt;img src=&quot;../../../static/js引擎流程.png&quot;&gt;

&lt;p&gt;&lt;a
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
