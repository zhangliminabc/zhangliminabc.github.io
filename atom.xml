<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浅笑整个夏季</title>
  
  <subtitle>做一个快乐的程序媛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangliminabc.github.io/"/>
  <updated>2022-06-07T05:44:58.000Z</updated>
  <id>http://zhangliminabc.github.io/</id>
  
  <author>
    <name>浅笑整个夏季</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Http之缓存</title>
    <link href="http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/http/2022-06-07-http%E4%B9%8B%E7%BC%93%E5%AD%98/"/>
    <id>http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/http/2022-06-07-http%E4%B9%8B%E7%BC%93%E5%AD%98/</id>
    <published>2022-06-07T05:44:58.000Z</published>
    <updated>2022-06-07T05:44:58.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="什么是缓存？"><a href="#什么是缓存？" class="headerlink" title="什么是缓存？"></a>什么是缓存？</h5><p>缓存是一种保存资源副本并在下一次请求时直接使用该副本的技术</p><h6 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h6><p>cache-control: </p><ol><li><p>no-store: 不缓存， 每次请求都重新加载</p></li><li><p>no-cache： 缓存但是重新校验， 请求发出后会将此请求发到服务器，服务端验证缓存是否过期，如未过期就会使用本地缓存副本（304）-&gt; 服务端验证是否过期走的是协商缓存的验证</p></li><li><p>public： 该响应被任何的中间件（cdn、代理）缓存</p></li><li><p>private: 只能针对个人用户</p></li><li><p>max-age=<seconds>: 缓存时间</p></li><li><p>s-maxage: 和 max-age一样，只不过是针对代理服务器而言</p></li><li><p>max-stale: 愿意接收过期资源， 响应不能已经过时超过该给定的时间</p></li><li><p>min-fresh: 希望获取一个在指定秒数内罪行状态的响应</p></li><li><p>must-revalidate: 资源过期，缓存不能用</p></li></ol><p>Expires：<http-date> 服务器返回的过期时间<br>工作原理： 下一次请求时，请求时间小于服务端返回的到期时间直接使用缓存数据</p><p>cache-control 和 Expires 的区别是啥？<br>Expires是http1.0的产物； cache-control是http1.1的产物</p><h6 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h6><p>last-Modified / If-Modified-Since</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 客户端发起请求</span><br><span class="line">browserCache&#x3D;&gt;condition: 判断是否有缓存</span><br><span class="line">isCache&#x3D;&gt;inputoutput: 读取缓存数据</span><br><span class="line"></span><br><span class="line">noCache&#x3D;&gt;inputoutput: 没有缓存数据</span><br><span class="line">fetchHttp&#x3D;&gt;operation: 发起http请求， 响应头决定缓存机制，下发 last-modified</span><br><span class="line">responseData&#x3D;&gt;operation: 浏览器缓存last-modified的值</span><br><span class="line">useLastModified&#x3D;&gt;operation: 下一次请求头上会带上 If-Modified-Since,值为上一次last-modified的值</span><br><span class="line">isNotExpires&#x3D;&gt;condition: 服务器会根据 If-Modified-Since 判断是否被修改过</span><br><span class="line">notModified&#x3D;&gt;operation: 没有被修改过，返回304， 浏览器不下载响应头</span><br><span class="line">isModified&#x3D;&gt;operation: 修改过，浏览器重新缓存</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;browserCache</span><br><span class="line">browserCache(yes)-&gt;isCache-&gt;e</span><br><span class="line">browserCache(no)-&gt;noCache-&gt;fetchHttp-&gt;responseData-&gt;useLastModified-&gt;isNotExpires</span><br><span class="line">isNotExpires(yes)-&gt;isModified-&gt;e</span><br><span class="line">isNotExpires(no)-&gt;notModified-&gt;e</span><br></pre></td></tr></table></figure><p>ETag 和 If-None-Match</p><p>和last-modified类似， 不同点在于服务器返回的是一个tag标识符， 在一次请求的时候会带上 If-None-Match 的请求头</p><img src="../../../static/http/http缓存.webp"><p>两者区别：</p><p>ETag 优先级高于 last-modified</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;什么是缓存？&quot;&gt;&lt;a href=&quot;#什么是缓存？&quot; class=&quot;headerlink&quot; title=&quot;什么是缓存？&quot;&gt;&lt;/a&gt;什么是缓存？&lt;/h5&gt;&lt;p&gt;缓存是一种保存资源副本并在下一次请求时直接使用该副本的技术&lt;/p&gt;
&lt;h6 id=&quot;强缓存&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="http" scheme="http://zhangliminabc.github.io/categories/http/"/>
    
    
      <category term="http" scheme="http://zhangliminabc.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>css深入之实现一个垂直水平居中</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(12)-%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(12)-%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</id>
    <published>2022-06-01T14:35:20.000Z</published>
    <updated>2022-06-01T14:35:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><h5 id="行内元素水平居中"><a href="#行内元素水平居中" class="headerlink" title="行内元素水平居中"></a>行内元素水平居中</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">text-align</span>: center // 文本text、图像img、按钮、链接</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="块级元素水平居中"><a href="#块级元素水平居中" class="headerlink" title="块级元素水平居中"></a>块级元素水平居中</h5><h6 id="定宽块级元素："><a href="#定宽块级元素：" class="headerlink" title="定宽块级元素："></a>定宽块级元素：</h6><h6 id="方案一：margin：-0-auto"><a href="#方案一：margin：-0-auto" class="headerlink" title="方案一：margin： 0 auto"></a>方案一：margin： 0 auto</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方案二：-position-margin-负一半"><a href="#方案二：-position-margin-负一半" class="headerlink" title="方案二： position + margin 负一半"></a>方案二： position + margin 负一半</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">50px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方案三：-position-margin-auto"><a href="#方案三：-position-margin-auto" class="headerlink" title="方案三： position + margin auto"></a>方案三： position + margin auto</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="不定宽块级元素："><a href="#不定宽块级元素：" class="headerlink" title="不定宽块级元素："></a>不定宽块级元素：</h6><h6 id="方案一：-flex"><a href="#方案一：-flex" class="headerlink" title="方案一： flex"></a>方案一： flex</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: flex;</span><br><span class="line"> <span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方案二：-inline-block-子元素设置-inline-block，-父元素设置text-align：-center"><a href="#方案二：-inline-block-子元素设置-inline-block，-父元素设置text-align：-center" class="headerlink" title="方案二： inline-block: 子元素设置 inline-block， 父元素设置text-align： center"></a>方案二： inline-block: 子元素设置 inline-block， 父元素设置text-align： center</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方案三-设置table：-设置display：-table，然后设置margin：-0-auto"><a href="#方案三-设置table：-设置display：-table，然后设置margin：-0-auto" class="headerlink" title="方案三: 设置table： 设置display： table，然后设置margin： 0 auto"></a>方案三: 设置table： 设置display： table，然后设置margin： 0 auto</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: table;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方案四：-position-transform"><a href="#方案四：-position-transform" class="headerlink" title="方案四： position + transform"></a>方案四： position + transform</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><h6 id="单行文本-paddingTop-paddingBottom-或者-lineHeight-height"><a href="#单行文本-paddingTop-paddingBottom-或者-lineHeight-height" class="headerlink" title="单行文本: paddingTop = paddingBottom 或者 lineHeight = height"></a>单行文本: paddingTop = paddingBottom 或者 lineHeight = height</h6><h6 id="多行文本："><a href="#多行文本：" class="headerlink" title="多行文本："></a>多行文本：</h6><h6 id="定宽高块级元素垂直居中："><a href="#定宽高块级元素垂直居中：" class="headerlink" title="定宽高块级元素垂直居中："></a>定宽高块级元素垂直居中：</h6><h6 id="方案一：-position-margin-负一半"><a href="#方案一：-position-margin-负一半" class="headerlink" title="方案一： position + margin 负一半"></a>方案一： position + margin 负一半</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方案二：-position-margin-auto"><a href="#方案二：-position-margin-auto" class="headerlink" title="方案二： position + margin auto"></a>方案二： position + margin auto</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="不定宽高块级元素"><a href="#不定宽高块级元素" class="headerlink" title="不定宽高块级元素"></a>不定宽高块级元素</h6><h6 id="方案一：-父元素display：table，-子元素：table-cell-和-vertical-align：middle"><a href="#方案一：-父元素display：table，-子元素：table-cell-和-vertical-align：middle" class="headerlink" title="方案一： 父元素display：table， 子元素：table-cell 和 vertical-align：middle"></a>方案一： 父元素display：table， 子元素：table-cell 和 vertical-align：middle</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.boxParent</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: table-cell;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方案二：-flex"><a href="#方案二：-flex" class="headerlink" title="方案二： flex"></a>方案二： flex</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h3><h6 id="不定宽高"><a href="#不定宽高" class="headerlink" title="不定宽高"></a>不定宽高</h6><h6 id="方案一：-flex-1"><a href="#方案一：-flex-1" class="headerlink" title="方案一： flex"></a>方案一： flex</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex; </span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="方案二：-table-textAlign-verticalAlign"><a href="#方案二：-table-textAlign-verticalAlign" class="headerlink" title="方案二： table + textAlign + verticalAlign"></a>方案二： table + textAlign + verticalAlign</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.boxParent</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: table-cell;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="已知宽高："><a href="#已知宽高：" class="headerlink" title="已知宽高："></a>已知宽高：</h4><h6 id="方案一：-绝对定位-margin-auto"><a href="#方案一：-绝对定位-margin-auto" class="headerlink" title="方案一： 绝对定位 + margin: auto"></a>方案一： 绝对定位 + margin: auto</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>:green;</span><br><span class="line"></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="方案二：-绝对定位-负-margin"><a href="#方案二：-绝对定位-负-margin" class="headerlink" title="方案二： 绝对定位 + 负 margin"></a>方案二： 绝对定位 + 负 margin</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方案三：-absolute-transform"><a href="#方案三：-absolute-transform" class="headerlink" title="方案三： absolute + transform"></a>方案三： absolute + transform</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方案四：-利用css的calc方法"><a href="#方案四：-利用css的calc方法" class="headerlink" title="方案四： 利用css的calc方法"></a>方案四： 利用css的calc方法</h6><p>```css<br>.box {<br>      width: 500px;<br>    height: 400px;<br>    margin-left: calc((100% - 500px) / 2);<br>    margin-top: calc((100% - 400px) / 2);<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h4&gt;&lt;h5 id=&quot;行内元素水平居中&quot;&gt;&lt;a href=&quot;#行内元素水平居中&quot; class=&quot;headerlink&quot; title=&quot;行
      
    
    </summary>
    
    
      <category term="Css" scheme="http://zhangliminabc.github.io/categories/css/"/>
    
    
      <category term="Css" scheme="http://zhangliminabc.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(27)-Bom%E4%BA%8B%E4%BB%B6/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(27)-Bom%E4%BA%8B%E4%BB%B6/</id>
    <published>2022-06-01T13:48:55.000Z</published>
    <updated>2022-06-01T13:48:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>当一个事件发生在一个元素上，它会首先运行在该元素上的处理程序，然后运行其父元素上的处理程序，然后一直向上到其他祖先上的处理程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;form&#x27;)&quot;</span>&gt;</span>FORM</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;div&#x27;)&quot;</span>&gt;</span>DIV</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;p&#x27;)&quot;</span>&gt;</span>P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们点击 p 标签上的 onclick 事件时会首选运行 p 标签上的 click事件，然后是外部的<br>p -&gt; div -&gt; form</p><h4 id="那怎么阻止事件冒泡那？"><a href="#那怎么阻止事件冒泡那？" class="headerlink" title="那怎么阻止事件冒泡那？"></a>那怎么阻止事件冒泡那？</h4><p>event.stopPropagation(): 阻止事件冒泡，这是方法是停止事件向上传播点击了 p 标签之前，p标签以外的点击事件不会被执行</p><p>event.stopImmediatePropagation(): 可以用于停止事件冒泡，并阻止当前元素上的处理程序</p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>BOM 事件经过 事件捕获 -&gt; 目标阶段 -&gt; 冒泡阶段</p><h3 id="事件委托-事件代理"><a href="#事件委托-事件代理" class="headerlink" title="事件委托 / 事件代理"></a>事件委托 / 事件代理</h3><p>利用事件冒泡原理，根据 target 判断是否是目标节点</p><p> 优点：<br>      1. 减少内存消耗和动态绑定事件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事件冒泡&quot;&gt;&lt;a href=&quot;#事件冒泡&quot; class=&quot;headerlink&quot; title=&quot;事件冒泡&quot;&gt;&lt;/a&gt;事件冒泡&lt;/h3&gt;&lt;p&gt;当一个事件发生在一个元素上，它会首先运行在该元素上的处理程序，然后运行其父元素上的处理程序，然后一直向上到其他祖先上的处理程
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>常见tsconfig配置</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8Btsconfig/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8Btsconfig/</id>
    <published>2022-05-30T03:22:32.000Z</published>
    <updated>2022-05-30T03:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions:"></a>compilerOptions:</h3><ul><li>@types, typeRoots, types</li></ul><p>types: string[] : 被列出来的包才会被包含进来<br>typeRoots: string[]: typeRoots 被列出来的包才会包含进来</p><ul><li><p>target<br>target： string: 指定ECMAScript 目标版本</p></li><li><p>experimentalDecorators: boolean<br>是否开启装饰器</p></li></ul><p>(tsconfig-compilerOption-参考文档)[<a href="https://www.tslang.cn/docs/handbook/compiler-options.htm]">https://www.tslang.cn/docs/handbook/compiler-options.htm]</a></p><h3 id="files-string-指定一个包含相对或绝对文件路径的列表"><a href="#files-string-指定一个包含相对或绝对文件路径的列表" class="headerlink" title="files: string[]:  指定一个包含相对或绝对文件路径的列表"></a>files: string[]:  指定一个包含相对或绝对文件路径的列表</h3><h3 id="include-string-包含文件"><a href="#include-string-包含文件" class="headerlink" title="include: string[]: 包含文件"></a>include: string[]: 包含文件</h3><h3 id="exclude-string-排除文件"><a href="#exclude-string-排除文件" class="headerlink" title="exclude: string[]: 排除文件"></a>exclude: string[]: 排除文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;compilerOptions&quot;&gt;&lt;a href=&quot;#compilerOptions&quot; class=&quot;headerlink&quot; title=&quot;compilerOptions:&quot;&gt;&lt;/a&gt;compilerOptions:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;@types, ty
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>高级类型</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-05-30T02:59:16.000Z</published>
    <updated>2022-05-30T02:59:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="交叉类型-T-amp-U：-将多个类型合并为一个类型"><a href="#交叉类型-T-amp-U：-将多个类型合并为一个类型" class="headerlink" title="交叉类型 T &amp; U： 将多个类型合并为一个类型"></a>交叉类型 T &amp; U： 将多个类型合并为一个类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Extends</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; (<span class="params">first: T, second: U</span>): <span class="title">T</span> &amp; <span class="title">U</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="xml"><span class="tag">&lt;<span class="name">T</span> &amp; <span class="attr">U</span>&gt;</span>&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">for(let key in first) &#123;</span></span><br><span class="line">(&lt;any&gt;result)[key] = first[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(let key in second) &#123;</span><br><span class="line">(&lt;any&gt;result)[key] = second[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return result</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="联合类型-T-U-值可以是几种类型之一-竖线（-）分隔每个类型"><a href="#联合类型-T-U-值可以是几种类型之一-竖线（-）分隔每个类型" class="headerlink" title="联合类型 T | U : 值可以是几种类型之一, 竖线（ |）分隔每个类型"></a>联合类型 T | U : 值可以是几种类型之一, 竖线（ |）分隔每个类型</h3><h3 id="类型保护：-parameterName-is-Type"><a href="#类型保护：-parameterName-is-Type" class="headerlink" title="类型保护： parameterName is Type"></a>类型保护： parameterName is Type</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;交叉类型-T-amp-U：-将多个类型合并为一个类型&quot;&gt;&lt;a href=&quot;#交叉类型-T-amp-U：-将多个类型合并为一个类型&quot; class=&quot;headerlink&quot; title=&quot;交叉类型 T &amp;amp; U： 将多个类型合并为一个类型&quot;&gt;&lt;/a&gt;交叉类型 T
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-30-ts%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-05-30T02:30:13.000Z</published>
    <updated>2022-05-30T02:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><ul><li><p>布尔值（boolean）</p></li><li><p>数字 （ number)</p></li><li><p>字符串 （ string)</p></li><li><p>数组 array</p></li><li><p>元组（Tuple） ： 已知元素数量和类型的数组</p></li><li><p>枚举 （ enum ）</p></li><li><p>any: 不清楚变量的类型</p></li><li><p>void： 没有任何类型， 函数返回值</p></li><li><p>null | undefined： </p></li><li><p>never：永不存在的值的类型</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础类型&quot;&gt;&lt;a href=&quot;#基础类型&quot; class=&quot;headerlink&quot; title=&quot;基础类型&quot;&gt;&lt;/a&gt;基础类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;布尔值（boolean）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数字 （ number)&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-29-ts%E4%B9%8Bmixin/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-29-ts%E4%B9%8Bmixin/</id>
    <published>2022-05-29T09:34:33.000Z</published>
    <updated>2022-05-29T09:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mixin（混入）"><a href="#mixin（混入）" class="headerlink" title="mixin（混入）"></a>mixin（混入）</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMixins</span>(<span class="params">derivedCtor: <span class="built_in">any</span>, baseCtors: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">  baseCtors.forEach(<span class="function">(<span class="params">baseCtor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disposable</span> </span>&#123;</span><br><span class="line">isDisposed: <span class="built_in">boolean</span></span><br><span class="line"><span class="function"><span class="title">dispose</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.isDisposed = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Activetable</span> </span>&#123;</span><br><span class="line">isActive: <span class="built_in">boolean</span></span><br><span class="line">active () &#123;</span><br><span class="line"><span class="built_in">this</span>.isActive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">deactivate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.isActive = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartObject</span> <span class="title">implement</span> <span class="title">Disposable</span>, <span class="title">Activetable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">interact</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.activate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disposable</span></span><br><span class="line">  isDisposed: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  dispose: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="comment">// Activatable</span></span><br><span class="line">  isActive: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  activate: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  deactivate: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyMixins(SmartObject, [Disposable, Activatable]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> smartObj = <span class="keyword">new</span> SmartObject();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> smartObj.interact(), <span class="number">1000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Disposable Mixin</span></span><br><span class="line"><span class="keyword">var</span> Disposable = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Disposable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Disposable.prototype.dispose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.isDisposed = <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Disposable;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Activatable Mixin</span></span><br><span class="line"><span class="keyword">var</span> Activatable = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Activatable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Activatable.prototype.activate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.isActive = <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Activatable.prototype.deactivate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.isActive = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Activatable;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SmartObject = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SmartObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">// Disposable</span></span><br><span class="line">        <span class="built_in">this</span>.isDisposed = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// Activatable</span></span><br><span class="line">        <span class="built_in">this</span>.isActive = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(_this.isActive + <span class="string">&#x27; : &#x27;</span> + _this.isDisposed); &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SmartObject.prototype.interact = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.activate();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> SmartObject;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">applyMixins(SmartObject, [Disposable, Activatable]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> smartObj = <span class="keyword">new</span> SmartObject();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> smartObj.interact(); &#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// In your runtime library somewhere</span></span><br><span class="line"><span class="comment">////////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMixins</span>(<span class="params">derivedCtor, baseCtors</span>) </span>&#123;</span><br><span class="line">    baseCtors.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">baseCtor</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mixin 的本质是将 混入元素的 prototype 拷贝到目标元素上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mixin（混入）&quot;&gt;&lt;a href=&quot;#mixin（混入）&quot; class=&quot;headerlink&quot; title=&quot;mixin（混入）&quot;&gt;&lt;/a&gt;mixin（混入）&lt;/h3&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://zhangliminabc.github.io/TypeScript/2022-05-27-ts%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://zhangliminabc.github.io/TypeScript/2022-05-27-ts%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2022-05-27T09:16:24.000Z</published>
    <updated>2022-05-27T09:16:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h3><p>装饰器是一种特殊的声明， 可以附加到 类声明、方法、访问器、属性 或者参数上。</p><p>@expression</p><h3 id="多个装饰器的运行方式？"><a href="#多个装饰器的运行方式？" class="headerlink" title="多个装饰器的运行方式？"></a>多个装饰器的运行方式？</h3><p>每个装饰器的表达式都是从上到下计算的<br>然后将结果作为函数从下到上调用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@f</span></span><br><span class="line"><span class="meta">@g</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>上面的例子 = f( g(x) )</p><h3 id="如何启用装饰器？"><a href="#如何启用装饰器？" class="headerlink" title="如何启用装饰器？"></a>如何启用装饰器？</h3><p>要启用对装饰器的支持，需要在tsconfig.json中配置experimentalDecorators</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>,</span><br><span class="line"><span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何定义一个装饰器"><a href="#如何定义一个装饰器" class="headerlink" title="如何定义一个装饰器"></a>如何定义一个装饰器</h3><p>装饰器工厂函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;first(): factory evaluated&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKeys: <span class="built_in">string</span>, description: PropertyDescription</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;first(): called&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;second(): factory evaluated&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, propertyKeys: <span class="built_in">string</span>, description: PropertyDescription</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;second(): called&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * first(): factory evaluated </span></span><br><span class="line"><span class="comment"> * second(): factory evaluated</span></span><br><span class="line"><span class="comment"> * second(): called</span></span><br><span class="line"><span class="comment"> * first(): called</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@first</span>()</span><br><span class="line"><span class="meta">@second</span>()</span><br><span class="line"><span class="function"><span class="title">method</span>(<span class="params"></span>)</span> &#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器的种类"><a href="#装饰器的种类" class="headerlink" title="装饰器的种类"></a>装饰器的种类</h3><ul><li>类装饰器</li></ul><p>类装饰器在类声明之前被定义<br>类装饰器表达式会在运行时被当做函数调用，类的构造函数作为其唯一的参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;<span class="keyword">new</span>(...args:<span class="built_in">any</span>[]):&#123;&#125;&#125;&gt;(<span class="title">constructor</span>:<span class="title">T</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">constructor</span> </span>&#123;</span><br><span class="line">        newProperty = <span class="string">&quot;new property&quot;</span>;</span><br><span class="line">        hello = <span class="string">&quot;override&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@classDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    property = <span class="string">&quot;property&quot;</span>;</span><br><span class="line">    hello: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hello = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Greeter(<span class="string">&quot;world&quot;</span>));</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hello: &quot;override&quot;</span></span><br><span class="line"><span class="comment"> * newProperty: &quot;new property&quot;</span></span><br><span class="line"><span class="comment"> * property: &quot;property&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>方法装饰器</li></ul><p>方法装饰器声明在一个方法的声明之前，它会被应用到方法的属性描述上，可以用来监视修改或替换方法定义<br>方法装饰器会在运行时被当作函数调用</p><p>装饰器参数：<br>静态成员的类的构造函数，或者实例成员的类的原型<br>成员的姓名<br>成员的属性描述符</p><ul><li>访问器装饰器<br>访问器装饰器声明在一个访问器之前<br>访问器装饰器会在运行时当做函数运行</li></ul><p>访问器参数：</p><p>静态成员是类的构造函数， 实例成员是类的原型对象<br>成员的名字<br>成员的属性描述符</p><p>如果访问器返回一个值，他会被用作方法的属性描述符</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configurable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">descriptor.configurable = value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> _x : <span class="built_in">number</span></span><br><span class="line"><span class="keyword">private</span> _y: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._x = x</span><br><span class="line"><span class="built_in">this</span>._y = y</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">get</span> <span class="title">x</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>属性装饰器</li></ul><p>属性访问器声明在属性声明之前</p><p>属性装饰器在运行时被当做函数运行</p><p>参数：</p><p>静态成员来说是类的构造函数，对于实例成员来说是类的原型对象<br>成员的名字</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatMetadataKey = <span class="built_in">Symbol</span>(<span class="string">&quot;format&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">formatString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.metadata(formatMetadataKey, formatString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormat</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.getMetadata(formatMetadataKey, target, propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">greeter: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.greeter = message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">greet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> formatString = getFormat(<span class="built_in">this</span>, <span class="string">&#x27;greeter&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> formatString.replace(<span class="string">&#x27;%s&#x27;</span>, <span class="built_in">this</span>.greeter)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>参数装饰器</li></ul><p>参数装饰器声明在参数之前</p><p>参数：</p><p>静态成员是类的构造函数，实例成员是类的原型对象<br>成员的名字<br>参数在函数参数列表中的索引</p><h3 id="装饰器能干什么？"><a href="#装饰器能干什么？" class="headerlink" title="装饰器能干什么？"></a>装饰器能干什么？</h3><p>它可以在不修改代码自身的前提下，给已有代码增加额外的行为</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是装饰器？&quot;&gt;&lt;a href=&quot;#什么是装饰器？&quot; class=&quot;headerlink&quot; title=&quot;什么是装饰器？&quot;&gt;&lt;/a&gt;什么是装饰器？&lt;/h3&gt;&lt;p&gt;装饰器是一种特殊的声明， 可以附加到 类声明、方法、访问器、属性 或者参数上。&lt;/p&gt;
&lt;p&gt;@ex
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/categories/typescript/"/>
    
    
      <category term="TypeScript" scheme="http://zhangliminabc.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>React-SSR 之基础知识</title>
    <link href="http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/react-ssr-%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/react-ssr-%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2022-05-23T06:59:09.000Z</published>
    <updated>2022-05-23T06:59:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSR VS SSR 的比较：</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a8041b9-5aee-49b9-a519-c83d7f8d50de/Untitled.png" alt="Untitled"></p><p>完美解决方式： React SSR( SSR + SPA)</p><h3 id="React-SSR-vs-SSR-vs-CSR-的-区别？"><a href="#React-SSR-vs-SSR-vs-CSR-的-区别？" class="headerlink" title="React SSR vs SSR vs CSR 的 区别？"></a>React SSR vs SSR vs CSR 的 区别？</h3><h6 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h6><p>SSR(SSR是 Server Side Rendering， 对应的中文名是服务端渲染也就是将渲染的工作放在服务端进行); 浏览器得到完整的结构后就可直接进行 DOM 的解析、构建、加载资源及后续的渲染。</p><p>优点： 首屏展示快， 搜索引擎比较友好有利于SEO<br>缺点： 页面加载需要向服务端请求完整页面内容和资源，访问量大时会对服务器造成一定压力<br>工作原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Server 端返回html页面</span><br><span class="line">end&#x3D;&gt;end: render</span><br><span class="line">st-&gt;end</span><br></pre></td></tr></table></figure><p>CSR(CSR是Client Side Rendering， 对应的中文名是客服端渲染）→ 常见的SPA(单页面应用）<br>优点：局部刷新提升用户体验， 只需要加载一次js和css，页面路由维护在客户端页面间组件跳转很快<br>缺点：SEO不够友好， 增加页面的白屏展示时间<br>工作原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Server 端返回初始Html</span><br><span class="line">op&#x3D;&gt;operation: 然后再由JS去异步加载数据完成页面的渲染</span><br><span class="line">e&#x3D;&gt;end: render</span><br><span class="line">st-&gt;op-&gt;e</span><br></pre></td></tr></table></figure><h3 id="React-SSR-的根本原理？"><a href="#React-SSR-的根本原理？" class="headerlink" title="React SSR 的根本原理？"></a>React SSR 的根本原理？</h3><p>React SSR  = SSR + CSR</p><h3 id="实现最基本的-React-SSR"><a href="#实现最基本的-React-SSR" class="headerlink" title="实现最基本的 React SSR?"></a>实现最基本的 React SSR?</h3><h3 id="何为同构？"><a href="#何为同构？" class="headerlink" title="何为同构？"></a>何为同构？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSR VS SSR 的比较：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a8041b9-5aee-49b9-a519-c83d7f8d50de/Untitle
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>uni-app之分包</title>
    <link href="http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-app%E4%B9%8B%E5%88%86%E5%8C%85/"/>
    <id>http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-app%E4%B9%8B%E5%88%86%E5%8C%85/</id>
    <published>2022-05-23T06:07:49.000Z</published>
    <updated>2022-05-23T06:07:49.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="小程序分包背景"><a href="#小程序分包背景" class="headerlink" title="小程序分包背景"></a>小程序分包背景</h5><p>小程序有体积和资源加载限制,各家小程序平台提供了分包方式，优化小程序的下载和启动速度， 目前微信支持每个包是2M</p><p>在小程序启动时，默认会下载主包并启动主包内页面，当用户进入分包内某个页面时，会把对应分包自动下载下来，下载完成后再进行展示。此时终端界面会有等待提示。</p><p>主包： 即放置默认启动页面 / TabBar 页面，以及一些分包都需要用到的公共资源或 JS脚本</p><p>而分包则是根据page.json的配置进行划分的</p><h5 id="如何分包？"><a href="#如何分包？" class="headerlink" title="如何分包？"></a>如何分包？</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;subPackages&quot;</span>: [</span><br><span class="line">  &#123; </span><br><span class="line">   <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;pages/signup&quot;</span>, <span class="comment">// 配置子包的根目录</span></span><br><span class="line">   <span class="attr">&quot;pages&quot;</span>: [ <span class="comment">// 子包由哪些页面组成</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line"> ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分包预载配置"><a href="#分包预载配置" class="headerlink" title="分包预载配置"></a>分包预载配置</h6><table><thead><tr><th align="left">字段</th><th align="right">类型</th><th align="center">必填</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">packages</td><td align="right">StringArray</td><td align="center">是</td><td align="center">无</td><td align="center">进入页面后预下载分包的 root 或 name。<strong>APP</strong> 表示主包。</td></tr><tr><td align="left">network</td><td align="right">String</td><td align="center">否</td><td align="center">wifi</td><td align="center">在指定网络下预下载，可选值为：all（不限网络）、wifi（仅wifi下预下载）</td></tr></tbody></table><p><a href="https://uniapp.dcloud.io/collocation/pages.html#subpackages">最后附上 uni-app关于分包的官方文档</a></p>]]></content>
    
    <summary type="html">
    
      小程序有体积和资源加载限制,各家小程序平台提供了分包方式，优化小程序的下载和启动速度， 目前微信支持每个包是2M; 在小程序启动时，默认会下载主包并启动主包内页面，当用户进入分包内某个页面时，会把对应分包自动下载下来，下载完成后再进行展示。此时终端界面会有等待提示。
    
    </summary>
    
    
      <category term="uni-app" scheme="http://zhangliminabc.github.io/categories/uni-app/"/>
    
    
      <category term="小程序" scheme="http://zhangliminabc.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染的性能优化</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%80%A7%E8%83%BD/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%80%A7%E8%83%BD/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2021-09-07T08:49:15.000Z</published>
    <updated>2021-09-07T08:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在浏览器中输入url到渲染的流程去优化"><a href="#在浏览器中输入url到渲染的流程去优化" class="headerlink" title="在浏览器中输入url到渲染的流程去优化"></a>在浏览器中输入url到渲染的流程去优化</h4><ol><li>域名解析: DNS根据对于的域名解析找到对应的ip地址</li><li>TCP的三次握手</li><li>浏览器拿到响应文件后开始解析</li></ol><h6 id="dns预解析"><a href="#dns预解析" class="headerlink" title="dns预解析"></a>dns预解析</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;dns-prefetch&quot;</span> href=<span class="string">&quot;//zhanglimin.github.io&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h6 id="资源预加载"><a href="#资源预加载" class="headerlink" title="资源预加载"></a>资源预加载</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;preload&quot;</span> href=<span class="string">&quot;http://example.com&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="从业务上去优化"><a href="#从业务上去优化" class="headerlink" title="从业务上去优化"></a>从业务上去优化</h4><h6 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h6><p>节流： 在一定时间内触发一次<br>防抖：在一定时间内不在触发才执行</p><h6 id="图片的赖加载"><a href="#图片的赖加载" class="headerlink" title="图片的赖加载"></a>图片的赖加载</h6><h6 id="图片的预加载"><a href="#图片的预加载" class="headerlink" title="图片的预加载"></a>图片的预加载</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在浏览器中输入url到渲染的流程去优化&quot;&gt;&lt;a href=&quot;#在浏览器中输入url到渲染的流程去优化&quot; class=&quot;headerlink&quot; title=&quot;在浏览器中输入url到渲染的流程去优化&quot;&gt;&lt;/a&gt;在浏览器中输入url到渲染的流程去优化&lt;/h4&gt;&lt;ol&gt;

      
    
    </summary>
    
    
      <category term="性能优化" scheme="http://zhangliminabc.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="性能优化" scheme="http://zhangliminabc.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端监控</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/</id>
    <published>2021-09-06T10:33:37.000Z</published>
    <updated>2021-09-06T10:33:37.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="页面埋点"><a href="#页面埋点" class="headerlink" title="页面埋点"></a>页面埋点</h4><h4 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h4><h4 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;页面埋点&quot;&gt;&lt;a href=&quot;#页面埋点&quot; class=&quot;headerlink&quot; title=&quot;页面埋点&quot;&gt;&lt;/a&gt;页面埋点&lt;/h4&gt;&lt;h4 id=&quot;性能监控&quot;&gt;&lt;a href=&quot;#性能监控&quot; class=&quot;headerlink&quot; title=&quot;性能监控&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="页面监控" scheme="http://zhangliminabc.github.io/categories/%E9%A1%B5%E9%9D%A2%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="页面监控" scheme="http://zhangliminabc.github.io/tags/%E9%A1%B5%E9%9D%A2%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>深入之移动端布局</title>
    <link href="http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    <id>http://zhangliminabc.github.io/%E5%85%B6%E4%BB%96/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/</id>
    <published>2021-09-05T13:08:52.000Z</published>
    <updated>2021-09-05T13:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域"><a href="#viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域" class="headerlink" title="viewport: 在移动设备上, viewport是设备屏幕用来显示我们网页的那一块区域"></a>viewport: 在移动设备上, viewport是设备屏幕用来显示我们网页的那一块区域</h4><p>viewport怎么设置？<br>viewport大小就等于可视区域的大小吗?</p><p>带着上面的问题我们进一步研究…</p><h6 id="viewport怎么设置"><a href="#viewport怎么设置" class="headerlink" title="viewport怎么设置?"></a>viewport怎么设置?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mate name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>viewport跟mate标签相关， 那content中的值代表什么意思那？<br>|  属性   | 定义  | 值 |<br>|  —-  | —-  | —- |<br>| width | 规定页面的宽度 | 可以为字符串值也可以为正整数 |<br>| initial-scale | 页面初始缩放比例 | 为数字也可以为小树 |<br>| maximum-scale  | 页面最大缩放比例 | 为数字也可以为小数 |<br>| minimum-scale | 页面最小缩放比例 | 为数字也可以为小 |<br>| user-scalable | 是否允许用户进行拖动缩放 | yes or no |</p><p>关于viewport就先熟悉到这里</p><p>css中的常用单位px和我们移动设备屏幕上的像素(pixel)有什么关系？ css里面的1px == 移动设备上的1pixel吗？</p><h5 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h5><p>设备的物理像素是移动设备在出厂时就固定了的像素，整个屏幕由一个挨着一个的间隙级小的像素组成； 分辨率 === 物理像素</p><h5 id="逻辑像素"><a href="#逻辑像素" class="headerlink" title="逻辑像素"></a>逻辑像素</h5><p>逻辑像素是屏幕接受程序控制的最小单位; css中的1px === 1个逻辑像素</p><h6 id="设备像素比-物理像素-逻辑像素"><a href="#设备像素比-物理像素-逻辑像素" class="headerlink" title="设备像素比 = 物理像素 / 逻辑像素"></a>设备像素比 = 物理像素 / 逻辑像素</h6><p>好了, 上面介绍了关于移动端的相关概念，接下来我们讨论一下对于移动端设配的方案</p><h6 id="rem-动态设置根元素的大小-等比例缩放"><a href="#rem-动态设置根元素的大小-等比例缩放" class="headerlink" title="rem: 动态设置根元素的大小(等比例缩放)"></a>rem: 动态设置根元素的大小(等比例缩放)</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> rem = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">10</span></span><br><span class="line"> docEl.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setRemUnit()</span><br></pre></td></tr></table></figure><p>postcss-pxtorem: 将单位转为rem</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">       rootValue: <span class="number">37.5</span>,</span><br><span class="line">       propList: [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;!font-size&#x27;</span>],</span><br><span class="line">       selectorBlackList: [<span class="string">&#x27;van-circle__layer&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>],</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>淘宝lib-flexible库:<br>a. 先获取页面中viewport中的mate标签上的初始化缩放值，计算出dpr和缩放<br>b. 没有dpr和缩放的话， 通过获取设备像素比dpr计算出缩放值<br>c. 如果没有mate标签就创建带有缩放的viewport的mate标签<br>d. 获取可视区域的宽度 / 10, 得到rem值然后设为html上的根元素的字体大小</p><h6 id="vw-vh-方案"><a href="#vw-vh-方案" class="headerlink" title="vw / vh 方案"></a>vw / vh 方案</h6><p>将可视区域等比划分为100分</p><p>如果视图窗口375px， 那么1vw = 3.75px</p><p>可以通过 postcss-px-to-viewport: 将px值转为vw/vh值</p><h6 id="媒体查询适应"><a href="#媒体查询适应" class="headerlink" title="媒体查询适应"></a>媒体查询适应</h6><h6 id="flex-rem"><a href="#flex-rem" class="headerlink" title="flex + rem"></a>flex + rem</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域&quot;&gt;&lt;a href=&quot;#viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域&quot; class=&quot;headerlink&quot; title=&quot;viewpo
      
    
    </summary>
    
    
      <category term="移动端" scheme="http://zhangliminabc.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://zhangliminabc.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack深入之基础配置</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E6%B7%B1%E5%85%A5(1)-%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E6%B7%B1%E5%85%A5(1)-%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/</id>
    <published>2021-09-02T00:31:34.000Z</published>
    <updated>2021-09-02T00:31:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="入口配置"><a href="#入口配置" class="headerlink" title="入口配置"></a>入口配置</h4><h6 id="单入口文件"><a href="#单入口文件" class="headerlink" title="单入口文件"></a>单入口文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: string | [string]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h6><p>dependOn: 当前入口所依赖的入口。它们必须在该入口被加载前被加载。<br>filename: 指定要输出的文件名称。<br>import: 启动时需加载的模块。<br>library: 指定 library 选项，为当前 entry 构建一个 library。<br>runtime: 运行时 chunk 的名字。如果设置了，就会创建一个新的运行时 chunk。在 webpack 5.43.0 之后可将其设为 false 以避免一个新的运行时 chunk。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">  app: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">  verdor: &#123;</span><br><span class="line">   dependOn: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">   <span class="keyword">import</span>: <span class="string">&#x27;src/app.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分离文件"><a href="#分离文件" class="headerlink" title="分离文件"></a>分离文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">  app: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">  verdor: <span class="string">&#x27;./verdor.js&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="输入-output-设置为对象输入"><a href="#输入-output-设置为对象输入" class="headerlink" title="输入(output): 设置为对象输入"></a>输入(output): 设置为对象输入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123; </span><br><span class="line"> output: &#123;</span><br><span class="line">  filename:  <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多文件配置,使用占位符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">   app: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">   search: <span class="string">&#x27;./src/search.js&#x27;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line"> output: &#123;</span><br><span class="line">   filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">   path: __dirname + <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="loader-对源代码进行转换"><a href="#loader-对源代码进行转换" class="headerlink" title="loader: 对源代码进行转换"></a>loader: 对源代码进行转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> <span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">     &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, use: <span class="string">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, use: <span class="string">&#x27;ts-loader&#x27;</span> &#125;,</span><br><span class="line">   ],</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="plugin插件"><a href="#plugin插件" class="headerlink" title="plugin插件"></a>plugin插件</h4><p>常见的plugin插件有哪些？</p><p>ProgressPlugin: 自定义编译过程中的进度条<br>HtmlWebpackPlugin: 生成html文件<br>DllPlugin: 可以将特定的类库提前打包然后引入<br>webpack-parallel-uglify-plugin: 压缩代码<br>UglifyJS： 单线程压缩代码<br>Tree Shaking： 删除项目中未被引用的代码</p><h4 id="webpack-优化："><a href="#webpack-优化：" class="headerlink" title="webpack 优化："></a>webpack 优化：</h4><ol><li>resolve.extensions：用来表明文件后缀列表，默认查找顺序是 [‘.js’, ‘.json’]，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该</li><li>可能减少后缀列表长度，然后将出现频率高的后缀排在前面</li><li>resolve.alias：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径</li><li>module.noParse：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助</li></ol><ol><li>loader优化， 指定包含的路径 include: [resolve(‘src)]; 指定不包含的路径exclude: /node_modules/</li><li>loader缓存 loader: ‘babel-loader?cacheDirectory=true’</li><li>HappyPack： 将loader的同步执行转换为并行</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      include: [resolve(<span class="string">&#x27;src&#x27;</span>)],</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// id 后面的内容对应下面</span></span><br><span class="line">      loader: <span class="string">&#x27;happypack/loader?id=happybabel&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">&#x27;happybabel&#x27;</span>,</span><br><span class="line">    loaders: [<span class="string">&#x27;babel-loader?cacheDirectory&#x27;</span>],</span><br><span class="line">    <span class="comment">// 开启 4 个线程</span></span><br><span class="line">    threads: <span class="number">4</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="4"><li>DllPlugin</li><li>Tree Shaking 可以实现删除项目中未被引用的代码</li><li>webpack-parallel-uglify-plugin || UglifyJS: 代码压缩</li></ol><p>a -&gt; bc -&gt;d -&gt; e</p><p>浅比对， 深比对</p><p>打包 -&gt; </p><p>css -&gt; </p><p>加载：<br>鋆： 避讳， css，performance</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;入口配置&quot;&gt;&lt;a href=&quot;#入口配置&quot; class=&quot;headerlink&quot; title=&quot;入口配置&quot;&gt;&lt;/a&gt;入口配置&lt;/h4&gt;&lt;h6 id=&quot;单入口文件&quot;&gt;&lt;a href=&quot;#单入口文件&quot; class=&quot;headerlink&quot; title=&quot;单入口文件&quot;&gt;
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://zhangliminabc.github.io/categories/webpack/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="webpack" scheme="http://zhangliminabc.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue深入之computed源码</title>
    <link href="http://zhangliminabc.github.io/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B9%8Bcomputed/"/>
    <id>http://zhangliminabc.github.io/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B9%8Bcomputed/</id>
    <published>2021-09-01T07:44:39.000Z</published>
    <updated>2021-09-01T07:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: initComputed</span><br><span class="line">op1&#x3D;&gt;operation: 遍历computed中的属性值列表</span><br><span class="line">op1-1&#x3D;&gt;operation: 判断是否是服务器端渲染</span><br><span class="line">cond1&#x3D;&gt;condition: Yes or no</span><br><span class="line"></span><br><span class="line">op2&#x3D;&gt;operation: defineComputed为vm上添加对key的代理, 设置get&#x2F;set</span><br><span class="line">op3&#x3D;&gt;operation: 为每一个key值初始化watcher实例,保存到vm._computedWatcher数组</span><br><span class="line">op4&#x3D;&gt;operation: 当对key读取时，会触发getter, getter会从_computedWatcher上找到对应的watcher,然后通过evaluate触发get函数, pushTarget收集对应的watcher</span><br><span class="line">op5&#x3D;&gt;operation: 触发_data中的get函数,</span><br><span class="line">op6&#x3D;&gt;operation: dep.depend -&gt; watcher.addDep(dep)</span><br><span class="line">op7&#x3D;&gt;operation: dep.addSub(watcher)</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op1-&gt;op1-1-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;op2-&gt;op4-&gt;op5-&gt;op6-&gt;op7-&gt;e</span><br><span class="line">cond1(no)-&gt;op3-&gt;op2-&gt;op4-&gt;op5-&gt;op6-&gt;op7-&gt;e</span><br></pre></td></tr></table></figure><h4 id="简述vue响应式原理"><a href="#简述vue响应式原理" class="headerlink" title="简述vue响应式原理"></a>简述vue响应式原理</h4><ol><li>深度递归遍历增加数据劫持</li><li>当对劫持数据进行访问的时会判断当前是否有watcher实例， 如果有会保存当前的watcher实例到dep中的subs(订阅者)</li><li>当对劫持数据进行设置值时会触发dep中的notify， 遍历dep中存储的sub执行sub的update方法（发布）</li><li>组件实例之后会调用render生成虚拟dom， 在render过程中对用到的数据会执行updatecomponted</li></ol><img align="center" src="../../static/vue响应式原理.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zhangliminabc.github.io/categories/vue/"/>
    
    
      <category term="框架" scheme="http://zhangliminabc.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="vue" scheme="http://zhangliminabc.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之知识图谱</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(26)-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(26)-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</id>
    <published>2021-09-01T00:57:16.000Z</published>
    <updated>2021-09-01T00:57:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="javascript-知识架构图"><a href="#javascript-知识架构图" class="headerlink" title="javascript 知识架构图"></a>javascript 知识架构图</h4><img src="../../../static/JavaScript.png"/>]]></content>
    
    <summary type="html">
    
      这是js的整体知识框架图以及深入剖析了js代码的执行顺序；在执行的过程中浅析js, js代码分为文法、语法、和执行时三种顺序, 用一定的词法和语法表达一定的语义; js的文法是用一定的表达式和操作符构成一个语句
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器深入之web-worker</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-webworker/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-webworker/</id>
    <published>2021-08-31T02:50:19.000Z</published>
    <updated>2021-08-31T02:50:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面"><a href="#web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面" class="headerlink" title="web Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面"></a>web Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面</h4><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个专用worker</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initWorker</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!<span class="built_in">window</span>.Worker)  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Worker(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">const</span> myWorker = initWorker()</span><br><span class="line">first.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myWorker.postMessage([<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;seound&#x27;</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Message posted to worker&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">secound.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> myWorker.postMessage([<span class="string">&#x27;secound&#x27;</span>])</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Message posted to Worker&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker线程</span></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;message received from main script&#x27;</span>)</span><br><span class="line"> <span class="keyword">const</span> workerResult = <span class="string">&#x27;result:&#x27;</span> + e.data</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Posting message back to main script&#x27;</span>);</span><br><span class="line"> postMessage(workerResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line">myWorker.onMessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Message received from worker&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="workers和主线程之间的数据传递通过-postMessage-传递消息；-使用-onmessage-事件处理函数来响应消息-消息被包含在Message事件的data属性中-这个过程中数据并不是被共享而是被复制"><a href="#workers和主线程之间的数据传递通过-postMessage-传递消息；-使用-onmessage-事件处理函数来响应消息-消息被包含在Message事件的data属性中-这个过程中数据并不是被共享而是被复制" class="headerlink" title="workers和主线程之间的数据传递通过 postMessage 传递消息； 使用 onmessage 事件处理函数来响应消息(消息被包含在Message事件的data属性中), 这个过程中数据并不是被共享而是被复制"></a>workers和主线程之间的数据传递通过 postMessage 传递消息； 使用 onmessage 事件处理函数来响应消息(消息被包含在Message事件的data属性中), 这个过程中数据并不是被共享而是被复制</h4><h4 id="worker-Api"><a href="#worker-Api" class="headerlink" title="worker Api"></a>worker Api</h4><ul><li><p>terminate(): 从主线程中立刻终止一个运行中的worker</p></li><li><p>close(): 在workers线程中调用自己的close方法进行关闭</p></li><li><p>onError(): worker执行错误时发生</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面&quot;&gt;&lt;a href=&quot;#web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://zhangliminabc.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="浏览器" scheme="http://zhangliminabc.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之对象</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(25)-%E5%AF%B9%E8%B1%A1/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(25)-%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-08-31T02:41:56.000Z</published>
    <updated>2021-08-31T02:41:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-对象属性"><a href="#1-对象属性" class="headerlink" title="1. 对象属性"></a>1. 对象属性</h4><p><em>数据属性:</em><br>configurable: 能否通过 delete 删除属性从而重新定义属性，默认值 true<br>enumerable: 是否可以通过 forin 循环， 默认值 true<br>writable: 能否修改属性的值， 默认值 true<br>value： 获取修改属性的值。 默认值 undifined<br>Object.defineProperty( 属性所在的对象， 需要修改的属性名， 描述符对象)</p><p><em>访问器属性：</em><br>configurable: 能否通过 delete 删除属性从而重新定义属性，默认值 true<br>enumerable: 是否可以通过 forin 循环， 默认值 true<br>get: 获取属性值， 默认值 undifined<br>set：设置属性值。 默认值 undifined<br>访问器属性不能直接定义， 只能通过 Object.defineProperty 来定义<br>Object.defineProperties(target， {})</p><h4 id="hasOwnProperty-检测属性是否存在于实例中"><a href="#hasOwnProperty-检测属性是否存在于实例中" class="headerlink" title="hasOwnProperty: 检测属性是否存在于实例中"></a>hasOwnProperty: 检测属性是否存在于实例中</h4><h4 id="hasPrototypeProperty-检测对象中是否在原型中存在给定的属性"><a href="#hasPrototypeProperty-检测对象中是否在原型中存在给定的属性" class="headerlink" title="hasPrototypeProperty: 检测对象中是否在原型中存在给定的属性"></a>hasPrototypeProperty: 检测对象中是否在原型中存在给定的属性</h4><h4 id="in操作符-检测对象中是否存在给定的属性值"><a href="#in操作符-检测对象中是否存在给定的属性值" class="headerlink" title="in操作符: 检测对象中是否存在给定的属性值"></a>in操作符: 检测对象中是否存在给定的属性值</h4><h4 id="isPrototypeOf-对象之前是否存在存在某种关系"><a href="#isPrototypeOf-对象之前是否存在存在某种关系" class="headerlink" title="isPrototypeOf: 对象之前是否存在存在某种关系"></a>isPrototypeOf: 对象之前是否存在存在某种关系</h4><h4 id="getPrototypeof-获取对象的的隐式原型，即对象的proto属性"><a href="#getPrototypeof-获取对象的的隐式原型，即对象的proto属性" class="headerlink" title="getPrototypeof: 获取对象的的隐式原型，即对象的proto属性"></a>getPrototypeof: 获取对象的的隐式原型，即对象的<strong>proto</strong>属性</h4><h4 id="Object-getOwnPropertypeNames-得到所有的实例属性，无论它是否可枚举"><a href="#Object-getOwnPropertypeNames-得到所有的实例属性，无论它是否可枚举" class="headerlink" title="Object.getOwnPropertypeNames: 得到所有的实例属性，无论它是否可枚举"></a>Object.getOwnPropertypeNames: 得到所有的实例属性，无论它是否可枚举</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最新的定义访问器属性的方法</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  year: <span class="number">2004</span>,</span><br><span class="line">  editor: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">&quot;year&quot;</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._year;</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._year = newValue + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">//2006</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧版的定义访问器属性的方法</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  year: <span class="number">2004</span>,</span><br><span class="line">  editor: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">book.__defineGetter__(<span class="string">&quot;year&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.year;</span><br><span class="line">&#125;);</span><br><span class="line">book.__defineSetter__(<span class="string">&quot;year&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.year = newValue + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">//2006</span></span><br></pre></td></tr></table></figure><h4 id="2-创建对象"><a href="#2-创建对象" class="headerlink" title="2. 创建对象"></a>2. 创建对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.job = job;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;校长&quot;</span>, <span class="number">10</span>, <span class="string">&quot;softarea&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">20</span>, <span class="string">&quot;doctor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2.constructor == Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">30</span>;</span><br><span class="line">Person.prototype.job = <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;校长&quot;</span>, <span class="number">10</span>, <span class="string">&quot;softarea&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">20</span>, <span class="string">&quot;doctor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor); <span class="comment">//Person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isPrototypeOf： 验证对象之间是否存在关系</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person2)); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//hasOwnProperty: 验证对象属性是存在于实例中还是原型中</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-对象属性&quot;&gt;&lt;a href=&quot;#1-对象属性&quot; class=&quot;headerlink&quot; title=&quot;1. 对象属性&quot;&gt;&lt;/a&gt;1. 对象属性&lt;/h4&gt;&lt;p&gt;&lt;em&gt;数据属性:&lt;/em&gt;&lt;br&gt;configurable: 能否通过 delete 删除属性从而重新
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之函数</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(24)-%E5%87%BD%E6%95%B0/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(24)-%E5%87%BD%E6%95%B0/</id>
    <published>2021-08-31T02:38:41.000Z</published>
    <updated>2021-08-31T02:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>概述</p><hr style="margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;"/><p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值</p></li><li><p>声明(Function Declaration)</p><hr style="margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;"/><p>1.function 命令声明的代码区块，就是一个函数。function 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面</p></li></ul>  <a id="more"></a>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  2.函数表达式， 将匿名函数赋值给变量，这是这个匿名函数叫函数表达式</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionVar = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 带有函数名的函数表达式</span></span><br><span class="line"><span class="keyword">var</span> funtionWithName = <span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> functionName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上面代码在函数表达式中，加入了函数名functionName。这个functionName只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错（除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数）</span></span><br><span class="line"><span class="comment">  * ReferenceError: functionName is not defined</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">functionName(<span class="string">&quot;这是参数有参数的函数表达式);</span></span><br></pre></td></tr></table></figure><p>  3.Function 构造函数</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot; return x + y&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  retuen x + u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>函数的重复声明<br>如果同一个函数被多次声明， 后面的会覆盖前面的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是第一个函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是重复声明的函数， 这个函数会覆盖第一个函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 这是重复声明的函数， 这个函数会覆盖第一个函数</span></span><br><span class="line"><span class="comment"> * 原因： js中的函数本身属于一个挂载到window对象上的一个属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">firstFunc();</span><br></pre></td></tr></table></figure></li><li><p>属性和方法</p></li><li><p>递归</p></li><li><p>作用域</p><p>在 es5 中 JavaScript 只有两种作用域， 一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在</p><p>函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;这是全局作用域的变量&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 这是全局作用域的变量</span></span><br><span class="line"><span class="comment"> *  在函数体内可以访问具有全局作用域的变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">globalFun();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;这是函数体内定义的变量&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReferenceError: b is not defined</span></span><br><span class="line"><span class="comment"> * 函数内定义的变量不能再函数体之外访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果在函数体内存在跟全局变量相同的局部变量，局部变量会覆盖全部变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">f();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure><p>与全局作用域一样，函数作用域内部也会产生“变量提升”现象。var 命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// firstFun 函数的作用域是全局的</span></span><br><span class="line"><span class="keyword">var</span> firstFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">souncedFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  firstFun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * result =&gt; 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">souncedFun();</span><br></pre></td></tr></table></figure></li><li><p>参数</p></li><li><p>闭包<br>定义在函数体内的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Uncaught ReferenceError: n is not defined</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结： 函数内部可以直接读取全局变量，但是函数外部无法读取函数内部声明的变量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改造之后的函数体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(parentFun());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖: 防抖是任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行，一般用于输入框实时搜索</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流: 节流是规定函数在指定的时间间隔内只执行一次，一般用于scroll事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>立即调用函数<br>在 Javascript 中，圆括号()是一种运算符，跟在函数名之后，表示调用该函数</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;概述&lt;/p&gt;
&lt;hr style=&quot;margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;&quot;/&gt;

&lt;p&gt;函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;声明(Function Declaration)&lt;/p&gt;
&lt;hr style=&quot;margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;&quot;/&gt;

&lt;p&gt;1.function 命令声明的代码区块，就是一个函数。function 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之js内存</title>
    <link href="http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(23)-%E5%86%85%E5%AD%98/"/>
    <id>http://zhangliminabc.github.io/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(23)-%E5%86%85%E5%AD%98/</id>
    <published>2021-08-28T09:46:22.000Z</published>
    <updated>2021-08-28T09:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>js的内存结构</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  将一个对象赋值给obj变量，js引擎会先在队内存中生成一个对象，然将堆内存的地址赋值给变量obj， 所以实际上变量obj指向的是一个堆内存地址</p>   <p style="color: red;">也就是说，变量obj是一个地址（reference）。后面如果要读取obj.a，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的a属性</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">     a: <span class="number">1</span>,</span><br><span class="line">     getValue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">f() <span class="comment">// undefined</span></span><br><span class="line">obj.f() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><img src="../../../static/js中的this.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js的内存结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/categories/javascript/"/>
    
    
      <category term="前端基础" scheme="http://zhangliminabc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://zhangliminabc.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
