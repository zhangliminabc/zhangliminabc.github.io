<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Http之缓存</title>
    <url>/%E5%85%B6%E4%BB%96/http/2022-06-07-http%E4%B9%8B%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h5 id="什么是缓存？"><a href="#什么是缓存？" class="headerlink" title="什么是缓存？"></a>什么是缓存？</h5><p>缓存是一种保存资源副本并在下一次请求时直接使用该副本的技术</p>
<h6 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h6><p>cache-control: </p>
<ol>
<li><p>no-store: 不缓存， 每次请求都重新加载</p>
</li>
<li><p>no-cache： 缓存但是重新校验， 请求发出后会将此请求发到服务器，服务端验证缓存是否过期，如未过期就会使用本地缓存副本（304）-&gt; 服务端验证是否过期走的是协商缓存的验证</p>
</li>
<li><p>public： 该响应被任何的中间件（cdn、代理）缓存</p>
</li>
<li><p>private: 只能针对个人用户</p>
</li>
<li><p>max-age=<seconds>: 缓存时间</p>
</li>
<li><p>s-maxage: 和 max-age一样，只不过是针对代理服务器而言</p>
</li>
<li><p>max-stale: 愿意接收过期资源， 响应不能已经过时超过该给定的时间</p>
</li>
<li><p>min-fresh: 希望获取一个在指定秒数内罪行状态的响应</p>
</li>
<li><p>must-revalidate: 资源过期，缓存不能用</p>
</li>
</ol>
<p>Expires：<http-date> 服务器返回的过期时间<br>工作原理： 下一次请求时，请求时间小于服务端返回的到期时间直接使用缓存数据</p>
<p>cache-control 和 Expires 的区别是啥？<br>Expires是http1.0的产物； cache-control是http1.1的产物</p>
<h6 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h6><p>last-Modified / If-Modified-Since</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 客户端发起请求</span><br><span class="line">browserCache&#x3D;&gt;condition: 判断是否有缓存</span><br><span class="line">isCache&#x3D;&gt;inputoutput: 读取缓存数据</span><br><span class="line"></span><br><span class="line">noCache&#x3D;&gt;inputoutput: 没有缓存数据</span><br><span class="line">fetchHttp&#x3D;&gt;operation: 发起http请求， 响应头决定缓存机制，下发 last-modified</span><br><span class="line">responseData&#x3D;&gt;operation: 浏览器缓存last-modified的值</span><br><span class="line">useLastModified&#x3D;&gt;operation: 下一次请求头上会带上 If-Modified-Since,值为上一次last-modified的值</span><br><span class="line">isNotExpires&#x3D;&gt;condition: 服务器会根据 If-Modified-Since 判断是否被修改过</span><br><span class="line">notModified&#x3D;&gt;operation: 没有被修改过，返回304， 浏览器不下载响应头</span><br><span class="line">isModified&#x3D;&gt;operation: 修改过，浏览器重新缓存</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;browserCache</span><br><span class="line">browserCache(yes)-&gt;isCache-&gt;e</span><br><span class="line">browserCache(no)-&gt;noCache-&gt;fetchHttp-&gt;responseData-&gt;useLastModified-&gt;isNotExpires</span><br><span class="line">isNotExpires(yes)-&gt;isModified-&gt;e</span><br><span class="line">isNotExpires(no)-&gt;notModified-&gt;e</span><br></pre></td></tr></table></figure>

<p>ETag 和 If-None-Match</p>
<p>和last-modified类似， 不同点在于服务器返回的是一个tag标识符， 在一次请求的时候会带上 If-None-Match 的请求头</p>
<img src="../../../static/http/http缓存.webp">

<p>两者区别：</p>
<p>ETag 优先级高于 last-modified</p>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>css深入之实现一个垂直水平居中</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(12)-%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><h5 id="行内元素水平居中"><a href="#行内元素水平居中" class="headerlink" title="行内元素水平居中"></a>行内元素水平居中</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">text-align</span>: center // 文本text、图像img、按钮、链接</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="块级元素水平居中"><a href="#块级元素水平居中" class="headerlink" title="块级元素水平居中"></a>块级元素水平居中</h5><h6 id="定宽块级元素："><a href="#定宽块级元素：" class="headerlink" title="定宽块级元素："></a>定宽块级元素：</h6><h6 id="方案一：margin：-0-auto"><a href="#方案一：margin：-0-auto" class="headerlink" title="方案一：margin： 0 auto"></a>方案一：margin： 0 auto</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方案二：-position-margin-负一半"><a href="#方案二：-position-margin-负一半" class="headerlink" title="方案二： position + margin 负一半"></a>方案二： position + margin 负一半</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">50px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方案三：-position-margin-auto"><a href="#方案三：-position-margin-auto" class="headerlink" title="方案三： position + margin auto"></a>方案三： position + margin auto</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h6 id="不定宽块级元素："><a href="#不定宽块级元素：" class="headerlink" title="不定宽块级元素："></a>不定宽块级元素：</h6><h6 id="方案一：-flex"><a href="#方案一：-flex" class="headerlink" title="方案一： flex"></a>方案一： flex</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: flex;</span><br><span class="line"> <span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方案二：-inline-block-子元素设置-inline-block，-父元素设置text-align：-center"><a href="#方案二：-inline-block-子元素设置-inline-block，-父元素设置text-align：-center" class="headerlink" title="方案二： inline-block: 子元素设置 inline-block， 父元素设置text-align： center"></a>方案二： inline-block: 子元素设置 inline-block， 父元素设置text-align： center</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方案三-设置table：-设置display：-table，然后设置margin：-0-auto"><a href="#方案三-设置table：-设置display：-table，然后设置margin：-0-auto" class="headerlink" title="方案三: 设置table： 设置display： table，然后设置margin： 0 auto"></a>方案三: 设置table： 设置display： table，然后设置margin： 0 auto</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: table;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方案四：-position-transform"><a href="#方案四：-position-transform" class="headerlink" title="方案四： position + transform"></a>方案四： position + transform</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><h6 id="单行文本-paddingTop-paddingBottom-或者-lineHeight-height"><a href="#单行文本-paddingTop-paddingBottom-或者-lineHeight-height" class="headerlink" title="单行文本: paddingTop = paddingBottom 或者 lineHeight = height"></a>单行文本: paddingTop = paddingBottom 或者 lineHeight = height</h6><h6 id="多行文本："><a href="#多行文本：" class="headerlink" title="多行文本："></a>多行文本：</h6><h6 id="定宽高块级元素垂直居中："><a href="#定宽高块级元素垂直居中：" class="headerlink" title="定宽高块级元素垂直居中："></a>定宽高块级元素垂直居中：</h6><h6 id="方案一：-position-margin-负一半"><a href="#方案一：-position-margin-负一半" class="headerlink" title="方案一： position + margin 负一半"></a>方案一： position + margin 负一半</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin-top</span>: -<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方案二：-position-margin-auto"><a href="#方案二：-position-margin-auto" class="headerlink" title="方案二： position + margin auto"></a>方案二： position + margin auto</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="不定宽高块级元素"><a href="#不定宽高块级元素" class="headerlink" title="不定宽高块级元素"></a>不定宽高块级元素</h6><h6 id="方案一：-父元素display：table，-子元素：table-cell-和-vertical-align：middle"><a href="#方案一：-父元素display：table，-子元素：table-cell-和-vertical-align：middle" class="headerlink" title="方案一： 父元素display：table， 子元素：table-cell 和 vertical-align：middle"></a>方案一： 父元素display：table， 子元素：table-cell 和 vertical-align：middle</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.boxParent</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: table-cell;</span><br><span class="line">	<span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h6 id="方案二：-flex"><a href="#方案二：-flex" class="headerlink" title="方案二： flex"></a>方案二： flex</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h3><h6 id="不定宽高"><a href="#不定宽高" class="headerlink" title="不定宽高"></a>不定宽高</h6><h6 id="方案一：-flex-1"><a href="#方案一：-flex-1" class="headerlink" title="方案一： flex"></a>方案一： flex</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: flex; </span><br><span class="line">	<span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="方案二：-table-textAlign-verticalAlign"><a href="#方案二：-table-textAlign-verticalAlign" class="headerlink" title="方案二： table + textAlign + verticalAlign"></a>方案二： table + textAlign + verticalAlign</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.boxParent</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: table-cell;</span><br><span class="line">	<span class="attribute">vertical-align</span>: middle;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="已知宽高："><a href="#已知宽高：" class="headerlink" title="已知宽高："></a>已知宽高：</h4><h6 id="方案一：-绝对定位-margin-auto"><a href="#方案一：-绝对定位-margin-auto" class="headerlink" title="方案一： 绝对定位 + margin: auto"></a>方案一： 绝对定位 + margin: auto</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">background</span>:green;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="方案二：-绝对定位-负-margin"><a href="#方案二：-绝对定位-负-margin" class="headerlink" title="方案二： 绝对定位 + 负 margin"></a>方案二： 绝对定位 + 负 margin</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">margin-right</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方案三：-absolute-transform"><a href="#方案三：-absolute-transform" class="headerlink" title="方案三： absolute + transform"></a>方案三： absolute + transform</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方案四：-利用css的calc方法"><a href="#方案四：-利用css的calc方法" class="headerlink" title="方案四： 利用css的calc方法"></a>方案四： 利用css的calc方法</h6><p>```css<br>.box {<br>      width: 500px;<br>    height: 400px;<br>    margin-left: calc((100% - 500px) / 2);<br>    margin-top: calc((100% - 400px) / 2);<br>}</p>
]]></content>
      <categories>
        <category>Css</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文件</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(27)-Bom%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>当一个事件发生在一个元素上，它会首先运行在该元素上的处理程序，然后运行其父元素上的处理程序，然后一直向上到其他祖先上的处理程序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;form&#x27;)&quot;</span>&gt;</span>FORM</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;div&#x27;)&quot;</span>&gt;</span>DIV</span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;p&#x27;)&quot;</span>&gt;</span>P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们点击 p 标签上的 onclick 事件时会首选运行 p 标签上的 click事件，然后是外部的<br>p -&gt; div -&gt; form</p>
<h4 id="那怎么阻止事件冒泡那？"><a href="#那怎么阻止事件冒泡那？" class="headerlink" title="那怎么阻止事件冒泡那？"></a>那怎么阻止事件冒泡那？</h4><p>event.stopPropagation(): 阻止事件冒泡，这是方法是停止事件向上传播点击了 p 标签之前，p标签以外的点击事件不会被执行</p>
<p>event.stopImmediatePropagation(): 可以用于停止事件冒泡，并阻止当前元素上的处理程序</p>
<h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>BOM 事件经过 事件捕获 -&gt; 目标阶段 -&gt; 冒泡阶段</p>
<h3 id="事件委托-事件代理"><a href="#事件委托-事件代理" class="headerlink" title="事件委托 / 事件代理"></a>事件委托 / 事件代理</h3><p>利用事件冒泡原理，根据 target 判断是否是目标节点</p>
<p> 优点：<br>      1. 减少内存消耗和动态绑定事件</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>常见tsconfig配置</title>
    <url>/TypeScript/2022-05-30-ts%E4%B9%8Btsconfig/</url>
    <content><![CDATA[<h3 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions:"></a>compilerOptions:</h3><ul>
<li>@types, typeRoots, types</li>
</ul>
<p>types: string[] : 被列出来的包才会被包含进来<br>typeRoots: string[]: typeRoots 被列出来的包才会包含进来</p>
<ul>
<li><p>target<br>target： string: 指定ECMAScript 目标版本</p>
</li>
<li><p>experimentalDecorators: boolean<br>是否开启装饰器</p>
</li>
</ul>
<p>(tsconfig-compilerOption-参考文档)[<a href="https://www.tslang.cn/docs/handbook/compiler-options.htm]">https://www.tslang.cn/docs/handbook/compiler-options.htm]</a></p>
<h3 id="files-string-指定一个包含相对或绝对文件路径的列表"><a href="#files-string-指定一个包含相对或绝对文件路径的列表" class="headerlink" title="files: string[]:  指定一个包含相对或绝对文件路径的列表"></a>files: string[]:  指定一个包含相对或绝对文件路径的列表</h3><h3 id="include-string-包含文件"><a href="#include-string-包含文件" class="headerlink" title="include: string[]: 包含文件"></a>include: string[]: 包含文件</h3><h3 id="exclude-string-排除文件"><a href="#exclude-string-排除文件" class="headerlink" title="exclude: string[]: 排除文件"></a>exclude: string[]: 排除文件</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>高级类型</title>
    <url>/TypeScript/2022-05-30-ts%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="交叉类型-T-amp-U：-将多个类型合并为一个类型"><a href="#交叉类型-T-amp-U：-将多个类型合并为一个类型" class="headerlink" title="交叉类型 T &amp; U： 将多个类型合并为一个类型"></a>交叉类型 T &amp; U： 将多个类型合并为一个类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Extends</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; (<span class="params">first: T, second: U</span>): <span class="title">T</span> &amp; <span class="title">U</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> result = <span class="xml"><span class="tag">&lt;<span class="name">T</span> &amp; <span class="attr">U</span>&gt;</span>&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">	for(let key in first) &#123;</span></span><br><span class="line">		(&lt;any&gt;result)[key] = first[key]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	for(let key in second) &#123;</span><br><span class="line">		(&lt;any&gt;result)[key] = second[key]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return result</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="联合类型-T-U-值可以是几种类型之一-竖线（-）分隔每个类型"><a href="#联合类型-T-U-值可以是几种类型之一-竖线（-）分隔每个类型" class="headerlink" title="联合类型 T | U : 值可以是几种类型之一, 竖线（ |）分隔每个类型"></a>联合类型 T | U : 值可以是几种类型之一, 竖线（ |）分隔每个类型</h3><h3 id="类型保护：-parameterName-is-Type"><a href="#类型保护：-parameterName-is-Type" class="headerlink" title="类型保护： parameterName is Type"></a>类型保护： parameterName is Type</h3>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文件</title>
    <url>/TypeScript/2022-05-30-ts%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><ul>
<li><p>布尔值（boolean）</p>
</li>
<li><p>数字 （ number)</p>
</li>
<li><p>字符串 （ string)</p>
</li>
<li><p>数组 array</p>
</li>
<li><p>元组（Tuple） ： 已知元素数量和类型的数组</p>
</li>
<li><p>枚举 （ enum ）</p>
</li>
<li><p>any: 不清楚变量的类型</p>
</li>
<li><p>void： 没有任何类型， 函数返回值</p>
</li>
<li><p>null | undefined： </p>
</li>
<li><p>never：永不存在的值的类型</p>
</li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文件</title>
    <url>/TypeScript/2022-05-29-ts%E4%B9%8Bmixin/</url>
    <content><![CDATA[<h3 id="mixin（混入）"><a href="#mixin（混入）" class="headerlink" title="mixin（混入）"></a>mixin（混入）</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMixins</span>(<span class="params">derivedCtor: <span class="built_in">any</span>, baseCtors: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">  baseCtors.forEach(<span class="function">(<span class="params">baseCtor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disposable</span> </span>&#123;</span><br><span class="line">	isDisposed: <span class="built_in">boolean</span></span><br><span class="line">	<span class="function"><span class="title">dispose</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.isDisposed = <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Activetable</span> </span>&#123;</span><br><span class="line">	isActive: <span class="built_in">boolean</span></span><br><span class="line">	active () &#123;</span><br><span class="line">		<span class="built_in">this</span>.isActive = <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">deactivate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.isActive = <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartObject</span> <span class="title">implement</span> <span class="title">Disposable</span>, <span class="title">Activetable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">interact</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.activate()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Disposable</span></span><br><span class="line">  isDisposed: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  dispose: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="comment">// Activatable</span></span><br><span class="line">  isActive: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  activate: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  deactivate: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyMixins(SmartObject, [Disposable, Activatable]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> smartObj = <span class="keyword">new</span> SmartObject();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> smartObj.interact(), <span class="number">1000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Disposable Mixin</span></span><br><span class="line"><span class="keyword">var</span> Disposable = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Disposable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Disposable.prototype.dispose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.isDisposed = <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Disposable;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Activatable Mixin</span></span><br><span class="line"><span class="keyword">var</span> Activatable = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Activatable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Activatable.prototype.activate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.isActive = <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Activatable.prototype.deactivate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.isActive = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Activatable;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SmartObject = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SmartObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">// Disposable</span></span><br><span class="line">        <span class="built_in">this</span>.isDisposed = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// Activatable</span></span><br><span class="line">        <span class="built_in">this</span>.isActive = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(_this.isActive + <span class="string">&#x27; : &#x27;</span> + _this.isDisposed); &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SmartObject.prototype.interact = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.activate();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> SmartObject;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">applyMixins(SmartObject, [Disposable, Activatable]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> smartObj = <span class="keyword">new</span> SmartObject();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> smartObj.interact(); &#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// In your runtime library somewhere</span></span><br><span class="line"><span class="comment">////////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMixins</span>(<span class="params">derivedCtor, baseCtors</span>) </span>&#123;</span><br><span class="line">    baseCtors.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">baseCtor</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>mixin 的本质是将 混入元素的 prototype 拷贝到目标元素上</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文件</title>
    <url>/TypeScript/2022-05-27-ts%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h3 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h3><p>装饰器是一种特殊的声明， 可以附加到 类声明、方法、访问器、属性 或者参数上。</p>
<p>@expression</p>
<h3 id="多个装饰器的运行方式？"><a href="#多个装饰器的运行方式？" class="headerlink" title="多个装饰器的运行方式？"></a>多个装饰器的运行方式？</h3><p>每个装饰器的表达式都是从上到下计算的<br>然后将结果作为函数从下到上调用</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@f</span></span><br><span class="line"><span class="meta">@g</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子 = f( g(x) )</p>
<h3 id="如何启用装饰器？"><a href="#如何启用装饰器？" class="headerlink" title="如何启用装饰器？"></a>如何启用装饰器？</h3><p>要启用对装饰器的支持，需要在tsconfig.json中配置experimentalDecorators</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何定义一个装饰器"><a href="#如何定义一个装饰器" class="headerlink" title="如何定义一个装饰器"></a>如何定义一个装饰器</h3><p>装饰器工厂函数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;first(): factory evaluated&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKeys: <span class="built_in">string</span>, description: PropertyDescription</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;first(): called&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;second(): factory evaluated&quot;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, propertyKeys: <span class="built_in">string</span>, description: PropertyDescription</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;second(): called&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * output:</span></span><br><span class="line"><span class="comment">	 * first(): factory evaluated </span></span><br><span class="line"><span class="comment">	 * second(): factory evaluated</span></span><br><span class="line"><span class="comment">	 * second(): called</span></span><br><span class="line"><span class="comment">	 * first(): called</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@first</span>()</span><br><span class="line">	<span class="meta">@second</span>()</span><br><span class="line">	<span class="function"><span class="title">method</span>(<span class="params"></span>)</span> &#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="装饰器的种类"><a href="#装饰器的种类" class="headerlink" title="装饰器的种类"></a>装饰器的种类</h3><ul>
<li>类装饰器</li>
</ul>
<p>类装饰器在类声明之前被定义<br>类装饰器表达式会在运行时被当做函数调用，类的构造函数作为其唯一的参数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;<span class="keyword">new</span>(...args:<span class="built_in">any</span>[]):&#123;&#125;&#125;&gt;(<span class="title">constructor</span>:<span class="title">T</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">constructor</span> </span>&#123;</span><br><span class="line">        newProperty = <span class="string">&quot;new property&quot;</span>;</span><br><span class="line">        hello = <span class="string">&quot;override&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@classDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    property = <span class="string">&quot;property&quot;</span>;</span><br><span class="line">    hello: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hello = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Greeter(<span class="string">&quot;world&quot;</span>));</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hello: &quot;override&quot;</span></span><br><span class="line"><span class="comment"> * newProperty: &quot;new property&quot;</span></span><br><span class="line"><span class="comment"> * property: &quot;property&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法装饰器</li>
</ul>
<p>方法装饰器声明在一个方法的声明之前，它会被应用到方法的属性描述上，可以用来监视修改或替换方法定义<br>方法装饰器会在运行时被当作函数调用</p>
<p>装饰器参数：<br>静态成员的类的构造函数，或者实例成员的类的原型<br>成员的姓名<br>成员的属性描述符</p>
<ul>
<li>访问器装饰器<br>访问器装饰器声明在一个访问器之前<br>访问器装饰器会在运行时当做函数运行</li>
</ul>
<p>访问器参数：</p>
<p>静态成员是类的构造函数， 实例成员是类的原型对象<br>成员的名字<br>成员的属性描述符</p>
<p>如果访问器返回一个值，他会被用作方法的属性描述符</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configurable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">		descriptor.configurable = value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Point</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> _x : <span class="built_in">number</span></span><br><span class="line">	<span class="keyword">private</span> _y: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>._x = x</span><br><span class="line">		<span class="built_in">this</span>._y = y</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">	<span class="keyword">get</span> <span class="title">x</span>() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>._x</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>属性装饰器</li>
</ul>
<p>属性访问器声明在属性声明之前</p>
<p>属性装饰器在运行时被当做函数运行</p>
<p>参数：</p>
<p>静态成员来说是类的构造函数，对于实例成员来说是类的原型对象<br>成员的名字</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatMetadataKey = <span class="built_in">Symbol</span>(<span class="string">&quot;format&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">formatString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.metadata(formatMetadataKey, formatString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormat</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.getMetadata(formatMetadataKey, target, propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">	greeter: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.greeter = message</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">greet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">let</span> formatString = getFormat(<span class="built_in">this</span>, <span class="string">&#x27;greeter&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> formatString.replace(<span class="string">&#x27;%s&#x27;</span>, <span class="built_in">this</span>.greeter)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>参数装饰器</li>
</ul>
<p>参数装饰器声明在参数之前</p>
<p>参数：</p>
<p>静态成员是类的构造函数，实例成员是类的原型对象<br>成员的名字<br>参数在函数参数列表中的索引</p>
<h3 id="装饰器能干什么？"><a href="#装饰器能干什么？" class="headerlink" title="装饰器能干什么？"></a>装饰器能干什么？</h3><p>它可以在不修改代码自身的前提下，给已有代码增加额外的行为</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>React-SSR 之基础知识</title>
    <url>/%E5%85%B6%E4%BB%96/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/react-ssr-%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>CSR VS SSR 的比较：</p>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a8041b9-5aee-49b9-a519-c83d7f8d50de/Untitled.png" alt="Untitled"></p>
<p>完美解决方式： React SSR( SSR + SPA)</p>
<h3 id="React-SSR-vs-SSR-vs-CSR-的-区别？"><a href="#React-SSR-vs-SSR-vs-CSR-的-区别？" class="headerlink" title="React SSR vs SSR vs CSR 的 区别？"></a>React SSR vs SSR vs CSR 的 区别？</h3><h6 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h6><p>SSR(SSR是 Server Side Rendering， 对应的中文名是服务端渲染也就是将渲染的工作放在服务端进行); 浏览器得到完整的结构后就可直接进行 DOM 的解析、构建、加载资源及后续的渲染。</p>
<p>优点： 首屏展示快， 搜索引擎比较友好有利于SEO<br>缺点： 页面加载需要向服务端请求完整页面内容和资源，访问量大时会对服务器造成一定压力<br>工作原理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Server 端返回html页面</span><br><span class="line">end&#x3D;&gt;end: render</span><br><span class="line">st-&gt;end</span><br></pre></td></tr></table></figure>

<p>CSR(CSR是Client Side Rendering， 对应的中文名是客服端渲染）→ 常见的SPA(单页面应用）<br>优点：局部刷新提升用户体验， 只需要加载一次js和css，页面路由维护在客户端页面间组件跳转很快<br>缺点：SEO不够友好， 增加页面的白屏展示时间<br>工作原理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Server 端返回初始Html</span><br><span class="line">op&#x3D;&gt;operation: 然后再由JS去异步加载数据完成页面的渲染</span><br><span class="line">e&#x3D;&gt;end: render</span><br><span class="line">st-&gt;op-&gt;e</span><br></pre></td></tr></table></figure>

<h3 id="React-SSR-的根本原理？"><a href="#React-SSR-的根本原理？" class="headerlink" title="React SSR 的根本原理？"></a>React SSR 的根本原理？</h3><p>React SSR  = SSR + CSR</p>
<h3 id="实现最基本的-React-SSR"><a href="#实现最基本的-React-SSR" class="headerlink" title="实现最基本的 React SSR?"></a>实现最基本的 React SSR?</h3><h3 id="何为同构？"><a href="#何为同构？" class="headerlink" title="何为同构？"></a>何为同构？</h3>]]></content>
  </entry>
  <entry>
    <title>uni-app之分包</title>
    <url>/%E5%85%B6%E4%BB%96/%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-app%E4%B9%8B%E5%88%86%E5%8C%85/</url>
    <content><![CDATA[<h5 id="小程序分包背景"><a href="#小程序分包背景" class="headerlink" title="小程序分包背景"></a>小程序分包背景</h5><p>小程序有体积和资源加载限制,各家小程序平台提供了分包方式，优化小程序的下载和启动速度， 目前微信支持每个包是2M</p>
<p>在小程序启动时，默认会下载主包并启动主包内页面，当用户进入分包内某个页面时，会把对应分包自动下载下来，下载完成后再进行展示。此时终端界面会有等待提示。</p>
<p>主包： 即放置默认启动页面 / TabBar 页面，以及一些分包都需要用到的公共资源或 JS脚本</p>
<p>而分包则是根据page.json的配置进行划分的</p>
<h5 id="如何分包？"><a href="#如何分包？" class="headerlink" title="如何分包？"></a>如何分包？</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;subPackages&quot;</span>: [</span><br><span class="line">  &#123; </span><br><span class="line">   <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;pages/signup&quot;</span>, <span class="comment">// 配置子包的根目录</span></span><br><span class="line">   <span class="attr">&quot;pages&quot;</span>: [ <span class="comment">// 子包由哪些页面组成</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line"> ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="分包预载配置"><a href="#分包预载配置" class="headerlink" title="分包预载配置"></a>分包预载配置</h6><table>
<thead>
<tr>
<th align="left">字段</th>
<th align="right">类型</th>
<th align="center">必填</th>
<th align="center">默认值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">packages</td>
<td align="right">StringArray</td>
<td align="center">是</td>
<td align="center">无</td>
<td align="center">进入页面后预下载分包的 root 或 name。<strong>APP</strong> 表示主包。</td>
</tr>
<tr>
<td align="left">network</td>
<td align="right">String</td>
<td align="center">否</td>
<td align="center">wifi</td>
<td align="center">在指定网络下预下载，可选值为：all（不限网络）、wifi（仅wifi下预下载）</td>
</tr>
</tbody></table>
<p><a href="https://uniapp.dcloud.io/collocation/pages.html#subpackages">最后附上 uni-app关于分包的官方文档</a></p>
]]></content>
      <categories>
        <category>uni-app</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器渲染的性能优化</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%80%A7%E8%83%BD/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h4 id="在浏览器中输入url到渲染的流程去优化"><a href="#在浏览器中输入url到渲染的流程去优化" class="headerlink" title="在浏览器中输入url到渲染的流程去优化"></a>在浏览器中输入url到渲染的流程去优化</h4><ol>
<li>域名解析: DNS根据对于的域名解析找到对应的ip地址</li>
<li>TCP的三次握手</li>
<li>浏览器拿到响应文件后开始解析</li>
</ol>
<h6 id="dns预解析"><a href="#dns预解析" class="headerlink" title="dns预解析"></a>dns预解析</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;dns-prefetch&quot;</span> href=<span class="string">&quot;//zhanglimin.github.io&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h6 id="资源预加载"><a href="#资源预加载" class="headerlink" title="资源预加载"></a>资源预加载</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;preload&quot;</span> href=<span class="string">&quot;http://example.com&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="从业务上去优化"><a href="#从业务上去优化" class="headerlink" title="从业务上去优化"></a>从业务上去优化</h4><h6 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h6><p>节流： 在一定时间内触发一次<br>防抖：在一定时间内不在触发才执行</p>
<h6 id="图片的赖加载"><a href="#图片的赖加载" class="headerlink" title="图片的赖加载"></a>图片的赖加载</h6><h6 id="图片的预加载"><a href="#图片的预加载" class="headerlink" title="图片的预加载"></a>图片的预加载</h6>]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端监控</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h4 id="页面埋点"><a href="#页面埋点" class="headerlink" title="页面埋点"></a>页面埋点</h4><h4 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h4><h4 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h4>]]></content>
      <categories>
        <category>页面监控</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>页面监控</tag>
      </tags>
  </entry>
  <entry>
    <title>深入之移动端布局</title>
    <url>/%E5%85%B6%E4%BB%96/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h4 id="viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域"><a href="#viewport-在移动设备上-viewport是设备屏幕用来显示我们网页的那一块区域" class="headerlink" title="viewport: 在移动设备上, viewport是设备屏幕用来显示我们网页的那一块区域"></a>viewport: 在移动设备上, viewport是设备屏幕用来显示我们网页的那一块区域</h4><p>viewport怎么设置？<br>viewport大小就等于可视区域的大小吗?</p>
<p>带着上面的问题我们进一步研究…</p>
<h6 id="viewport怎么设置"><a href="#viewport怎么设置" class="headerlink" title="viewport怎么设置?"></a>viewport怎么设置?</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;mate name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>viewport跟mate标签相关， 那content中的值代表什么意思那？<br>|  属性   | 定义  | 值 |<br>|  —-  | —-  | —- |<br>| width | 规定页面的宽度 | 可以为字符串值也可以为正整数 |<br>| initial-scale | 页面初始缩放比例 | 为数字也可以为小树 |<br>| maximum-scale  | 页面最大缩放比例 | 为数字也可以为小数 |<br>| minimum-scale | 页面最小缩放比例 | 为数字也可以为小 |<br>| user-scalable | 是否允许用户进行拖动缩放 | yes or no |</p>
<p>关于viewport就先熟悉到这里</p>
<p>css中的常用单位px和我们移动设备屏幕上的像素(pixel)有什么关系？ css里面的1px == 移动设备上的1pixel吗？</p>
<h5 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h5><p>设备的物理像素是移动设备在出厂时就固定了的像素，整个屏幕由一个挨着一个的间隙级小的像素组成； 分辨率 === 物理像素</p>
<h5 id="逻辑像素"><a href="#逻辑像素" class="headerlink" title="逻辑像素"></a>逻辑像素</h5><p>逻辑像素是屏幕接受程序控制的最小单位; css中的1px === 1个逻辑像素</p>
<h6 id="设备像素比-物理像素-逻辑像素"><a href="#设备像素比-物理像素-逻辑像素" class="headerlink" title="设备像素比 = 物理像素 / 逻辑像素"></a>设备像素比 = 物理像素 / 逻辑像素</h6><p>好了, 上面介绍了关于移动端的相关概念，接下来我们讨论一下对于移动端设配的方案</p>
<h6 id="rem-动态设置根元素的大小-等比例缩放"><a href="#rem-动态设置根元素的大小-等比例缩放" class="headerlink" title="rem: 动态设置根元素的大小(等比例缩放)"></a>rem: 动态设置根元素的大小(等比例缩放)</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> rem = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">10</span></span><br><span class="line"> docEl.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setRemUnit()</span><br></pre></td></tr></table></figure>

<p>postcss-pxtorem: 将单位转为rem</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">       rootValue: <span class="number">37.5</span>,</span><br><span class="line">       propList: [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;!font-size&#x27;</span>],</span><br><span class="line">       selectorBlackList: [<span class="string">&#x27;van-circle__layer&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>],</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>淘宝lib-flexible库:<br>a. 先获取页面中viewport中的mate标签上的初始化缩放值，计算出dpr和缩放<br>b. 没有dpr和缩放的话， 通过获取设备像素比dpr计算出缩放值<br>c. 如果没有mate标签就创建带有缩放的viewport的mate标签<br>d. 获取可视区域的宽度 / 10, 得到rem值然后设为html上的根元素的字体大小</p>
<h6 id="vw-vh-方案"><a href="#vw-vh-方案" class="headerlink" title="vw / vh 方案"></a>vw / vh 方案</h6><p>将可视区域等比划分为100分</p>
<p>如果视图窗口375px， 那么1vw = 3.75px</p>
<p>可以通过 postcss-px-to-viewport: 将px值转为vw/vh值</p>
<h6 id="媒体查询适应"><a href="#媒体查询适应" class="headerlink" title="媒体查询适应"></a>媒体查询适应</h6><h6 id="flex-rem"><a href="#flex-rem" class="headerlink" title="flex + rem"></a>flex + rem</h6>]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack深入之基础配置</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E6%B7%B1%E5%85%A5(1)-%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="入口配置"><a href="#入口配置" class="headerlink" title="入口配置"></a>入口配置</h4><h6 id="单入口文件"><a href="#单入口文件" class="headerlink" title="单入口文件"></a>单入口文件</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: string | [string]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h6><p>dependOn: 当前入口所依赖的入口。它们必须在该入口被加载前被加载。<br>filename: 指定要输出的文件名称。<br>import: 启动时需加载的模块。<br>library: 指定 library 选项，为当前 entry 构建一个 library。<br>runtime: 运行时 chunk 的名字。如果设置了，就会创建一个新的运行时 chunk。在 webpack 5.43.0 之后可将其设为 false 以避免一个新的运行时 chunk。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">  app: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">  verdor: &#123;</span><br><span class="line">   dependOn: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">   <span class="keyword">import</span>: <span class="string">&#x27;src/app.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="分离文件"><a href="#分离文件" class="headerlink" title="分离文件"></a>分离文件</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">  app: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">  verdor: <span class="string">&#x27;./verdor.js&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输入-output-设置为对象输入"><a href="#输入-output-设置为对象输入" class="headerlink" title="输入(output): 设置为对象输入"></a>输入(output): 设置为对象输入</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123; </span><br><span class="line"> output: &#123;</span><br><span class="line">  filename:  <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多文件配置,使用占位符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> entry: &#123;</span><br><span class="line">   app: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">   search: <span class="string">&#x27;./src/search.js&#x27;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line"> output: &#123;</span><br><span class="line">   filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">   path: __dirname + <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="loader-对源代码进行转换"><a href="#loader-对源代码进行转换" class="headerlink" title="loader: 对源代码进行转换"></a>loader: 对源代码进行转换</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line"> <span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">     &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, use: <span class="string">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, use: <span class="string">&#x27;ts-loader&#x27;</span> &#125;,</span><br><span class="line">   ],</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="plugin插件"><a href="#plugin插件" class="headerlink" title="plugin插件"></a>plugin插件</h4><p>常见的plugin插件有哪些？</p>
<p>ProgressPlugin: 自定义编译过程中的进度条<br>HtmlWebpackPlugin: 生成html文件<br>DllPlugin: 可以将特定的类库提前打包然后引入<br>webpack-parallel-uglify-plugin: 压缩代码<br>UglifyJS： 单线程压缩代码<br>Tree Shaking： 删除项目中未被引用的代码</p>
<h4 id="webpack-优化："><a href="#webpack-优化：" class="headerlink" title="webpack 优化："></a>webpack 优化：</h4><ol>
<li>resolve.extensions：用来表明文件后缀列表，默认查找顺序是 [‘.js’, ‘.json’]，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该</li>
<li>可能减少后缀列表长度，然后将出现频率高的后缀排在前面</li>
<li>resolve.alias：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径</li>
<li>module.noParse：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助</li>
</ol>
<ol>
<li>loader优化， 指定包含的路径 include: [resolve(‘src)]; 指定不包含的路径exclude: /node_modules/</li>
<li>loader缓存 loader: ‘babel-loader?cacheDirectory=true’</li>
<li>HappyPack： 将loader的同步执行转换为并行</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      include: [resolve(<span class="string">&#x27;src&#x27;</span>)],</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// id 后面的内容对应下面</span></span><br><span class="line">      loader: <span class="string">&#x27;happypack/loader?id=happybabel&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">&#x27;happybabel&#x27;</span>,</span><br><span class="line">    loaders: [<span class="string">&#x27;babel-loader?cacheDirectory&#x27;</span>],</span><br><span class="line">    <span class="comment">// 开启 4 个线程</span></span><br><span class="line">    threads: <span class="number">4</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>DllPlugin</li>
<li>Tree Shaking 可以实现删除项目中未被引用的代码</li>
<li>webpack-parallel-uglify-plugin || UglifyJS: 代码压缩</li>
</ol>
<p>a -&gt; bc -&gt;d -&gt; e</p>
<p>浅比对， 深比对</p>
<p>打包 -&gt; </p>
<p>css -&gt; </p>
<p>加载：<br>鋆： 避讳， css，performance</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>vue深入之computed源码</title>
    <url>/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B9%8Bcomputed/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: initComputed</span><br><span class="line">op1&#x3D;&gt;operation: 遍历computed中的属性值列表</span><br><span class="line">op1-1&#x3D;&gt;operation: 判断是否是服务器端渲染</span><br><span class="line">cond1&#x3D;&gt;condition: Yes or no</span><br><span class="line"></span><br><span class="line">op2&#x3D;&gt;operation: defineComputed为vm上添加对key的代理, 设置get&#x2F;set</span><br><span class="line">op3&#x3D;&gt;operation: 为每一个key值初始化watcher实例,保存到vm._computedWatcher数组</span><br><span class="line">op4&#x3D;&gt;operation: 当对key读取时，会触发getter, getter会从_computedWatcher上找到对应的watcher,然后通过evaluate触发get函数, pushTarget收集对应的watcher</span><br><span class="line">op5&#x3D;&gt;operation: 触发_data中的get函数,</span><br><span class="line">op6&#x3D;&gt;operation: dep.depend -&gt; watcher.addDep(dep)</span><br><span class="line">op7&#x3D;&gt;operation: dep.addSub(watcher)</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op1-&gt;op1-1-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;op2-&gt;op4-&gt;op5-&gt;op6-&gt;op7-&gt;e</span><br><span class="line">cond1(no)-&gt;op3-&gt;op2-&gt;op4-&gt;op5-&gt;op6-&gt;op7-&gt;e</span><br></pre></td></tr></table></figure>

<h4 id="简述vue响应式原理"><a href="#简述vue响应式原理" class="headerlink" title="简述vue响应式原理"></a>简述vue响应式原理</h4><ol>
<li>深度递归遍历增加数据劫持</li>
<li>当对劫持数据进行访问的时会判断当前是否有watcher实例， 如果有会保存当前的watcher实例到dep中的subs(订阅者)</li>
<li>当对劫持数据进行设置值时会触发dep中的notify， 遍历dep中存储的sub执行sub的update方法（发布）</li>
<li>组件实例之后会调用render生成虚拟dom， 在render过程中对用到的数据会执行updatecomponted</li>
</ol>
<img align="center" src="../../static/vue响应式原理.png">
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之知识图谱</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(26)-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
    <content><![CDATA[<h4 id="javascript-知识架构图"><a href="#javascript-知识架构图" class="headerlink" title="javascript 知识架构图"></a>javascript 知识架构图</h4><img src="../../../static/JavaScript.png"/>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器深入之web-worker</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-webworker/</url>
    <content><![CDATA[<h4 id="web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面"><a href="#web-Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面" class="headerlink" title="web Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面"></a>web Worker为web内容在后台线程中运行脚本提供了一种简单的方法，线程可以执行任务而不干扰用户界面</h4><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成一个专用worker</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initWorker</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!<span class="built_in">window</span>.Worker)  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Worker(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">const</span> myWorker = initWorker()</span><br><span class="line">first.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myWorker.postMessage([<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;seound&#x27;</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Message posted to worker&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">secound.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> myWorker.postMessage([<span class="string">&#x27;secound&#x27;</span>])</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Message posted to Worker&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker线程</span></span><br><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;message received from main script&#x27;</span>)</span><br><span class="line"> <span class="keyword">const</span> workerResult = <span class="string">&#x27;result:&#x27;</span> + e.data</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Posting message back to main script&#x27;</span>);</span><br><span class="line"> postMessage(workerResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程</span></span><br><span class="line">myWorker.onMessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Message received from worker&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="workers和主线程之间的数据传递通过-postMessage-传递消息；-使用-onmessage-事件处理函数来响应消息-消息被包含在Message事件的data属性中-这个过程中数据并不是被共享而是被复制"><a href="#workers和主线程之间的数据传递通过-postMessage-传递消息；-使用-onmessage-事件处理函数来响应消息-消息被包含在Message事件的data属性中-这个过程中数据并不是被共享而是被复制" class="headerlink" title="workers和主线程之间的数据传递通过 postMessage 传递消息； 使用 onmessage 事件处理函数来响应消息(消息被包含在Message事件的data属性中), 这个过程中数据并不是被共享而是被复制"></a>workers和主线程之间的数据传递通过 postMessage 传递消息； 使用 onmessage 事件处理函数来响应消息(消息被包含在Message事件的data属性中), 这个过程中数据并不是被共享而是被复制</h4><h4 id="worker-Api"><a href="#worker-Api" class="headerlink" title="worker Api"></a>worker Api</h4><ul>
<li><p>terminate(): 从主线程中立刻终止一个运行中的worker</p>
</li>
<li><p>close(): 在workers线程中调用自己的close方法进行关闭</p>
</li>
<li><p>onError(): worker执行错误时发生</p>
</li>
</ul>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之对象</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(25)-%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h4 id="1-对象属性"><a href="#1-对象属性" class="headerlink" title="1. 对象属性"></a>1. 对象属性</h4><p><em>数据属性:</em><br>configurable: 能否通过 delete 删除属性从而重新定义属性，默认值 true<br>enumerable: 是否可以通过 forin 循环， 默认值 true<br>writable: 能否修改属性的值， 默认值 true<br>value： 获取修改属性的值。 默认值 undifined<br>Object.defineProperty( 属性所在的对象， 需要修改的属性名， 描述符对象)</p>
<p><em>访问器属性：</em><br>configurable: 能否通过 delete 删除属性从而重新定义属性，默认值 true<br>enumerable: 是否可以通过 forin 循环， 默认值 true<br>get: 获取属性值， 默认值 undifined<br>set：设置属性值。 默认值 undifined<br>访问器属性不能直接定义， 只能通过 Object.defineProperty 来定义<br>Object.defineProperties(target， {})</p>
<h4 id="hasOwnProperty-检测属性是否存在于实例中"><a href="#hasOwnProperty-检测属性是否存在于实例中" class="headerlink" title="hasOwnProperty: 检测属性是否存在于实例中"></a>hasOwnProperty: 检测属性是否存在于实例中</h4><h4 id="hasPrototypeProperty-检测对象中是否在原型中存在给定的属性"><a href="#hasPrototypeProperty-检测对象中是否在原型中存在给定的属性" class="headerlink" title="hasPrototypeProperty: 检测对象中是否在原型中存在给定的属性"></a>hasPrototypeProperty: 检测对象中是否在原型中存在给定的属性</h4><h4 id="in操作符-检测对象中是否存在给定的属性值"><a href="#in操作符-检测对象中是否存在给定的属性值" class="headerlink" title="in操作符: 检测对象中是否存在给定的属性值"></a>in操作符: 检测对象中是否存在给定的属性值</h4><h4 id="isPrototypeOf-对象之前是否存在存在某种关系"><a href="#isPrototypeOf-对象之前是否存在存在某种关系" class="headerlink" title="isPrototypeOf: 对象之前是否存在存在某种关系"></a>isPrototypeOf: 对象之前是否存在存在某种关系</h4><h4 id="getPrototypeof-获取对象的的隐式原型，即对象的proto属性"><a href="#getPrototypeof-获取对象的的隐式原型，即对象的proto属性" class="headerlink" title="getPrototypeof: 获取对象的的隐式原型，即对象的proto属性"></a>getPrototypeof: 获取对象的的隐式原型，即对象的<strong>proto</strong>属性</h4><h4 id="Object-getOwnPropertypeNames-得到所有的实例属性，无论它是否可枚举"><a href="#Object-getOwnPropertypeNames-得到所有的实例属性，无论它是否可枚举" class="headerlink" title="Object.getOwnPropertypeNames: 得到所有的实例属性，无论它是否可枚举"></a>Object.getOwnPropertypeNames: 得到所有的实例属性，无论它是否可枚举</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最新的定义访问器属性的方法</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  year: <span class="number">2004</span>,</span><br><span class="line">  editor: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">&quot;year&quot;</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._year;</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._year = newValue + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">//2006</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧版的定义访问器属性的方法</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  year: <span class="number">2004</span>,</span><br><span class="line">  editor: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">book.__defineGetter__(<span class="string">&quot;year&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.year;</span><br><span class="line">&#125;);</span><br><span class="line">book.__defineSetter__(<span class="string">&quot;year&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.year = newValue + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.year); <span class="comment">//2006</span></span><br></pre></td></tr></table></figure>

<h4 id="2-创建对象"><a href="#2-创建对象" class="headerlink" title="2. 创建对象"></a>2. 创建对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.job = job;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;校长&quot;</span>, <span class="number">10</span>, <span class="string">&quot;softarea&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">20</span>, <span class="string">&quot;doctor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2.constructor == Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">30</span>;</span><br><span class="line">Person.prototype.job = <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;校长&quot;</span>, <span class="number">10</span>, <span class="string">&quot;softarea&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">20</span>, <span class="string">&quot;doctor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor); <span class="comment">//Person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isPrototypeOf： 验证对象之间是否存在关系</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person2)); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//hasOwnProperty: 验证对象属性是存在于实例中还是原型中</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之函数</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(24)-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<ul>
<li><p>概述</p>
<hr style="margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;"/>

<p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值</p>
</li>
<li><p>声明(Function Declaration)</p>
<hr style="margin: 5px 0px; background-image: none;     border-top: 1px solid #fff;"/>

<p>1.function 命令声明的代码区块，就是一个函数。function 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面</p>
</li>
</ul>
  <a id="more"></a>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  2.函数表达式， 将匿名函数赋值给变量，这是这个匿名函数叫函数表达式</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> functionVar = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 带有函数名的函数表达式</span></span><br><span class="line"><span class="keyword">var</span> funtionWithName = <span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> functionName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上面代码在函数表达式中，加入了函数名functionName。这个functionName只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错（除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数）</span></span><br><span class="line"><span class="comment">  * ReferenceError: functionName is not defined</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">functionName(<span class="string">&quot;这是参数有参数的函数表达式);</span></span><br></pre></td></tr></table></figure>

<p>  3.Function 构造函数</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot; return x + y&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  retuen x + u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>函数的重复声明<br>如果同一个函数被多次声明， 后面的会覆盖前面的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是第一个函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是重复声明的函数， 这个函数会覆盖第一个函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 这是重复声明的函数， 这个函数会覆盖第一个函数</span></span><br><span class="line"><span class="comment"> * 原因： js中的函数本身属于一个挂载到window对象上的一个属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">firstFunc();</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性和方法</p>
</li>
<li><p>递归</p>
</li>
<li><p>作用域</p>
<p>在 es5 中 JavaScript 只有两种作用域， 一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在</p>
<p>函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;这是全局作用域的变量&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 这是全局作用域的变量</span></span><br><span class="line"><span class="comment"> *  在函数体内可以访问具有全局作用域的变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">globalFun();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;这是函数体内定义的变量&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReferenceError: b is not defined</span></span><br><span class="line"><span class="comment"> * 函数内定义的变量不能再函数体之外访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果在函数体内存在跟全局变量相同的局部变量，局部变量会覆盖全部变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">f();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure>

<p>与全局作用域一样，函数作用域内部也会产生“变量提升”现象。var 命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    tmp = x - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// firstFun 函数的作用域是全局的</span></span><br><span class="line"><span class="keyword">var</span> firstFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">souncedFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  firstFun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * result =&gt; 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">souncedFun();</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数</p>
</li>
<li><p>闭包<br>定义在函数体内的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Uncaught ReferenceError: n is not defined</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结： 函数内部可以直接读取全局变量，但是函数外部无法读取函数内部声明的变量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改造之后的函数体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result =&gt; 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(parentFun());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖: 防抖是任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行，一般用于输入框实时搜索</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流: 节流是规定函数在指定的时间间隔内只执行一次，一般用于scroll事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>立即调用函数<br>在 Javascript 中，圆括号()是一种运算符，跟在函数名之后，表示调用该函数</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之js内存</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(23)-%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<p>js的内存结构</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  将一个对象赋值给obj变量，js引擎会先在队内存中生成一个对象，然将堆内存的地址赋值给变量obj， 所以实际上变量obj指向的是一个堆内存地址</p>
   <p style="color: red;">也就是说，变量obj是一个地址（reference）。后面如果要读取obj.a，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的a属性</p>

   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">     a: <span class="number">1</span>,</span><br><span class="line">     getValue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">f() <span class="comment">// undefined</span></span><br><span class="line">obj.f() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<img src="../../../static/js中的this.png">
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之语法分析</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(22)-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="js基础语法"><a href="#js基础语法" class="headerlink" title="js基础语法"></a>js基础语法</h4><pre><code>1. 区分大小写: js 中的变量标识符区分大小写，也就意味这 test/Test 是两个不同的变量
2. 标识符: js 中的标识符是指函数名、变量名、参数名等
    a. 第一个字符必须是字符、下划线、美元符号
    b. 其他字符可以是字母、数字、下划线、美元符号
    c. 关键字不能作为标识符
3. 注释: 单行注释和多行注释
4.  语句: 语句以;结尾
        - 虽然分号不是必须的，但是加上也会在某些情况下增加代码的性能
5. 变量是松散类型，松散类型可以保存任何类型的数据</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> message; <span class="comment">// 定义变量但未初始化，默认值为undifined</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.区分大小写, a 和A 是两个不同的变量。改变其中一个值不会影响另一个变量的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> A = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a == A); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="标识符的声明方式-let-const-var"><a href="#标识符的声明方式-let-const-var" class="headerlink" title="标识符的声明方式( let/ const/ var)"></a>标识符的声明方式( let/ const/ var)</h4><p>   1, let、const、var三者之间的区别<br>           相同点： 都是定义变量的方式<br>           不同点：<br>               1. var有全局和函数作用域, let和const是块级作用域<br>               2. var可以先使用后声明， let和const不可以，let和const会生成暂时性死区，不在在初始化</p>
<ol>
<li>var对应同名标识符的处理规则？</li>
</ol>
<span style="color:red;">
  对于同名的变量声明，Javascript采用的是忽略原则，后声明的会被忽略。
  对于同名的函数声明，Javascript采用的是覆盖原则，先声明的会被覆盖。
  对于同名的函数声明和变量声明，采用的是忽略原则，为了确保函数能够被引用到，在提升时函数声明会提升到变量声明之前，变量声明会被忽略，但是变量赋值以后会被覆盖
 </span>

<h4 id="js变量提升"><a href="#js变量提升" class="headerlink" title="js变量提升"></a>js变量提升</h4><p>   js 中的变量可以先使用后声明，这一现叫做变量提升， 提升后的变量返回undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="comment">// 声明一个变量，可选初始化一个值</span></span><br><span class="line"><span class="keyword">let</span> A <span class="comment">// 声明一个块级作用， 可选初始化一个值</span></span><br><span class="line"><span class="keyword">const</span> c <span class="comment">// 声明一个块作用域的只读常量</span></span><br></pre></td></tr></table></figure>

<p>为什么var会发生变量的提升？<br>   js分为编译和执行，js引擎在编译阶段会收集所有的变量并绑定到当前所有在的作用域，而变量的赋值操作在执行阶段执行，所以才会出现变量的提升</p>
<h4 id="js-操作符"><a href="#js-操作符" class="headerlink" title="js 操作符"></a>js 操作符</h4><ul>
<li><p>算数操作符</p>
<ol>
<li>前置型操作符(前置型递增递减): 执行前置递增或者递减，变量的值都是在被求值以前改变的, 返回的是自增减一之后的值</li>
</ol>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> anotherAge = ++age + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// output: 10</span></span><br><span class="line"><span class="built_in">console</span>.log(anotherAge); <span class="comment">// output: 11</span></span><br></pre></td></tr></table></figure>

<pre><code>1. 后置操作符(后置型递增递减): 执行递增递减操作是在包它们的语句被求值之后执行， 返回没有自增减之后的值

    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age1 = <span class="number">10</span>;</span><br><span class="line">age1++; <span class="comment">// 如果没有对age求值话age1还是10</span></span><br><span class="line"><span class="built_in">console</span>.log(age1); <span class="comment">// output: 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = num1-- + num2; <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">var</span> num4 = num1 + num2; <span class="comment">// 21</span></span><br></pre></td></tr></table></figure>

2. 一元负值/ 一元正值操作符: &lt;span style=&quot;color:red;&quot;&gt;以一个+ 放到数值之前，不会对数值有任何影响, 对于非数值应用一元加减操作符，该操作符会像 Number 函数一样对值转型&lt;/span&gt;  
     a. 对于布尔值转成 0|1
     b. 对于字符串，会按照一定的规则解析
     c. 对于对象，会调用 valueof/tostring 方法</code></pre><ul>
<li><p>逻辑操作符</p>
<ol>
<li><p><span style="color: red;">逻辑非(!): 用于任何类型的值, 在应用的时候会存在类型的转换</span></p>
<pre><code>对象 -&gt; false
空字符串 -&gt; true
非空字符串 -&gt; false
数值 0 -&gt; true
任意非空 0 -&gt; false
null -&gt; true
NaN -&gt; true
undefined -&gt; true</code></pre></li>
<li><p><span style="color: red;">逻辑与(||): 当条件满足为真时返回第一个条件为真的值</span></p>
<pre><code>如果第一个操作符是对象，则直接返回第一个操作符
如果第一个操作符的求值结果为 false， 则返回第二个操作符的值
如果两个操作符都是对象，则返回第一个操作符
如果两个操作符都是 null， 则返回 null
如果连个操作符都是 NaN, 则返回 NaN
如果两个操作符都是 undefined， 则返回 undefined</code></pre> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> c = &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">a || c; <span class="comment">// output: a</span></span><br><span class="line"></span><br><span class="line">b || c; <span class="comment">// output: c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> result = found || someUndefinedVar; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">found = <span class="literal">false</span>;</span><br><span class="line">result = found || someUndefinedVar; <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><span style="color: red;">逻辑与(&amp;&amp;): 短路操作符, 当遇到为false的条件时返回false, 当第一个条件为true， 则返回第二个值</span></p>
<pre><code>如果第一个操作符是对象，则返回第二个操作符
如果第二个操作符是对象，则只有在第一个操作符返回 true 的情况下才会返回此对象
两个操作符都是对象，则返回第二个操作符
如果有一个操作符是 null，则返回 null
如果有一个操作符是 nan， 则返回 nan
如果有一个操作符是 undefined, 则返回 undefined</code></pre> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">a &amp;&amp; b; <span class="comment">// output: b</span></span><br><span class="line"></span><br><span class="line">a &amp;&amp; <span class="literal">NaN</span>; <span class="comment">// output: NaN</span></span><br><span class="line"></span><br><span class="line">a &amp;&amp; <span class="literal">undefined</span>; <span class="comment">// output: undefined</span></span><br><span class="line"></span><br><span class="line">a &amp;&amp; <span class="literal">true</span>; <span class="comment">// output: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> founed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> result = founed &amp;&amp; someUndefinedVar; <span class="comment">// errro:  someUndefinedVar 未定义</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 这句代码不会执行</span></span><br><span class="line"></span><br><span class="line">found = <span class="literal">false</span>;</span><br><span class="line">result = founed &amp;&amp; someUndefinedVar; <span class="comment">// 不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// output: false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><span style="color: red;">乘法操作符: 如果参与运算的值不是数值型就会使用 Number()函数自动转成数值，然后参与计算</span></p>
<pre><code>如果有一个值是 NaN, 则返回 NaN
如果是 infinity \* 0， 则返回 infinity
如果是 infinity 与非 0 数值想剩，则返回 infinity 或者 -infinity
如果操作值都是数值，则参与正常的计算，如果超过了 js 的最大限制则返回 infinity 或者 -infinity
如果值不为 number 类型则会调用 number()函数转换为数值，在应用上面的规则</code></pre></li>
</ol>
</li>
<li><p>关系操作符</p>
<ol>
<li><p><span style="color: red;">instanceof:检测某个对象是不是另一个对象的实例</span></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Parent.prototype) <span class="comment">// &#123;constructor: function Parent()&#123;&#125;, __proto__: Object&#125;</span></span><br><span class="line"><span class="comment">// 理解instanceof 只需要理解下面这句话</span></span><br><span class="line">Parent.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>一元操作符</p>
<ol>
<li><p><span style="color: red;">typeof操作符: 判断一个标识符属于哪种数据类型</span></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typeof 操作符返回值的类型有： &quot;number&quot;、&quot;string&quot;、&quot;boolean&quot;、&quot;object&quot;、&quot;function&quot; 和 &quot;undefined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span> <span class="comment">// Number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;dede&#x27;</span> <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> !!<span class="string">&#x27;0&#x27;</span> <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Function</span>() <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> a <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h4 id="js中的数据类型"><a href="#js中的数据类型" class="headerlink" title="js中的数据类型"></a>js中的数据类型</h4><ul>
<li><span style="color: red;"> 基本数据类型: undefined、 null、 string、 boolean、 number</span></li>
<li><span style="color: red;">引用数据类型: object</span></li>
</ul>
<h4 id="js中的typeof类型检测函数"><a href="#js中的typeof类型检测函数" class="headerlink" title="js中的typeof类型检测函数"></a>js中的typeof类型检测函数</h4><ul>
<li>typeof(类型监测)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * undefined: 这个值未定义</span></span><br><span class="line"><span class="comment"> * boolean: 布尔类型</span></span><br><span class="line"><span class="comment"> * string: 字符串</span></span><br><span class="line"><span class="comment"> * number: 数字</span></span><br><span class="line"><span class="comment"> * object: objetc 或者 null</span></span><br><span class="line"><span class="comment"> * function: 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;这是测试&quot;</span>;</span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;string&quot;</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;boolean&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;number&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;object&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;function&quot;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> message === <span class="string">&quot;undefined&quot;</span>; <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h4 id="1-Undefined类型：-Undefined类型只有一即undefined，-在声明变量但未赋值的情况下，变量的值为undefined"><a href="#1-Undefined类型：-Undefined类型只有一即undefined，-在声明变量但未赋值的情况下，变量的值为undefined" class="headerlink" title="1, Undefined类型： Undefined类型只有一即undefined， 在声明变量但未赋值的情况下，变量的值为undefined"></a>1, Undefined类型： Undefined类型只有一即undefined， 在声明变量但未赋值的情况下，变量的值为undefined</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用场景：</span></span><br><span class="line"><span class="comment"> * 1. 变量声明但没赋值</span></span><br><span class="line"><span class="comment"> * 2. 调用函数时该传入的参数没传</span></span><br><span class="line"><span class="comment"> * 3. 函数没有返回值时默认返回undefined</span></span><br><span class="line"><span class="comment"> * 4. 对象中属性值没有赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="2-Null类型-null是JavaScript中的关键字；-Null类型只有一个即null，-null表示空对象指针-变量的值将来是用来保存对象最好设置为null"><a href="#2-Null类型-null是JavaScript中的关键字；-Null类型只有一个即null，-null表示空对象指针-变量的值将来是用来保存对象最好设置为null" class="headerlink" title="2, Null类型: null是JavaScript中的关键字； Null类型只有一个即null， null表示空对象指针, 变量的值将来是用来保存对象最好设置为null"></a>2, Null类型: null是JavaScript中的关键字； Null类型只有一个即null， null表示空对象指针, 变量的值将来是用来保存对象最好设置为null</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* 使用场景：</span></span><br><span class="line"><span class="comment"> *  1. 定义的变量在将来用来保存对象</span></span><br><span class="line"><span class="comment"> *  2. 在一个数据不再使用的时候，我们最好将其值设置为null来释放其引用，以便垃圾回收下一次对其回收</span></span><br><span class="line"><span class="comment"> *  3. 作为对象原型链的终端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<h4 id="3-Boolean-布尔类型，该类型只有两个值true-和-false，要将一个值转换为boolean类型的值需要用到Boolean转换"><a href="#3-Boolean-布尔类型，该类型只有两个值true-和-false，要将一个值转换为boolean类型的值需要用到Boolean转换" class="headerlink" title="3,Boolean: 布尔类型，该类型只有两个值true 和 false，要将一个值转换为boolean类型的值需要用到Boolean转换"></a>3,Boolean: 布尔类型，该类型只有两个值true 和 false，要将一个值转换为boolean类型的值需要用到Boolean转换</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>转换为true的值</th>
<th>转换为false的值</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>String</td>
<td>任何非空字符串</td>
<td>“”(空字符串)</td>
</tr>
<tr>
<td>Number</td>
<td>任何非零数字值(包括无穷大)</td>
<td>0和NaN</td>
</tr>
<tr>
<td>Object</td>
<td>任何对象</td>
<td>null</td>
</tr>
<tr>
<td>Undefined</td>
<td>false</td>
<td>Undefined</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* 转换规则：</span></span><br><span class="line"><span class="comment"> * 1. 字符串： 任意非空类型的字符串-&gt;true, 空类型的字符串-&gt;false</span></span><br><span class="line"><span class="comment"> * 2. number: 任何非0数字,包括正(负)的无穷大-&gt; true,</span></span><br><span class="line"><span class="comment"> * 3. object: 任何对象-&gt;true</span></span><br><span class="line"><span class="comment"> * 4. undefined: undefined -&gt;false</span></span><br><span class="line"><span class="comment"> * 5, null: null -&gt; false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(-<span class="number">0.4774</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="4-number-数字类型，-对应数学中的有理数，在计算机中有-定的精度限制，-NaN-infinity-infinity"><a href="#4-number-数字类型，-对应数学中的有理数，在计算机中有-定的精度限制，-NaN-infinity-infinity" class="headerlink" title="4, number: 数字类型， 对应数学中的有理数，在计算机中有-定的精度限制， NaN/ infinity/ -infinity"></a>4, number: 数字类型， 对应数学中的有理数，在计算机中有-定的精度限制， NaN/ infinity/ -infinity</h4><ul>
<li>NaN: 非数值，即本来应该要返回数值操作但是未返回数值的情况， 任何涉及NaN的操作都会返回NaN,其次NaN与任何值都不相等包括NaN本身<br>  <span style="color:red;"> isNaN函数用来判断一个是否是NaN,j接受任意类型的值，该函数会尝将值转换为数字型，任何不能被转换的值该函数都会返回true</span></li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>Number</th>
<th>parseInt</th>
<th>parseFloat</th>
</tr>
</thead>
<tbody><tr>
<td>Number</td>
<td>简单的传入和返回</td>
<td>简单的传入和返回</td>
<td>简单的传入和返回</td>
</tr>
<tr>
<td>String</td>
<td>字符串为空 -&gt; 0; 字符串包含十六进制 -&gt; 转换为十六进制的值; 字符串包含数字 -&gt; 十进制的数</td>
<td>忽略字符串前面的空格，找到第一个非空字符，如果找不到数字字符返回NaN; 如果找到字符是数字就会继续解析第二个字符，直到字符不是数字为止</td>
<td>忽略字符前面的空格, 从第一个字符开始解析; 解析遇到第一个无效的浮点数字字符或者 字符串最后为止</td>
</tr>
<tr>
<td>Boolean</td>
<td>true -&gt; 1; false -&gt; 0</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr>
<td>Null</td>
<td>0</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr>
<td>Undefined</td>
<td>0</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr>
<td>Object</td>
<td>调用对象的valueOf方法按照上述规则转换，如果转结果为NaN则会调用对象的toString方法，然后按照上面的规则再次转换</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr>
<td>Symbol</td>
<td>/</td>
<td>/</td>
<td>/</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 转换规则</span></span><br><span class="line"><span class="comment"> * 1. boolean: true -&gt; 1, false -&gt; 0</span></span><br><span class="line"><span class="comment"> * 2. number: 简单的传入和返回</span></span><br><span class="line"><span class="comment"> * 3. null: null -&gt; 0</span></span><br><span class="line"><span class="comment"> * 4. undefined: undefined -&gt; 0</span></span><br><span class="line"><span class="comment"> * 5. 字符串: 字符串为空 -&gt; 0; 字符串包含十六进制 -&gt; 转换为十六进制的值; 字符串包含数字 -&gt; 十进制的数值</span></span><br><span class="line"><span class="comment"> * 6. object: 对象 -&gt; valueOf方法按照上述规则转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;hello wrod&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot; &quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;000011&quot;</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  parseInt: 忽略字符串前面的空格，找到第一个非空字符串，如果第一个字符不是数* 字或者负号返回NaN; 如果第一个字符是数字就会继续解析第二个字符，直到字符不是* 数字为止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1266rhfur&quot;</span>); <span class="comment">// 1266</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;rufgrfr&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseFloat: 从第一个字符开始解析; 解析遇到第一个无效的浮点数字字符或者* 字符串最后为止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;23.38434.8484&quot;</span>); <span class="comment">// 23.38434</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;frfr&quot;</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<p>Question:</p>
<ul>
<li><p>为什么 0.2 + 0.1 == 0.3 为false</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0.05</span> + <span class="number">0.25</span> == <span class="number">0.3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

answer:
机器只识别二进制，将小数转为二进制数之后可能有精度丢失的问题
[参考资料](https://zhuanlan.zhihu.com/p/159075016)</code></pre></li>
</ul>
<h4 id="5-string-字符串一旦创就不可变，如果需要改变其值需要销毁原有的值-然后在用一个包含新值得字符串去填充该变量"><a href="#5-string-字符串一旦创就不可变，如果需要改变其值需要销毁原有的值-然后在用一个包含新值得字符串去填充该变量" class="headerlink" title="5, string: 字符串一旦创就不可变，如果需要改变其值需要销毁原有的值, 然后在用一个包含新值得字符串去填充该变量"></a>5, string: 字符串一旦创就不可变，如果需要改变其值需要销毁原有的值, 然后在用一个包含新值得字符串去填充该变量</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>toString</th>
</tr>
</thead>
<tbody><tr>
<td>null</td>
<td>error</td>
</tr>
<tr>
<td>Undefined</td>
<td>error</td>
</tr>
<tr>
<td>Number</td>
<td>返回相应值的字符串形式</td>
</tr>
<tr>
<td>Boolean</td>
<td>返回相应值得字符串形式</td>
</tr>
<tr>
<td>String</td>
<td>返回相应值得字符串形式</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 将一个值转为字符串</span></span><br><span class="line"><span class="comment"> *  toString方法</span></span><br><span class="line"><span class="comment"> *  number、boolean、Object、 string都有toString方式, 多数情况下调用toString方法不用传* 参数， 但是对于number类型可以传一个参数代表返回的进制, 一般情况下是以十进制返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="number">11</span>;</span><br><span class="line">message.toString(); <span class="comment">// &#x27;11&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num.toString(<span class="number">16</span>); <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在不知道转换的值的类型时可以使用String方法转成string类型，然后调用tostring方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">String</span>(a).toString(); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<h4 id="6-Object-一组数据和功能的集合-object-是所有它的实例基础"><a href="#6-Object-一组数据和功能的集合-object-是所有它的实例基础" class="headerlink" title="6, Object: 一组数据和功能的集合, object 是所有它的实例基础"></a>6, Object: 一组数据和功能的集合, object 是所有它的实例基础</h4><ul>
<li>每一个对象都有几个属性:<ol>
<li>constructor: 保存用于创建当前对象的函数</li>
<li>hasOwnProperty(propertyName) : 检查给定的属性是否存在当前实例上而不是原型上</li>
<li>valueOf: 返回字符串，通常与toString方法返回值相同</li>
<li>tostring: 返回对象的字符串标识</li>
</ol>
</li>
</ul>
<h4 id="7-Symbol-symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型"><a href="#7-Symbol-symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型" class="headerlink" title="7, Symbol: symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型"></a>7, Symbol: symbol是es6引入的，每个symbol函数返回的都是一个唯一的值类型</h4><ul>
<li>解决问题： 对象中的属性名都是字符串容易造成冲突</li>
</ul>
<p>总结：<br>1, undefined和null的区别<br>    a， undefined表示变量未声明或者声明未赋值； null表示什么都没有<br>    b， js会将未赋值的变量默认值设为undefined； js不会将变量设置为null<br>    c， undefined使用typeof返回值是undefined; null类型返回object</p>
<p>2, instanceof 和 typeof 的区别？<br>    <span style="color: red;">typeof 用于判断标识符的类型， 但是不能判断对象的类型， 比如data， 数组,对于typeof来讲都是返回object， instanceof用于判断对象是否属于某一个对象的实例， 原型上的相等</span></p>
<h4 id="javascript-语句"><a href="#javascript-语句" class="headerlink" title="javascript 语句"></a>javascript 语句</h4><ol>
<li><p>if语句</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * if (condition) statement1 esle statement2</span></span><br><span class="line"><span class="comment"> *  condition: 可以为任意的表达式，而且对这个值的求职结果不一定是布尔值。js自动会对condition的值调用boolean方法去转* 为布尔值</span></span><br><span class="line"><span class="comment"> * 如果condition为true就在执行statement1, 否则就执行statement2语句。这个两个语句可以是一句代码，也可以是个代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">25</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;fyrgfyr&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>do-while 语句: 是一种后测试语句(只有在循环体的中的代码执行完之后才会测试出口条件, 循环体至少执行一次)</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * do&#123;statement&#125; whild(expressiong)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &gt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>while 语句: 前测试循环语句(循环体可一次都不执行)</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  while(expression) statement</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">while</span>(<span class="params"> i&lt; = <span class="number">10</span> </span>)</span> &#123;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>for 语句: 前测试循环语句（有执行循环之前初始化变量和定义循环后要执行的代码的能力）</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for(initalnition; expressiong; loop-expressiong) statement</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= count; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>forin 语句: 是一种精准的迭代语句，用来枚举对象的属性</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for(property in expression) statement</span></span><br><span class="line"><span class="keyword">for</span> (pro <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pro);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>break 和 continue 语句: 用于在循环中精确的控制代码的执行</p>
</li>
</ol>
<ul>
<li><p>break: 会立即退出循环, 强制执行循环语句后面的语句</p>
</li>
<li><p>countinue: 会立即退出循环, 但是退出循环之后会从循环的顶部立即执行</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="7">
<li>switch 语句: 在比较时是采用全等操作符，因此不会发生类型装换</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之词法分析</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(21)-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h4><h5 id="之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）"><a href="#之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）" class="headerlink" title="之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）"></a>之所以叫词法环境，是因为它是和源程序的结构对应，就是和你所写的那些源码的文字的结构对应，你写代码的时候这个环境就定了（写代码的时候决定）</h5><h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><pre><code>- 全局词法环境
- 函数词法环境
- with词法环境
- catch词法环境</code></pre><img src="https://user-gold-cdn.xitu.io/2018/12/3/1677429807aea76d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"/>

<p> 伪代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LexicalEnvironment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.EnvironmentRecord =  <span class="keyword">new</span> EnvironmentRecord()<span class="comment">// 自己的词法环境</span></span><br><span class="line">    <span class="built_in">this</span>.outer = <span class="literal">undefined</span> <span class="comment">// 外部的词法环境的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EnvironmentRecord</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnvironmentRecord.prototype.rigister = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings.set(name, <span class="literal">undefined</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnvironmentRecord.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings[name] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnvironmentRecord.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.bindings[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js引擎</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(20)-js%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h3 id="js引擎的执行流程"><a href="#js引擎的执行流程" class="headerlink" title="js引擎的执行流程"></a>js引擎的执行流程</h3><img src="../../../static/js引擎流程.png">

<p><a href="https://zhuanlan.zhihu.com/p/96969423">参考资料</a><br><a href="https://juejin.im/post/6844903788629721096">js引擎</a></p>
<ul>
<li><p>js的词法分析</p>
<p> JS文件只是一个源码，机器是无法执行的，词法分析就是把源码的字符串分割出来，生成一系列的token</p>
 <img src="../../../static/js的词法分析.jpg" />
</li>
<li><p>词法分析完后，接下来的阶段就是进行语法分析。语法分析语法分析的输入就是词法分析的输出，输出是AST抽象语法树。当程序出现语法错误的时候，V8在语法分析阶段抛出异常</p>
  <img src="../../../static/js语法分析.jpg">

</li>
</ul>
<p>v8引擎解阶段分为预解析和代码执行两阶段， 在预解阶段会有变量预解析和函数预解析</p>
<ul>
<li><p>js的字节码生阶段， 根据抽象语法树生成字节码</p>
 <img src="../../../static/js的字节码生成.jpg">
</li>
<li><p>字节码的阶段</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue深入之diff算法</title>
    <url>/%E6%A1%86%E6%9E%B6/vue%E6%B7%B1%E5%85%A5%E4%B9%8B(1)-diff%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: diff算法</span><br><span class="line">op&#x3D;&gt;operation: 形参 oldVnode, newVnode</span><br><span class="line"></span><br><span class="line">op2&#x3D;&gt;operation: oldVnode的标签是否为undefined</span><br><span class="line"></span><br><span class="line">con1&#x3D;&gt;condition: 标签和key值是否相同(sameVnode)</span><br><span class="line"></span><br><span class="line">op3&#x3D;&gt;operation: pathVnode</span><br><span class="line">con2&#x3D;&gt;condition: oldVnode &#x3D;&#x3D;&#x3D; newVnode yes or no?</span><br><span class="line"></span><br><span class="line">con3&#x3D;&gt;condition: newVnode是否有text？</span><br><span class="line">con4&#x3D;&gt;condition: oldVnode.text !&#x3D;&#x3D; newVnode.text ?</span><br><span class="line">op6&#x3D;&gt;operation: removeOldVnodeChildren(删除老节点下的子元素) &#x2F; setTextContent(elm, newVnode.text)(以新节点为基准更新text值)</span><br><span class="line"></span><br><span class="line">op7&#x3D;&gt;operation: 新vnode无内容，有children</span><br><span class="line"></span><br><span class="line">con5&#x3D;&gt;condition: 新vnode有子节点， 老vnode也有子节点</span><br><span class="line">op8&#x3D;&gt;operation: updateChildren</span><br><span class="line"></span><br><span class="line">con6&#x3D;&gt;condition: 新vnode有子节点； 老oldVNode没有无子节点</span><br><span class="line">op9&#x3D;&gt;operation: addVnodes以新节点为基准添加子节点到对应的元素中</span><br><span class="line"></span><br><span class="line">con7&#x3D;&gt;condition: 老的vnode有子节点, 新vnode没有子节点</span><br><span class="line">op10&#x3D;&gt;operation: removeVnodes遍历老节点下的子节点移除</span><br><span class="line"></span><br><span class="line">con8&#x3D;&gt;condition: 老vnode有内容</span><br><span class="line">op11&#x3D;&gt;operation: setTextContent</span><br><span class="line"></span><br><span class="line">p4&#x3D;&gt;operation: 基于newVnode创建元素插入</span><br><span class="line"></span><br><span class="line">end&#x3D;&gt;end: 结束</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;con1</span><br><span class="line"></span><br><span class="line">con1(yes)-&gt;op3-&gt;con2</span><br><span class="line">con1(no)-&gt;op4</span><br><span class="line"></span><br><span class="line">con2(yes)-&gt;end</span><br><span class="line">con2(no)-&gt;con3</span><br><span class="line"></span><br><span class="line">con3(yes)-&gt;con4</span><br><span class="line">con3(no)-&gt;op7-&gt;con5</span><br><span class="line"></span><br><span class="line">con4(yes)-&gt;op6-&gt;end</span><br><span class="line">con4(no)-&gt;end</span><br><span class="line"></span><br><span class="line">con5(yes)-&gt;op8</span><br><span class="line">con5(no)-&gt;con6</span><br><span class="line"></span><br><span class="line">con6(yes)-&gt;op9</span><br><span class="line">con6(no)-&gt;con7</span><br><span class="line"></span><br><span class="line">con7(yes)-&gt;op10</span><br><span class="line">con7(no)-&gt;con8</span><br><span class="line"></span><br><span class="line">con8(yes)-&gt;op11</span><br><span class="line">con8(no)-&gt;end</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="虚拟dom的作用？"><a href="#虚拟dom的作用？" class="headerlink" title="虚拟dom的作用？"></a>虚拟dom的作用？</h4><p>为了不必要的dom操作，优化性能</p>
<p>数据改变 -&gt;虚拟DOM(计算变更)-&gt; 操作DOM -&gt; 视图更新</p>
<h4 id="v-for中的key的作用？"><a href="#v-for中的key的作用？" class="headerlink" title="v-for中的key的作用？"></a>v-for中的key的作用？</h4><p>在进行计算dom变动的时候可以对同级元素可以更高效的计算出变动，对性能的优化</p>
<h4 id="简述diff过程-不同标签直接替换-同级相同标签通过key计算变动"><a href="#简述diff过程-不同标签直接替换-同级相同标签通过key计算变动" class="headerlink" title="简述diff过程(不同标签直接替换 / 同级相同标签通过key计算变动)"></a>简述diff过程(不同标签直接替换 / 同级相同标签通过key计算变动)</h4><ol>
<li>接收两个入参，参数都是vnode</li>
<li>先判断标签和key相同就认为是相同node，会执行pathVnode函数</li>
<li>判断两个节点是否相同</li>
<li>新节点如果有文本, 老节点text 不等于 新节点的text， 设置节点内容</li>
<li>新节点没有文本可能会有children，</li>
<li>新老节点都有child， 执行updatechild方法，</li>
<li>新节点有child， 老节点没有child， 老节点有内容，会清空老节点内容，以新节点为基准遍历添加添加元素</li>
<li>老节点有child， 新节点没有; 遍历移除老节点下的child</li>
<li>老节点有文本， 清空老节点下的文本</li>
<li>updatechild：首尾指针    </li>
</ol>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>css深入之flex</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(11)-flex/</url>
    <content><![CDATA[<h4 id="flex-弹性布局"><a href="#flex-弹性布局" class="headerlink" title="flex: 弹性布局"></a>flex: 弹性布局</h4><p>采用flex布局的元素称为flex容器, 它所有的子元素自动成为容器成员</p>
<img src=".././../../static/flex.png">

<p>容器中默认存在两根轴：</p>
<p>水平的主轴(main axis)<br>垂直的主轴(cross axis)<br>项目默认沿主轴排列，单个项目占据的主轴空间叫 main size</p>
<p>容器的属性:</p>
<ol>
<li><p style="color: red;">flex-direction</p>

<p>决定主轴的方向：row | row-reverse | column | column-reverse;</p>
<img align="center" src="../../../static/flexdirection.png">
row: 主轴为水平方向，起点在左端
row-reverse: 主轴为水平方向，起点在右端。
column:主轴为垂直方向，起点在上沿
column-reverse:主轴为垂直方向，起点在下沿
</li>
<li><p style="color:red;">flex-wrap</p>

<p>决定主轴方向换行规则：nowrap | wrap | wrap-reverse;</p>
<img align="center" src="../../../static/flexwrap.png">

<p>nowrap: 不换行<br>wrap:  换行，第一行在上方。<br>wrap-reverse: 换行，第一行在下方。</p>
</li>
<li><p style="color:red;">flex-flow</p>
flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。
</li>
<li><p style="color:red;">justify-content: 定义了项目在主轴上的对齐方式。(水平)</p>

</li>
</ol>
<p>取值： flex-start | flex-end | center | space-between | space-around;<br><img src="../../../static/flexjutify.png"/><br>flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center： 居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>
<ol start="5">
<li><p style="color: red;">align-items: 定义项目在交叉轴上如何对齐。</p>

</li>
</ol>
<p>取值: flex-start | flex-end | center | baseline | stretch<br><img src="../../../static/flexaligin.png"><br>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</p>
<ol start="6">
<li><p style="color:red;">align-content: 多根轴线在垂直方向上的对齐</p>

</li>
</ol>
<p>取值: flex-start | flex-end | center | space-between | space-around | stretch</p>
<img src="../../../static/flexaligncontent.png">

<p>flex-start: 与交叉轴的起点对齐<br>flex-end：与交叉轴的终点对齐<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>center：与交叉轴的中点对齐。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。</p>
<h4 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h4><ol>
<li>order: 项目的排列顺序。数值越小，排列越靠前，默认为0</li>
<li>flex-grow: 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li>
<li>flex-shrink: 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</li>
<li>flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间</li>
<li>flex: flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto -&gt;(flex: 1 = flex: 1 1 任意数字+任意长度单位)</li>
<li>align-self: 单个项目在垂直方向的对齐规则, 默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
        <tag>Flex</tag>
      </tags>
  </entry>
  <entry>
    <title>css深入之css的单位</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(10)-%E5%8D%95%E4%BD%8D/</url>
    <content><![CDATA[<h4 id="css中有哪些单位？，各单位之间有什么不同？"><a href="#css中有哪些单位？，各单位之间有什么不同？" class="headerlink" title="css中有哪些单位？，各单位之间有什么不同？"></a>css中有哪些单位？，各单位之间有什么不同？</h4><p>之前对这块只是也是一知半解，今天彻底来捋捋</p>
<ol>
<li><p>px: 固定像素，</p>
</li>
<li><p>em: 相对单位，相对于自身的fontsize或者父元素的fontsize值计算<br>缺点: 使用时需要知道相对元素的字体大小</p>
</li>
<li><p>rem: 相对于根元素字体大小进行布局</p>
</li>
</ol>
<p>分辨率: 设备尺寸 * 像素密度</p>
<p>物理像素： 分辨率大小</p>
<p>设备独立像素： 视觉窗口大小</p>
<p>设备像素比： 物理像素和设备像素之间的关系</p>
<p>设备像素比 = 物理像素 / 设备像素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 将可视区域宽度分为10分，每一份占比width / 10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adportRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"> <span class="keyword">return</span> width / <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> docEl = win.document.documentElement;</span><br><span class="line"> <span class="keyword">const</span> resiezeEvt = <span class="string">&#x27;orientationchange&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">&#x27;orientationchange&#x27;</span> : <span class="string">&#x27;resize&#x27;</span>;</span><br><span class="line"> <span class="keyword">const</span> refreshRem = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">const</span> clientWidth = win.innerWidth || doc.documentElement.clientWidth || doc.body.clientWidth;</span><br><span class="line">     <span class="built_in">console</span>.log(clientWidth)</span><br><span class="line">     <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">     <span class="keyword">let</span> fz;</span><br><span class="line">     <span class="keyword">const</span> width = clientWidth;</span><br><span class="line">     fz = <span class="number">16</span> * width / <span class="number">375</span>;</span><br><span class="line">     docEl.style.fontSize = fz + <span class="string">&#x27;px&#x27;</span>;<span class="comment">//这样每一份也是16px,即1rem=16px</span></span><br><span class="line">   &#125;;</span><br><span class="line"> <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">   win.addEventListener(resizeEvt, refreshRem, <span class="literal">false</span>);</span><br><span class="line">   doc.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, refreshRem, <span class="literal">false</span>);</span><br><span class="line">   refreshRem();</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>vw/vh: 视图宽度的1/100, 视图高度的1/100</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> viewPortHeight = <span class="number">900</span></span><br><span class="line"><span class="keyword">const</span> vh = <span class="number">900</span> * <span class="number">1</span>/<span class="number">100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> viewPortWidth = <span class="number">1</span>/ <span class="number">100</span> </span><br><span class="line"><span class="keyword">const</span> vw  = <span class="number">750</span> * <span class="number">1</span>/<span class="number">100</span></span><br></pre></td></tr></table></figure>

<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ol>
<li><p>rem和px的区别？<br>rem: 是一种弹性布局, 相对于根元素的字体大小<br>px: 是相对长度单位，相对物是屏幕分辨率</p>
</li>
<li><p>移动端适配有那几种方案？<br>meta-viewport: 动态设置缩放比例<br>rem：动态设置rem的值<br>媒体查询</p>
</li>
<li><p>怎样解决1px的问题？<br>设备像素比(dpr)为2的话, 设置border： 0.5px<br>box-shadow: box-shadow: inset 0px -1px 1px -1px #c8c7cc;<br>伪类 + transform 实现</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本加载方式</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(19)-%E8%84%9A%E6%9C%AC%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="JS脚本加载，defer和async的区别"><a href="#JS脚本加载，defer和async的区别" class="headerlink" title="JS脚本加载，defer和async的区别"></a>JS脚本加载，defer和async的区别</h3><p>在html页面使用js通常有两种方式：</p>
<ol>
<li>内联js</li>
<li>外联脚本</li>
</ol>
<p>今天主要看一下使用外联脚本模式下defer 和 async 的 区别</p>
<h5 id="defer-立即加载但是延迟执行并且是有一定的顺序（效果更加类似于将脚本放在body元素之后的效果）"><a href="#defer-立即加载但是延迟执行并且是有一定的顺序（效果更加类似于将脚本放在body元素之后的效果）" class="headerlink" title="defer: 立即加载但是延迟执行并且是有一定的顺序（效果更加类似于将脚本放在body元素之后的效果）"></a>defer: 立即加载但是延迟执行并且是有一定的顺序（效果更加类似于将脚本放在body元素之后的效果）</h5><h5 id="async-异步加载不能保证执行的顺序"><a href="#async-异步加载不能保证执行的顺序" class="headerlink" title="async: 异步加载不能保证执行的顺序"></a>async: 异步加载不能保证执行的顺序</h5>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>函数柯里化</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(18)-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
    <content><![CDATA[<h5 id="什么是函数柯里化？"><a href="#什么是函数柯里化？" class="headerlink" title="什么是函数柯里化？"></a>什么是函数柯里化？</h5><p>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数（多参数函数转化成一系列使用一个参数的函数的技术）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> params = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (params.length &gt;= fn.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> fn(...args)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">args</span>) =&gt;</span> curry(fn, ...params, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y, z) <span class="comment">// 1,2,3</span></span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(curry(add1, <span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="为什么要函数柯里化？"><a href="#为什么要函数柯里化？" class="headerlink" title="为什么要函数柯里化？"></a>为什么要函数柯里化？</h5><p>参数复用： 利用闭包内存中记录上一个函数的参数<br>提前返回： 避免部分逻辑重复执行<br>延迟执行： 每次调用之后并不是真正的执行</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>bable深入系列1</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%B7%A5%E7%A8%8B%E5%8C%96/bable%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97(1)/</url>
    <content><![CDATA[<h4 id="Babel是什么？"><a href="#Babel是什么？" class="headerlink" title="Babel是什么？"></a>Babel是什么？</h4><p>将ES5+的语法向后兼容转换成js语法，以便运行在老版或者旧版浏览器中</p>
<h4 id="Babel能做什么？"><a href="#Babel能做什么？" class="headerlink" title="Babel能做什么？"></a>Babel能做什么？</h4><ol>
<li>语法转化</li>
<li>源码转化</li>
</ol>
]]></content>
      <categories>
        <category>Babel</category>
      </categories>
      <tags>
        <tag>Babel</tag>
      </tags>
  </entry>
  <entry>
    <title>图片优化</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%80%A7%E8%83%BD/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h5 id="懒加载-只加载可视区域内的图片"><a href="#懒加载-只加载可视区域内的图片" class="headerlink" title="懒加载: 只加载可视区域内的图片"></a>懒加载: 只加载可视区域内的图片</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadelayer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到可视区域内的高度</span></span><br><span class="line">  <span class="keyword">const</span> viewHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">  <span class="comment">// 拿到所有的图片</span></span><br><span class="line">  <span class="keyword">const</span> images = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line"> <span class="keyword">const</span> images = <span class="built_in">Array</span>.from(images)</span><br><span class="line"> <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i =<span class="number">0</span> ; i&lt;= images.length-<span class="number">1</span>; i++</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> img = images[i]</span><br><span class="line">  <span class="comment">// 用可视区域高度减去元素顶部距离可视区域顶部的高度</span></span><br><span class="line">  <span class="keyword">let</span> distance = viewHeight - imgs.getBoundingClientRect().top;</span><br><span class="line">  <span class="keyword">if</span> (distance &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 给元素写入真实的src，展示图片</span></span><br><span class="line">        imgs[i].src = imgs[i].getAttribute(<span class="string">&quot;data-src&quot;</span>);</span><br><span class="line">        <span class="comment">// 前i张图片已经加载完毕，下次从第i+1张开始检查是否露出</span></span><br><span class="line">        num = i + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="图片预加载"><a href="#图片预加载" class="headerlink" title="图片预加载"></a>图片预加载</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">proloadImage</span>(<span class="params">images</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> preloadImage = []</span><br><span class="line">    <span class="keyword">if</span> (images.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> preloadImage</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; images.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> imageItem = <span class="keyword">new</span> Image()</span><br><span class="line">        imageItem.src = images[i]</span><br><span class="line">        <span class="keyword">if</span> (imageItem.complete) &#123;</span><br><span class="line">            preloadImage.push(imageItem)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            imageItem.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                proloadImage.push(imageItem)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器深入之跨页通信</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B7%B1%E5%85%A5%E4%B9%8B(1)-%E8%B7%A8%E9%A1%B5%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h4 id="同源-域名，协议，端口相同"><a href="#同源-域名，协议，端口相同" class="headerlink" title="同源: 域名，协议，端口相同"></a>同源: 域名，协议，端口相同</h4><h4 id="跨域-指跨域名的访问"><a href="#跨域-指跨域名的访问" class="headerlink" title="跨域: 指跨域名的访问"></a>跨域: 指跨域名的访问</h4><h5 id="同源页之间的通信"><a href="#同源页之间的通信" class="headerlink" title="同源页之间的通信"></a>同源页之间的通信</h5><h6 id="BroadcastChannel"><a href="#BroadcastChannel" class="headerlink" title="BroadcastChannel"></a>BroadcastChannel</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接到广播频道</span></span><br><span class="line"><span class="keyword">var</span> bc = <span class="keyword">new</span> BroadcastChannel(<span class="string">&#x27;test_channel&#x27;</span>);</span><br><span class="line"><span class="comment">// 发送简单消息的示例</span></span><br><span class="line">bc.postMessage(<span class="string">&#x27;This is a test message.&#x27;</span>);</span><br><span class="line"><span class="comment">// 简单示例，用于将事件打印到控制台</span></span><br><span class="line">bc.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123; <span class="built_in">console</span>.log(ev); &#125;</span><br></pre></td></tr></table></figure>

<h6 id=""><a href="#" class="headerlink" title=""></a></h6>]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS深入之性能优化</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(9)-css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h4 id="css性能优化的方式"><a href="#css性能优化的方式" class="headerlink" title="css性能优化的方式"></a>css性能优化的方式</h4><ol>
<li>合并css文件, 如果页面加载10个1kb的css文件，也比加载一个100kb的css快</li>
<li>减少css的嵌套，最好不要嵌套三层以上</li>
<li>不要在id选择器下面进行嵌套，id选择器本就是层级最高</li>
<li>建立公共样式，吧相同样式抽取出来</li>
<li>gzip压缩</li>
<li>避免过分的重排</li>
<li>css动画</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文件</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(8)-css3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CSS深入之双飞翼布局</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(7)-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h4 id="圣杯布局-左右固定中间自适应"><a href="#圣杯布局-左右固定中间自适应" class="headerlink" title="圣杯布局: 左右固定中间自适应"></a>圣杯布局: 左右固定中间自适应</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">      height: 100px;</span><br><span class="line">      line-height: 100px;</span><br><span class="line">      background-color: green;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-size: 30px;</span><br><span class="line">      font-weight: bolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">      background-color: goldenrod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">      padding: 0 220px 0 200px;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      position: relative;</span><br><span class="line">      float: left;</span><br><span class="line">      min-height: 130px;</span><br><span class="line">      word-break: break-all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      margin-left: -100%;</span><br><span class="line">      left: -200px;</span><br><span class="line">      width: 200px;</span><br><span class="line">      background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      margin-left: -220px;</span><br><span class="line">      right: -220px;</span><br><span class="line">      width: 220px;</span><br><span class="line">      background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">      width: 100%;</span><br><span class="line">      background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">        middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">        middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">        middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">        middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">        middlemiddlemiddlemiddlemiddle</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        leftleftleftleftleftleftleftleftleftleftleftleft</span><br><span class="line">        leftleftleftleftleftleftleftleftleftleftleftleft</span><br><span class="line">        leftleftleftleftleftleftleftleftleftleftleftleft</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        rightrightrightrightrightrightrightrightrightright</span><br><span class="line">        rightrightrightrightrightrightrightrightrightright</span><br><span class="line">        rightrightrightrightrightrightright</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="双飞翼布局：-左右固定中间自适应"><a href="#双飞翼布局：-左右固定中间自适应" class="headerlink" title="双飞翼布局： 左右固定中间自适应"></a>双飞翼布局： 左右固定中间自适应</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">      height: 100px;</span><br><span class="line">      line-height: 100px;</span><br><span class="line">      background-color: green;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-size: 30px;</span><br><span class="line">      font-weight: bolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">      background-color: goldenrod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">      overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      float: left;</span><br><span class="line">      min-height: 130px;</span><br><span class="line">      word-break: break-all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      margin-left: -100%;</span><br><span class="line">      width: 200px;</span><br><span class="line">      background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">      margin-left: -220px;</span><br><span class="line">      width: 220px;</span><br><span class="line">      background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">      margin: 0 220px 0 200px;</span><br><span class="line">      min-height: 130px;</span><br><span class="line">      background: blue;</span><br><span class="line">      word-break: break-all;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">          middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">          middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">          middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">          middlemiddlemiddlemiddlemiddlemiddlemiddlemiddle</span><br><span class="line">          middlemiddlemiddlemiddlemiddle</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        leftleftleftleftleftleftleftleftleftleftleftleft</span><br><span class="line">        leftleftleftleftleftleftleftleftleftleftleftleft</span><br><span class="line">        leftleftleftleftleftleftleftleftleftleftleftleft</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        rightrightrightrightrightrightrightrightrightright</span><br><span class="line">        rightrightrightrightrightrightrightrightrightright</span><br><span class="line">        rightrightrightrightrightrightright</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>css深入之H5适配方案</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(6)-H5%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h6 id="设备像素比-物理像素-设备独立像素"><a href="#设备像素比-物理像素-设备独立像素" class="headerlink" title="设备像素比 = 物理像素 / 设备独立像素"></a>设备像素比 = 物理像素 / 设备独立像素</h6><h6 id="1px边框问题"><a href="#1px边框问题" class="headerlink" title="1px边框问题"></a>1px边框问题</h6><p>原因： css中1px是逻辑像素，导致逻辑像素根据设备像素比去映射到设备上就为 2px或者3px，由于每个设备的屏幕尺寸不一样，就导致每个物理像素渲染出来的大小也不同</p>
<p>解决方案:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">-webkit-transform-origin</span>:<span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###### <span class="selector-tag">viewport</span>： 用于显示网页部分的区域</span><br><span class="line"></span><br><span class="line">```<span class="selector-tag">html</span></span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=no, minimum-sacle=1, maximum-scale=1&quot; &gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>定义视口的宽度，以像素为单位</td>
<td>正整数 或者 设备宽度 device-width</td>
</tr>
<tr>
<td>height</td>
<td>定义视口的高度，以像素为单位</td>
<td>正整数 或者 设备高度 device-height</td>
</tr>
<tr>
<td>initial-scale</td>
<td>定义网页初始缩放值</td>
<td>整数或者小数， 小数位缩小，反之放大</td>
</tr>
<tr>
<td>maximum-scale</td>
<td>定义缩放最大值</td>
<td>整数 或者 小数</td>
</tr>
<tr>
<td>minimum-scale</td>
<td>定义缩放最小值</td>
<td>整数 或者 小数</td>
</tr>
<tr>
<td>user-scalable</td>
<td>定义用户是否可以缩放</td>
<td>yes or no</td>
</tr>
</tbody></table>
<h6 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h6><h6 id="方案一：-rem，-rem是以HTML元素的fontSize为比例"><a href="#方案一：-rem，-rem是以HTML元素的fontSize为比例" class="headerlink" title="方案一： rem， rem是以HTML元素的fontSize为比例"></a>方案一： rem， rem是以HTML元素的fontSize为比例</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	width: 10rem; // 10 * 16</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>怎么设计html元素的fontsize值？</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">deviceWidth = deviceWidth &lt; <span class="number">320</span> ? <span class="number">320</span> : deviceWidth &gt; <span class="number">640</span> ? <span class="number">640</span> : deviceWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = deviceWidth / <span class="number">7.5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>搭配postcss-pxtorem将自动将px值转化为rem值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">	lintOnSave: <span class="literal">true</span>,</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">&#x27;postcss-pxtorem&#x27;</span>)(&#123;</span><br><span class="line">            rootValue : <span class="number">16</span>, <span class="comment">//（数字，函数） 根元素字体大小</span></span><br><span class="line">            unitPrecision: <span class="number">5</span>, <span class="comment">//（数字）允许REM单位增长的十进制数字</span></span><br><span class="line">            replace: <span class="literal">true</span>, <span class="comment">// （布尔值）替换包含rems的规则，而不添加后备</span></span><br><span class="line">            mediaQuery: <span class="literal">false</span>, <span class="comment">// （布尔值）允许在媒体查询中转换px</span></span><br><span class="line">            minPixelValue: <span class="number">0</span>, <span class="comment">// （数字）设置要替换的最小像素值</span></span><br><span class="line">            selectorBlackList  : [], <span class="comment">// 忽略转换正则匹配项</span></span><br><span class="line">            propList   : [<span class="string">&#x27;*&#x27;</span>], <span class="comment">// 可以从px转换为rem的属性，匹配正则</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/i</span> <span class="comment">// （字符串，正则表达式，函数）要忽略并保留为px的文件路径</span></span><br><span class="line">          &#125;),</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docEl.style.fontSize = <span class="number">10</span> * (clientWidth  / <span class="number">750</span>)  + <span class="string">&#x27;px&#x27;</span></span><br><span class="line"><span class="comment">// docEl =&gt; 是 元素html</span></span><br><span class="line"><span class="comment">// clientWidth =&gt; 是当前窗口的宽度</span></span><br><span class="line"><span class="comment">// 750 =&gt; 是 设计稿的宽度</span></span><br></pre></td></tr></table></figure>

<h6 id="方案二：-vw-vh-将页面分为100份，-1vw-device-width-100"><a href="#方案二：-vw-vh-将页面分为100份，-1vw-device-width-100" class="headerlink" title="方案二： vw / vh, 将页面分为100份， 1vw = device-width / 100"></a>方案二： vw / vh, 将页面分为100份， 1vw = device-width / 100</h6><p>搭配 postcss-px-to-viewport 将自动将px值专为你 vw/ vh</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> plugins: &#123;</span><br><span class="line">  autoprefixer: &#123;&#125;, <span class="comment">// 用来给不同的浏览器自动添加相应前缀，如-webkit-，-moz-等等</span></span><br><span class="line">	<span class="string">&#x27;postcss-px-to-viewport&#x27;</span>: &#123;</span><br><span class="line">		unitToConvert: <span class="string">&#x27;px&#x27;</span>, <span class="comment">// 要转化的单位</span></span><br><span class="line">		viewportWidth: <span class="number">750</span>, <span class="comment">// UI设计稿的宽度</span></span><br><span class="line">		unitPrecision: <span class="number">6</span>, <span class="comment">// 转换后的精度，即小数点位数</span></span><br><span class="line">		propList: [<span class="string">&#x27;*&#x27;</span>], <span class="comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span></span><br><span class="line">		viewportUnit: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">// 指定需要转换成的视窗单位，默认vw</span></span><br><span class="line">		fontViewportUnit: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">// 指定字体需要转换成的视窗单位，默认vw</span></span><br><span class="line">		selectorBlackList: [<span class="string">&#x27;wrap&#x27;</span>], <span class="comment">// 指定不转换为视窗单位的类名，</span></span><br><span class="line">		minPixelValue: <span class="number">1</span>, <span class="comment">// 默认值1，小于或等于1px则不进行转换</span></span><br><span class="line">		mediaQuery: <span class="literal">true</span>, <span class="comment">// 是否在媒体查询的css代码中也进行转换，默认false</span></span><br><span class="line">		replace: <span class="literal">true</span>, <span class="comment">// 是否转换后直接更换属性值</span></span><br><span class="line">		exclude: [<span class="regexp">/node_modules/</span>], <span class="comment">// 设置忽略文件，用正则做目录名匹配</span></span><br><span class="line">		landscape: <span class="literal">false</span>, <span class="comment">// 是否处理横屏情况</span></span><br><span class="line">	&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> calcCssValue = <span class="function"><span class="params">value</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;(value / <span class="number">375</span>) * <span class="number">100</span>&#125;</span>vw`</span></span><br></pre></td></tr></table></figure>

<h6 id="方案三：-百分比布局"><a href="#方案三：-百分比布局" class="headerlink" title="方案三： 百分比布局"></a>方案三： 百分比布局</h6><p>在 css 中，我们可以使用百分比来实现布局，但是需要特定宽度时，这个百分比的计算对开发者来说并不友好，且元素百分比参考的对象为父元素，元素嵌套较深时会有问题</p>
<h6 id="方案四：-响应式布局"><a href="#方案四：-响应式布局" class="headerlink" title="方案四： 响应式布局"></a>方案四： 响应式布局</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 针对大屏产品 ipad pro */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方案五：flex-rem"><a href="#方案五：flex-rem" class="headerlink" title="方案五：flex + rem"></a>方案五：flex + rem</h6>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文件</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(5)-grid/</url>
    <content><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">参考资料</a></p>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="容器和项目-采用玩个布局的区域成为容器-容器内部采用网格定位的子元素称为项目-item"><a href="#容器和项目-采用玩个布局的区域成为容器-容器内部采用网格定位的子元素称为项目-item" class="headerlink" title="容器和项目: 采用玩个布局的区域成为容器; 容器内部采用网格定位的子元素称为项目(item)"></a>容器和项目: 采用玩个布局的区域成为容器; 容器内部采用网格定位的子元素称为项目(item)</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最外层的div为容器，内存的是哪个div元素是项目 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="行和列：-容器里面的水平区域成为行-row-垂直区域成为列-column"><a href="#行和列：-容器里面的水平区域成为行-row-垂直区域成为列-column" class="headerlink" title="行和列： 容器里面的水平区域成为行(row), 垂直区域成为列(column)"></a>行和列： 容器里面的水平区域成为行(row), 垂直区域成为列(column)</h5><h5 id="单元格：-行和列的交叉区域成为单元格-cell"><a href="#单元格：-行和列的交叉区域成为单元格-cell" class="headerlink" title="单元格： 行和列的交叉区域成为单元格(cell)"></a>单元格： 行和列的交叉区域成为单元格(cell)</h5><p>正常情况下: n行和m列会产生 n * m 个单元格，比如3行3列会产生9个单元格</p>
<h5 id="网格线：-划分网格的线成为网格线"><a href="#网格线：-划分网格的线成为网格线" class="headerlink" title="网格线： 划分网格的线成为网格线"></a>网格线： 划分网格的线成为网格线</h5><p>正常情况下： n行有n+1根水平网格线； m列有m+1根垂直网格线</p>
<h4 id="容器属性：-定义在容器上面成为容器属性；-定义在项目上面成为项目属性"><a href="#容器属性：-定义在容器上面成为容器属性；-定义在项目上面成为项目属性" class="headerlink" title="容器属性： 定义在容器上面成为容器属性； 定义在项目上面成为项目属性"></a>容器属性： 定义在容器上面成为容器属性； 定义在项目上面成为项目属性</h4><h5 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h5><ol>
<li>display: grid; 指定一个容器采用网格布局</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认情况下，容器元素都是块级元素，但是也可以设置为行内元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p style="color:red;"> 设置为网格布局以后，容器子元素的 float， display： inline-block； display： table-cell， vertical-align 和 column-*设置都将失效

<ol start="2">
<li>grid-template-columns, grid-template-rows 属性</li>
</ol>
<p>容器制定了网格布局以后，接着就要划分行和列</p>
<p>grid-template-columns : 定义每一列列宽<br>grid-template-rows: 定义每一行的行高</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: grid;</span><br><span class="line"> grid-template-columns: 100px 100px 100px; // 还可以使用百分比</span><br><span class="line"> <span class="selector-tag">grid-template-rows</span>: 100<span class="selector-tag">px</span> 100<span class="selector-tag">px</span> 100<span class="selector-tag">px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码指定了一个三行三列的网格，列宽和行高都是100px;</p>
<ul>
<li><p>2-1: repeat(): 接收两个参数，第一个参数是重复的次数， 第二个参数是所要重复的值</p>
<p>重复写同样的值非常码放，尤其网格很多时</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: grid;</span><br><span class="line"> <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line"> <span class="attribute">grid-template-rows</span>: <span class="built_in">repear</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>auto-fill: 自动填充</p>
<p>有时，单元格的大小是固定的，但是容器的大小不确定，如果希望每一行（或每一列）容纳尽可能多的单元格这时可以使用auto-fill关键字表示自动填充</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; </span><br><span class="line"> <span class="attribute">display</span>: grid;</span><br><span class="line"> <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>2-2: fr: 表示比例关系</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: grid;</span><br><span class="line"> <span class="attribute">grid-template-columns</span>:<span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fr 可以与绝对长度的单位结合使用，这时会非常方便</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: grid;</span><br><span class="line"> grid-template-columns: 150px 1fr 2fr; // 第一列的宽度为150像素， 第二列的宽度是第三列的一半</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>2-3: minmax(): 产生一个长度范围，表示长度就在这个范围之中，它接收两个参数，分别为最大值和最小值</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">grid-template-columns: 1fr 1fr minmax(100px, 1fr) // 表示列宽不小于100px，不大于1fr</span><br></pre></td></tr></table></figure>

<ul>
<li>2-4: auto: 表示由浏览器自己决定长度</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">grid-template-columns: 100px auto 100px; // 第二列的宽度基本上等于该列单元格的最大宽度</span><br></pre></td></tr></table></figure>

<ul>
<li><p>2-5: 网格线的名称: 使用方括号指定每一根网格线的名字，方便引用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: grid;</span><br><span class="line"> <span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4];</span><br><span class="line"> <span class="attribute">gird-template-rows</span>: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3] auto [r4];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>grid-row-gap: 行与行之间的间隔(行间距)</li>
<li>grid-colunm-gap: 列与列之间的间隔(列间距)</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">grid-row-gap</span>: <span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">grid-colunm-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>grid-gap: 是行间距和列间距的合并简写形式（如果省略第二个值，浏览器认为第二个值等于第一个值）</p>
</li>
<li><p>grid-template-areas: 一个区域由单个或者多个单元格组成</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: grid;</span><br><span class="line"> <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">10px</span> <span class="number">100px</span>;</span><br><span class="line"> grid-template-areas: &#x27;a b c&#x27; &#x27;d e f&#x27; &#x27;g h i&#x27;; // 上面代码先划分出9个单元格，然后将其定名为a到i的九个区域， 分别对应这9个单元格</span><br><span class="line"> // 如果某些区域不需要利用，则使用 “点”（.） 表示</span><br><span class="line"> // grid-template-areas: &#x27;a . c&#x27; &#x27;d . f&#x27; &#x27;g . i&#x27; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>grid-auto-flow: 划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格， 先行后列（即先填满第一行在开始放入第二行</p>
<p>取值： row | column  // 想行后列或者先列后行</p>
</li>
<li><p>justity-items: 设置单元格内容的水平位置， align-items: 单元格的内容的垂直位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">justity-items</span>: start | end | center | stretch</span><br><span class="line"> align-items: start | end | center | stretch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>place-items: 是 align-items和justity-items属性的合并简写形式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">place-items</span>: center center //（如果省略第二个值，浏览器默认与第一个值相等）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>justify-content： 整个内容区域在容器里面的水平位置; align-items: 整个内容区域的垂直位置</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"> <span class="attribute">justiyy-content</span>: start | end | center | stretch | space-around | space-between | space-evenly</span><br><span class="line"> align-conetent: start | end | center | stretch | space-around | space-between | space-evenly</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>place-content： 是这两个值的简称</p>
<ol start="10">
<li><p>grid-auto-columns 和 grid-auto-rows: 浏览器自动创建多余的网格的列宽和行高，写法与 grid-template-columns和grid-template-rows相同.</p>
<p>如果不指定这两个属性，浏览器完全根据单元格内容的大小决定新增的网格的列宽和行高</p>
<p>使用场景： 只有3列，但是某一个项目指定在第5行</p>
</li>
<li><p>grid-template</p>
<p>grid-template: 是 grid-template-columns 、 grid-template-rows、 grid-template-areas这三个属性的合并简写形式</p>
</li>
<li><p>grid</p>
<p>grid是 grid-template-rows 、 grid-template-columns、 grid-template-areas、 grid-auto-rows、 grid-auto-columns、 grid-auto-flow这6个属性的合并简写形式</p>
</li>
</ol>
<h5 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h5><ol>
<li><p>定位单元格位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。</span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line"> <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line"> <span class="attribute">grid-column-end</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>grid-column-start: 单元格的开始网格线<br>grid-column-end: 单元格结束网格线<br>grid-row-start: 单元格行的开始网格线位置<br>grid-row-end: 单元格行的结束网格线位置</p>
<p>span: 表示”跨越”，即左右边框（上下边框）之间跨越多少个网格</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-class">.item-1</span> &#123;</span><br><span class="line"> <span class="attribute">grid-column-start</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>grid-column 属性， grid-row 属性</p>
<p>grid-column: 是 grid-column-start 和 grid-column-end的合并简写形式</p>
<p>grid-row: 是grid-row-start 和 grid-row-end的合并简写形式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>grid-area: 指定项目放在哪一个区域</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line"> grid-areas: e; // 1号项目位于e区域</span><br><span class="line"> // grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>justify-self / align-self / place-self</p>
<p>justify-self: 单元格内容的水平位置</p>
<p>align-self: 单元格内容的垂直位置</p>
<p>place-self: <align-self> <justify-self>;</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS深入之position定位</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(4)-position/</url>
    <content><![CDATA[<h4 id="position中的值有哪些"><a href="#position中的值有哪些" class="headerlink" title="position中的值有哪些"></a>position中的值有哪些</h4><ol>
<li>static: 元素默认定位方式</li>
<li>relative:相对于正常文档流中的位置定位</li>
<li>absolute: 相对于父元素中定位方式不为 static 元素定位</li>
<li>fixed： 相对于窗口定位</li>
<li>sticky： 它基本上是相对位置和固定位置的混合体，它允许被定位的元素表现得像相对定位一样，直到它滚动到某个阈值点（例如，从视口顶部起1​​0像素）为止，此后它就变得固定了</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>css深入之bfc</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(3)-bfc/</url>
    <content><![CDATA[<h4 id="block-level-box"><a href="#block-level-box" class="headerlink" title="block-level box"></a>block-level box</h4><p>盒子模型: margin + padding + border + content</p>
<p>排列规则:</p>
<ol>
<li>块状元素排斥其他元素与其位于同一行</li>
<li>块状元素具有流体特性(水平方向自动填满外部容器)</li>
</ol>
<h4 id="Formatting-context"><a href="#Formatting-context" class="headerlink" title="Formatting context"></a>Formatting context</h4><p>在页面中的一块渲染区域，并且有自己的渲染规则</p>
<h4 id="bfc-Block-formatting-context-决定了元素如何兑取内容进行布局以及和其他元素的关系和相互作用"><a href="#bfc-Block-formatting-context-决定了元素如何兑取内容进行布局以及和其他元素的关系和相互作用" class="headerlink" title="bfc(Block formatting context): 决定了元素如何兑取内容进行布局以及和其他元素的关系和相互作用"></a>bfc(Block formatting context): 决定了元素如何兑取内容进行布局以及和其他元素的关系和相互作用</h4><p>简单理解是： BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素</p>
<h4 id="bfc的布局规则"><a href="#bfc的布局规则" class="headerlink" title="bfc的布局规则"></a>bfc的布局规则</h4><ol>
<li>内部的box会在垂直方向上一个接一个的排列</li>
<li>box在垂直方向上的距离由margin决定， 属于同一个BFC的两个相邻Box的margin会发生重叠</li>
<li>每个元素的margin-box的左边， 与包含块border-box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
<li>BFC的区域不会与float box重叠</li>
<li>计算BFC的高度时，浮动元素也参与计算</li>
</ol>
<h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><ol>
<li>HTML元素</li>
<li>float值不为none</li>
<li>overflow的值不为visible</li>
<li>display的值不为inline-block、 table-cell、table-caption</li>
<li>position的值为absolute 或者 fixed</li>
</ol>
<h4 id="自适应的两栏布局"><a href="#自适应的两栏布局" class="headerlink" title="自适应的两栏布局"></a>自适应的两栏布局</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.aside</span> &#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 150px;</span><br><span class="line">        float: left;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#f66</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#fcc</span>;</span></span><br><span class="line">     overflow: hidden; // 触发bfc的生成，然后根据bfc的规则bfc区域不和浮动区域重叠</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.par</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fcc</span>;</span></span><br><span class="line">        width: 300px;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f66</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        height: 100px;</span><br><span class="line">        float: left;</span><br><span class="line">				overflow: hidden; // bfc规则计算BFC的高度时，浮动元素也参与计算,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;par&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="margin重叠"><a href="#margin重叠" class="headerlink" title="margin重叠"></a>margin重叠</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">        overflow: hidden; // 通过触发生成bfc， 避免同一个bfc内相邻元素box会发生margin重叠,当兄弟盒子的外边距不一样时，将以最大的那个外边距为准。</span><br><span class="line">    &#125;</span><br><span class="line">    p &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#f55</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#fcc</span>;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        line-height: 100px;</span><br><span class="line"><span class="css">        <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">        margin: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS深入之css选择器</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-css%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h4 id="CSS选择器的类型"><a href="#CSS选择器的类型" class="headerlink" title="CSS选择器的类型"></a>CSS选择器的类型</h4><ol>
<li>通用选择器： *</li>
<li>元素选择器： elementName</li>
<li>类选择器： .className</li>
<li>id选择器： # idName</li>
<li>属性选择器： input[type=”text”]</li>
<li>子类选择器： div &gt; li</li>
<li>一般兄弟元素： div ~ span</li>
<li>紧邻兄弟元素： div + span</li>
<li>后代组合： div span</li>
<li>伪类</li>
</ol>
<h4 id="css的优先级算法"><a href="#css的优先级算法" class="headerlink" title="css的优先级算法"></a>css的优先级算法</h4><ol>
<li>!important</li>
<li>css内联样式： 权值为 1000</li>
<li>id选择器： 权重为100</li>
<li>类选择器 / 伪类 / 属性选择器： 权重为10</li>
<li>代表元素选择器 / 伪元素选择器: 权重为1</li>
</ol>
<p>!important&gt;行内样式&gt;ID选择器 &gt; 类选择器 | 属性选择器 | 伪类选择器 &gt; 元素选择器</p>
<p>应用规则：</p>
<ol>
<li>行内样式覆盖外部样式， 但是会被！import覆盖</li>
<li>同一个元素，两个权重不同， 权值高的css规则生效</li>
<li>同一元素同一权重, 以后面出现的选择器为最后规则</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS盒子模型</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/css/css%E6%B7%B1%E5%85%A5%E4%B9%8B(1)-%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h4 id="什么是盒子模型？"><a href="#什么是盒子模型？" class="headerlink" title="什么是盒子模型？"></a>什么是盒子模型？</h4><p>页面所呈现的效果就是一个一个盒子堆砌而成<br>盒模型由margin + padding + border + content组成</p>
<h4 id="CSS的盒模型分类"><a href="#CSS的盒模型分类" class="headerlink" title="CSS的盒模型分类"></a>CSS的盒模型分类</h4><h6 id="标准盒模型：-content-content"><a href="#标准盒模型：-content-content" class="headerlink" title="标准盒模型： content = content"></a>标准盒模型： content = content</h6><img src="../../../static/css/标准盒模型.webp">

<p>如何设置为标准盒模型？</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:content-box</span>;</span><br></pre></td></tr></table></figure>
<h6 id="IE-盒模型：-content-content-border-padding"><a href="#IE-盒模型：-content-content-border-padding" class="headerlink" title="IE 盒模型： content = content + border + padding"></a>IE 盒模型： content = content + border + padding</h6><img src="../../../static/css/标准盒模型.webp">

<p>如何设置为IE盒模型？</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span>;</span><br></pre></td></tr></table></figure>

 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dom.style.width/height</span><br><span class="line">dom.currentStyle.width/height  (ie支持)</span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(dom).width/height;</span><br><span class="line">dom.getBoundingClientRect().width/height;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之genarator</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(17)-genarator/</url>
    <content><![CDATA[<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。</p>
<p>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</p>
<p>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>
<p>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，<code>function</code>关键字与函数名之间有一个星号；<br>二是，函数体内部使用<code>yield</code>表达式，定义不同的内部状态（<code>yield</code>在英语里的意思就是“产出”）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;ending&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个 Generator 函数<code>helloWorldGenerator</code>，它内部有两个<code>yield</code>表达式（<code>hello</code>和<code>world</code>），即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p>
<p>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。</p>
<p>下一步，必须调用遍历器对象的<code>next</code>方法，使得指针移向下一个状态。也就是说，每次调用<code>next</code>方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个<code>yield</code>表达式（或<code>return</code>语句）为止。换言之，Generator 函数是分段执行的，<code>yield</code>表达式是暂停执行的标记，而<code>next</code>方法可以恢复执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<p>上面代码一共调用了四次<code>next</code>方法。</p>
<p>第一次调用，Generator 函数开始执行，直到遇到第一个<code>yield</code>表达式为止。<code>next</code>方法返回一个对象，它的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>hello</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>
<p>第二次调用，Generator 函数从上次<code>yield</code>表达式停下的地方，一直执行到下一个<code>yield</code>表达式。<code>next</code>方法返回的对象的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>world</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>
<p>第三次调用，Generator 函数从上次<code>yield</code>表达式停下的地方，一直执行到<code>return</code>语句（如果没有<code>return</code>语句，就执行到函数结束）。<code>next</code>方法返回的对象的<code>value</code>属性，就是紧跟在<code>return</code>语句后面的表达式的值（如果没有<code>return</code>语句，则<code>value</code>属性的值为<code>undefined</code>），<code>done</code>属性的值<code>true</code>，表示遍历已经结束。</p>
<p>第四次调用，此时 Generator 函数已经运行完毕，<code>next</code>方法返回对象的<code>value</code>属性为<code>undefined</code>，<code>done</code>属性为<code>true</code>。以后再调用<code>next</code>方法，返回的都是这个值。</p>
<p>总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的<code>next</code>方法，就会返回一个有着<code>value</code>和<code>done</code>两个属性的对象。<code>value</code>属性表示当前的内部状态的值，是<code>yield</code>表达式后面那个表达式的值；<code>done</code>属性是一个布尔值，表示是否遍历结束。</p>
<p>ES6 没有规定，<code>function</code>关键字与函数名之间的星号，写在哪个位置。这导致下面的写法都能通过。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br></pre></td></tr></table></figure>

<p>由于 Generator 函数仍然是普通函数，所以一般的写法是上面的第三种，即星号紧跟在<code>function</code>关键字后面。本书也采用这种写法。</p>
<h6 id="接下来我们深度剖析一下async-await和-genarator之间的关系"><a href="#接下来我们深度剖析一下async-await和-genarator之间的关系" class="headerlink" title="接下来我们深度剖析一下async/await和 genarator之间的关系"></a>接下来我们深度剖析一下async/await和 genarator之间的关系</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;data&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result =  <span class="keyword">await</span> b()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面一段代码是正常的async/await的用法，接下来我们看一下使用babel编译上面代码之后得到了什么</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncGeneratorStep</span>(<span class="params">gen, resolve, reject, _next, _throw, key, arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> info = gen[key](arg);</span><br><span class="line">        <span class="keyword">var</span> value = info.value;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (info.done) &#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(value).then(_next, _throw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_asyncToGenerator</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">            args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> gen = fn.apply(self, args);</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">_next</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">                asyncGeneratorStep(gen, resolve, reject, _next, _throw, <span class="string">&quot;next&quot;</span>, value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">_throw</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                asyncGeneratorStep(gen, resolve, reject, _next, _throw, <span class="string">&quot;throw&quot;</span>, err);</span><br><span class="line">            &#125;</span><br><span class="line">            _next(<span class="literal">undefined</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;data&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _a.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _a = _asyncToGenerator(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">yield</span> b();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _a.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此可见：</p>
<p>aysnc函数返回一个promise<br>在 async/await内部使用的是 promise的then回调一直触发next函数的调用， 直到遍历器内部done的值为true</p>
<p>async/await实质上 genarator和promise的语法糖</p>
<h4 id="为什么使用aysnc-await？"><a href="#为什么使用aysnc-await？" class="headerlink" title="为什么使用aysnc/await？"></a>为什么使用aysnc/await？</h4><p>promise的缺点：</p>
<ol>
<li>无法取消promise</li>
<li>对于promise的链式调用一直会返回promise</li>
<li>对于catch和then回调中的reject的错误处理</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之super</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(16)-super/</url>
    <content><![CDATA[<h4 id="super-用于访问和调用一个对象的父对象上的函数"><a href="#super-用于访问和调用一个对象的父对象上的函数" class="headerlink" title="super: 用于访问和调用一个对象的父对象上的函数"></a>super: 用于访问和调用一个对象的父对象上的函数</h4><h5 id="Object-getPrototypeOf-Object-setPrototypeOf-返回的是对象的隐士的原型对象-proto"><a href="#Object-getPrototypeOf-Object-setPrototypeOf-返回的是对象的隐士的原型对象-proto" class="headerlink" title="Object.getPrototypeOf / Object.setPrototypeOf: 返回的是对象的隐士的原型对象 proto"></a>Object.getPrototypeOf / Object.setPrototypeOf: 返回的是对象的隐士的原型对象 <strong>proto</strong></h5><h5 id="Object-create-方法创建一个新对象，使用现有的对象来提供新创建的对象的proto"><a href="#Object-create-方法创建一个新对象，使用现有的对象来提供新创建的对象的proto" class="headerlink" title="Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的proto"></a>Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong></h5><p>接下来我们看看ES6中super的调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  ES6代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们再来看看通过babel编译ES6为Es5的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * babel编译es6中的 class/ extends/super 为 es5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">&quot;function&quot;</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Super expression must either be null or a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">        <span class="title">constructor</span>: &#123;</span><br><span class="line">            value: subClass,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (superClass) _setPrototypeOf(subClass, superClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_setPrototypeOf</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">    _setPrototypeOf = <span class="built_in">Object</span>.setPrototypeOf || <span class="function"><span class="keyword">function</span> <span class="title">_setPrototypeOf</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">        o.__proto__ = p;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> _setPrototypeOf(o, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_createSuper</span>(<span class="params">Derived</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hasNativeReflectConstruct = _isNativeReflectConstruct();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">_createSuperInternal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Super = _getPrototypeOf(Derived),</span><br><span class="line">            result;</span><br><span class="line">        <span class="built_in">console</span>.log(Super === A) <span class="comment">// true</span></span><br><span class="line">        <span class="keyword">if</span> (hasNativeReflectConstruct) &#123;</span><br><span class="line">            <span class="keyword">var</span> NewTarget = _getPrototypeOf(<span class="built_in">this</span>).constructor;</span><br><span class="line">            result = <span class="built_in">Reflect</span>.construct(Super, <span class="built_in">arguments</span>, NewTarget);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; result = Super.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>); &#125;</span><br><span class="line">        <span class="keyword">return</span> _possibleConstructorReturn(<span class="built_in">this</span>, result);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_possibleConstructorReturn</span>(<span class="params">self, call</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (call &amp;&amp; (<span class="keyword">typeof</span> call === <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> call === <span class="string">&quot;function&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> call;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _assertThisInitialized(self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_assertThisInitialized</span>(<span class="params">self</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">&quot;this hasn&#x27;t been initialised - super() hasn&#x27;t been called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isNativeReflectConstruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Reflect</span> === <span class="string">&quot;undefined&quot;</span> || !<span class="built_in">Reflect</span>.construct)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Reflect</span>.construct.sham) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Proxy</span> === <span class="string">&quot;function&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="built_in">Boolean</span>.prototype.valueOf.call(<span class="built_in">Reflect</span>.construct(<span class="built_in">Boolean</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)); <span class="keyword">return</span> <span class="literal">true</span>; &#125; <span class="keyword">catch</span> (e) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_getPrototypeOf</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    _getPrototypeOf = <span class="built_in">Object</span>.setPrototypeOf ?</span><br><span class="line">        <span class="built_in">Object</span>.getPrototypeOf :</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">_getPrototypeOf</span>(<span class="params">o</span>) </span>&#123; <span class="keyword">return</span> o.__proto__ || <span class="built_in">Object</span>.getPrototypeOf(o); &#125;;</span><br><span class="line">    <span class="keyword">return</span> _getPrototypeOf(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> A = <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    _classCallCheck(<span class="built_in">this</span>, A);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> B = <span class="comment">/*#__PURE__*/</span> <span class="function"><span class="keyword">function</span>(<span class="params">_A</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">    _inherits(B, _A);</span><br><span class="line">    <span class="keyword">var</span> _super = _createSuper(B);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="built_in">this</span>, B);</span><br><span class="line">        <span class="comment">// 参照JavaScript深入之继承中的寄生组合式继承，这句代码有没有很熟悉</span></span><br><span class="line">        <span class="keyword">return</span> _super.call(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> B;</span><br><span class="line">&#125;(A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> B();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后我们自己实现一个Super函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reflect的用法 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> newTarget = <span class="built_in">Reflect</span>.construct(Test, [<span class="string">&#x27;张利民&#x27;</span>, <span class="number">26</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    newTarget.__proto__.constructor === Test,</span><br><span class="line">    newTarget.__proto__ === Test.prototype,</span><br><span class="line">    newTarget <span class="keyword">instanceof</span> Test); <span class="comment">// true, true, true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newTarget1 = <span class="built_in">Reflect</span>.construct(Test, [<span class="string">&#x27;张利民&#x27;</span>, <span class="number">26</span>], Parent);</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    newTarget1.__proto__.constructor === Parent,</span><br><span class="line">    newTarget1.__proto__ === Parent.prototype,</span><br><span class="line">    newTarget1 <span class="keyword">instanceof</span> Parent); <span class="comment">// true, true, true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟super函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>Test </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockSuper</span>(<span class="params">Test</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">_createSuper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> Super = <span class="built_in">Object</span>.getPrototypeOf(Test)</span><br><span class="line">        <span class="keyword">let</span> result = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">const</span> newTarget = <span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">this</span>).constructor</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Reflect</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// const result = new newTarget(arguments)</span></span><br><span class="line">            result = <span class="built_in">Reflect</span>.construct(Super, <span class="built_in">arguments</span>, newTarget)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之new操作符</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(15)-new/</url>
    <content><![CDATA[<h4 id="new-操作符"><a href="#new-操作符" class="headerlink" title="new 操作符"></a>new 操作符</h4><p>构造函数实例化通过 new 操作符初始化一个构造函数实例对象，在这个新的对象中为什么可以访问构造函数内的函数和变量？同时实例化之后的对象中的this为什么指向构造函数？</p>
<h5 id="自定义new函数"><a href="#自定义new函数" class="headerlink" title="自定义new函数"></a>自定义new函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">		<span class="comment">// return &#123; name, age &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.setName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.setAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const instance = new Test(&#x27;zhanglimin&#x27;, 26);</span></span><br><span class="line"><span class="keyword">const</span> instance = mockNew(Test, <span class="string">&#x27;zhanglimin&#x27;</span>, <span class="number">26</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance.__proto__ === Test.prototype); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockNew</span>(<span class="params">Con, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">        <span class="comment">// 解释了static类型的方法不能通过this调用的原因</span></span><br><span class="line">    <span class="built_in">Object</span>.setPrototypeOf(obj, Con.prototype)</span><br><span class="line">        <span class="comment">// apply方法调用一个具有给定this值的函数</span></span><br><span class="line">    <span class="keyword">let</span> result = Con.apply(obj, args)</span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由此可见 new操作符的实质是</p>
<ol>
<li>传建一个空对象</li>
<li>将空对象中原型对象<strong>proto</strong> 指向构造函数的原型(prototype)</li>
<li>使用call 或者 apply 绑定函数内的this指向</li>
<li>执行构造函数， 如果构造函数的返回值是对象就返回改值，如果不是就返回创建的空对象</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之extends</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(14)-extends/</url>
    <content><![CDATA[<img src="../../../static/js继承.png" alt="">

<h5 id="Object-create-方法创建一个新对象，使用现有的对象来提供新创建的对象的proto"><a href="#Object-create-方法创建一个新对象，使用现有的对象来提供新创建的对象的proto" class="headerlink" title="Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的proto"></a>Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong></h5><h4 id="先搞定清楚-prototype-和-proto之间的区别"><a href="#先搞定清楚-prototype-和-proto之间的区别" class="headerlink" title="先搞定清楚 prototype 和 proto之间的区别"></a>先搞定清楚 prototype 和 <strong>proto</strong>之间的区别</h4><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p> a, 拥有属性的对象不同</p>
<p><strong>proto</strong>: 在js中， 万物皆为对象，对象具有<strong>proto</strong>属性，可称为隐式原型； 一个对象的隐式原型指向该对象的构造函数的原型（js的对象）</p>
<p>prototype: 函数这个特殊对象所特有的属性（原型属性）（函数）</p>
<p> b,  指向不同</p>
<p><strong>proto</strong> 指向它的构造函数的原型对象（prototype ）</p>
<p>该原型对象也有一个自己的隐式原型( <strong>proto</strong> ) 和 constructor;<br> constructor: 指向构造函数<br> <strong>proto</strong>: 指向它的构造函数的原型对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Test.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br><span class="line">Test.prototype.constructor === Test <span class="comment">// true</span></span><br><span class="line">Test.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="extends做了什么？？"><a href="#extends做了什么？？" class="headerlink" title="extends做了什么？？"></a>extends做了什么？？</h4><p> extends在实现继承方面，本质上也是原型链继承,该方法实现了两步原型链继承</p>
<p>1）子类的prototype属性，表示构造函数的继承，总是指向父类<br>2) 把子类构造函数(#### 自定义实现extends</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.color = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">sex</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub2</span>(<span class="params">sex</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型链式继承: 以父类的实例为子类的原型，同时重置子类原型中的coonstrucor为子类的构造函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototypeInherited</span>(<span class="params">Sub, Parent</span>) </span>&#123;</span><br><span class="line">    Sub.prototype = <span class="keyword">new</span> Parent(<span class="string">&#x27;zhanglimin&#x27;</span>, <span class="number">26</span>)</span><br><span class="line">    Sub.prototype.constructor = Sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prototypeInherited(Sub, Parent)</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Sub()</span><br><span class="line">instance.color.push(<span class="string">&#x27;sub&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> Sub()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由此可见， 原型式继承带来的问题是</span></span><br><span class="line"><span class="comment"> * 1. 父类的引用属性会被所子类实例所共享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.color) <span class="comment">// [sub]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.color) <span class="comment">// [sub]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数式继承: 在子类中通过call或者apply调用父类函数，改变父类this指向从而在子类中保存父类属性的副本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">sex</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, <span class="string">&#x27;zhanglimin&#x27;</span>, <span class="number">26</span>)</span><br><span class="line">    <span class="built_in">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub2</span>(<span class="params">sex</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, <span class="string">&#x27;zhanglimin&#x27;</span>, <span class="number">26</span>)</span><br><span class="line">    <span class="built_in">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> Sub()</span><br><span class="line">instance1.color.push(<span class="string">&#x27;sub&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance1.color) <span class="comment">// [sub]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> Sub2()</span><br><span class="line">instance2.color.push(<span class="string">&#x27;sub2&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance2.color) <span class="comment">// [sub2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由此可见， 构造函数继承不能继承父类原型，方法都在构造函数中继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.getColor <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组合继承: 将原型式继承和构造函数式继承的组合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, <span class="string">&#x27;张利民&#x27;</span>, <span class="number">26</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, <span class="string">&#x27;zhanglimin&#x27;</span>, <span class="number">26</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prototypeInherited(Sub, Parent)</span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> Sub()</span><br><span class="line">instance1.color.push(<span class="string">&#x27;sub&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance1.getColor()) <span class="comment">// [sub]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance3 = <span class="keyword">new</span> Sub()</span><br><span class="line"><span class="built_in">console</span>.log(instance3.getColor()) <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">prototypeInherited(Sub2, Parent)</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> Sub2()</span><br><span class="line">instance2.color.push(<span class="string">&#x27;sub2&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance2.getColor()) <span class="comment">// [sub2]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型式继承: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototypeInherited</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 临时构建一个构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 将构造函数的原型设置为obj</span></span><br><span class="line">    F.prototype = obj</span><br><span class="line">        <span class="comment">// 返回函数的实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  寄生式继承: 以需要继承的对象为基准创建对象并在此对象上进行扩展</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prasiticInherited</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="built_in">Object</span>.create(obj)</span><br><span class="line">    clone.sayhi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 寄生组合继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parasiticCombinationInherited</span>(<span class="params">sub, sup</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> target = <span class="built_in">Object</span>.create(sup.prototype)</span><br><span class="line">    target.constructor = sub</span><br><span class="line">    sub.prototype = target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, <span class="string">&#x27;张利民&#x27;</span>, <span class="number">26</span>)</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parasiticCombinationInherited(Sub, Parent)</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Sub(<span class="number">28</span>)</span><br><span class="line">instance.color.push(<span class="string">&#x27;sub&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance.age, instance.getColor()) <span class="comment">// 28, [sub]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 综上所述： 实现自定义的extends函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockExtends</span>(<span class="params">child, parent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> child !== <span class="string">&#x27;function&#x27;</span> &amp;&amp; parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Super expression must either be null or a function&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    child.prototype = <span class="built_in">Object</span>.create(parent &amp;&amp; parent.prototype, &#123;</span><br><span class="line">        <span class="title">constructor</span>: &#123;</span><br><span class="line">            value: child,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        <span class="comment">// child.__proto__ = parent</span></span><br><span class="line">        <span class="built_in">Object</span>.setPrototypeOf(child, parent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  接下来看看babel对于es6中 extends 操作符的编译</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * babel编译之后的es5代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">&quot;function&quot;</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Super expression must either be null or a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">        <span class="title">constructor</span>: &#123;</span><br><span class="line">            value: subClass,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (superClass) _setPrototypeOf(subClass, superClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_setPrototypeOf</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">    _setPrototypeOf = <span class="built_in">Object</span>.setPrototypeOf || <span class="function"><span class="keyword">function</span> <span class="title">_setPrototypeOf</span>(<span class="params">o, p</span>) </span>&#123; o.__proto__ = p; <span class="keyword">return</span> o; &#125;;</span><br><span class="line">    <span class="keyword">return</span> _setPrototypeOf(o, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> A = <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">    _classCallCheck(<span class="built_in">this</span>, A);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> B = <span class="comment">/*#__PURE__*/</span> <span class="function"><span class="keyword">function</span>(<span class="params">_A</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extends的核心</span></span><br><span class="line">    _inherits(B, _A);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个参照我的 对super 讲解一章</span></span><br><span class="line">    <span class="keyword">var</span> _super = _createSuper(B);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="built_in">this</span>, B);</span><br><span class="line">        <span class="keyword">return</span> _super.call(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> B;</span><br><span class="line">&#125;(A);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之promise</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(13)-promise/</url>
    <content><![CDATA[<h5 id="promise流程梳理"><a href="#promise流程梳理" class="headerlink" title="promise流程梳理"></a>promise流程梳理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: promise初始化(初始化内部状态&#x2F;需要返回的值&#x2F;hanler回调函数)</span><br><span class="line">op&#x3D;&gt;operation: 初始化成功</span><br><span class="line">cond&#x3D;&gt;condition: Yes or no</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浮点数精度</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(12)-%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6/</url>
    <content><![CDATA[<h6 id="0-1-0-2-0-3"><a href="#0-1-0-2-0-3" class="headerlink" title="0.1 + 0.2 !== 0.3"></a>0.1 + 0.2 !== 0.3</h6><p>说起原因, 因为浮点数精度丢失</p>
<p>然后你就会发现，这个计算在不停的循环，所以 0.1 用二进制表示就是 0.00011001100110011……</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之apply和call函数</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(11)-apply%E5%92%8Ccall/</url>
    <content><![CDATA[<p>apply 和 call</p>
<p>相同点: 都能够改变函数执行时的上下文</p>
<p>不同点：</p>
<p>call: 接收的是参数列表<br>apply: 接收的是参数数组 或者类数组</p>
<ol>
<li>模拟call函数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.mockCall = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [curThis] = args</span><br><span class="line">    curThis.fn = self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = curThis.fn(...args.slice(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">delete</span> curThis.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  测试</span></span><br><span class="line"><span class="keyword">var</span> getValue = <span class="function"><span class="keyword">function</span>(<span class="params">paralist, params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a) <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(paralist) <span class="comment">// [&#x27;参数1&#x27;, &#x27;参数2&#x27;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(params) <span class="comment">// 这是第二个参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getValue.mockCall(obj, [<span class="string">&#x27;参数1&#x27;</span>, <span class="string">&#x27;参数2&#x27;</span>], <span class="string">&#x27;这是是第二个参数&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>模拟apply函数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mockApply = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> [curThis, params] = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">    curThis.fn = self</span><br><span class="line">    <span class="keyword">const</span> result = curThis.fn(...params)</span><br><span class="line">    <span class="keyword">delete</span> curThis.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param1) <span class="comment">// 测试1</span></span><br><span class="line">    <span class="built_in">console</span>.log(param2) <span class="comment">// ceshi12</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a) <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> param1</span><br><span class="line">&#125;</span><br><span class="line">f.mockApply(obj1, [<span class="string">&#x27;测试1&#x27;</span>, <span class="string">&#x27;ceshi12&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之bind模拟实现</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(10)-bind%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h5 id="bind-方法会创建一个新函数。当这个新函数被调用时，bind-的第一个参数将作为它运行时的-this，之后的一序列参数将会在传递的实参前传入作为它的参数"><a href="#bind-方法会创建一个新函数。当这个新函数被调用时，bind-的第一个参数将作为它运行时的-this，之后的一序列参数将会在传递的实参前传入作为它的参数" class="headerlink" title="bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数"></a>bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数</h5><h6 id="bind函数的特点"><a href="#bind函数的特点" class="headerlink" title="bind函数的特点"></a>bind函数的特点</h6><ol>
<li>返回一个函数</li>
<li>可以传入参数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	<span class="built_in">Function</span>.prototype.customBind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">// 获取bind2函数从第二个参数到最后一个参数</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class="line">        <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> self.apply(context, args.concat(bindArgs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    b: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = getb.customBind(a)</span><br><span class="line">c() <span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之instanceof原理</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(9)-instanceof%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="instanceof-用于判断引用类型中的数据类型"><a href="#instanceof-用于判断引用类型中的数据类型" class="headerlink" title="instanceof: 用于判断引用类型中的数据类型"></a>instanceof: 用于判断引用类型中的数据类型</h4><p>其实现原理是判断数据能否在其原型上找到对应的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟实现instanceof</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>left </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>right </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockInstanceof</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> pro = right.prototype</span><br><span class="line">    <span class="keyword">let</span> lefePro = left.__proto__</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left === <span class="literal">null</span> || left === <span class="literal">undefined</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (pro === lefePro)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        left = left.__proto__</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="instanceof-和-typeof-的区别？"><a href="#instanceof-和-typeof-的区别？" class="headerlink" title="instanceof 和 typeof 的区别？"></a>instanceof 和 typeof 的区别？</h6><p>typeof： 用于除null以外的基础类型值的数据判断,<br>instanceof： 用于引用类型值的判断</p>
<h6 id="除了使用instanceof判断引用类型还有什么其他方式吗"><a href="#除了使用instanceof判断引用类型还有什么其他方式吗" class="headerlink" title="除了使用instanceof判断引用类型还有什么其他方式吗?"></a>除了使用instanceof判断引用类型还有什么其他方式吗?</h6><h6 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a>Object.prototype.toString.call</h6><h6 id="constructor-属性易变，不可信赖，为了规范，在重写对象原型时一般都需要重新给constructor赋值，以保证实例对象的类型不被改写"><a href="#constructor-属性易变，不可信赖，为了规范，在重写对象原型时一般都需要重新给constructor赋值，以保证实例对象的类型不被改写" class="headerlink" title="constructor: 属性易变，不可信赖，为了规范，在重写对象原型时一般都需要重新给constructor赋值，以保证实例对象的类型不被改写"></a>constructor: 属性易变，不可信赖，为了规范，在重写对象原型时一般都需要重新给constructor赋值，以保证实例对象的类型不被改写</h6>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之立执行函数</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(8)-%E7%AB%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之变量对象</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(4)-%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h5 id="当-JavaScript-代码执行一段可执行代码-executable-code-时，会创建对应的执行上下文-execution-context"><a href="#当-JavaScript-代码执行一段可执行代码-executable-code-时，会创建对应的执行上下文-execution-context" class="headerlink" title="当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)"></a>当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)</h5><p>对于每个执行上下文，都有三个重要属性：</p>
<ol>
<li>变量对象(VO/AO)</li>
<li>作用域链</li>
<li>this</li>
</ol>
<p>变量对象</p>
<p>变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。</p>
<h6 id="全局变量对象"><a href="#全局变量对象" class="headerlink" title="全局变量对象"></a>全局变量对象</h6><p> 全局上下文中的变量对象是window</p>
<h6 id="函数变量对象"><a href="#函数变量对象" class="headerlink" title="函数变量对象"></a>函数变量对象</h6><p>在函数上下文中，用AO来表示函数的变量对象</p>
<p>变量对象会包括：</p>
<ol>
<li><p>函数的所有形参 (如果是函数上下文)<br> 由名称和对应值组成的一个变量对象的属性被创建<br> 没有实参，属性值设为 undefined</p>
</li>
<li><p>函数声明<br>由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建<br>如果变量对象已经存在相同名称的属性，则完全替换这个属性</p>
</li>
<li><p>变量声明<br>由名称和对应值（undefined）组成一个变量对象的属性被创建；<br>如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之闭包</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(7)-%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h6 id="闭包就是能够读取其他函数内部变量的函数。由于在-Javascript-语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”"><a href="#闭包就是能够读取其他函数内部变量的函数。由于在-Javascript-语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”" class="headerlink" title="闭包就是能够读取其他函数内部变量的函数。由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”"></a>闭包就是能够读取其他函数内部变量的函数。由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”</h6><h6 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h6><p>js中的作用域只有全局和函数作用域，在某些特殊其情况下需要在函数之外获取函数内定义的一些变量和方法</p>
<h6 id="MDN对闭包的定义？"><a href="#MDN对闭包的定义？" class="headerlink" title="MDN对闭包的定义？"></a>MDN对闭包的定义？</h6><p>闭包是指那些能访问自由变量的函数</p>
<p>那什么是自由变量？<br>自由变量是指在函数中使用但是不是函数的参数也不是函数的局部变量的变量</p>
<p>由此可以看出闭包 = 函数 + 函数能够访问的自由变量</p>
<p>由此上面得出我对于闭包的理解：<br>闭包就是在函数内访问当前函数上下文中变量对象以外的变量</p>
<h6 id="如何理解闭包？"><a href="#如何理解闭包？" class="headerlink" title="如何理解闭包？"></a>如何理解闭包？</h6><p>函数能够访问当前执行上下文中的变量对象以外的变量</p>
<p>在实践中使用场景：</p>
<ol>
<li>函数返回函数 (防抖、 节流)</li>
</ol>
<p><b style="color:red;">在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</b></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;全局属性&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">&quot;这是对象中的值&quot;</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()()); <span class="comment">// My Object</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之作用域</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(5)-%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h6 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h6><p>函数的作用域在函数定义的时候就被定义了</p>
<p>函数的内部有一个[[scope]]属性，当函数创建时，就会保存所有父变量对象到 = 你可以理解 [[scope]] 就是所有父变量对象的层级链</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数创建时：</span></span><br><span class="line">foo.[[scope]] = [globalContext.VO]</span><br><span class="line"></span><br><span class="line">bar.[[scope]] = [fooContext.AO,  globalContext.VO]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数激活时: 就会将活动对象添加到作用链的前端。</span></span><br><span class="line">Scope = [AO].concat([[Scope]]);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> scope = <span class="string">&#x27;global scope&#x27;</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope2 = <span class="string">&#x27;local scope&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> scope2;</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.第一步: checkscope 函数被创建，保存作用域链到 内部属性[[scope]]</span></span><br><span class="line">checkscope.[[scope]] = [</span><br><span class="line"> globalContext.VO</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 第三步: 用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</span></span><br><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: <span class="literal">undefined</span></span><br><span class="line">    &#125;，</span><br><span class="line">    Scope: checkscope.[[scope]],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 第三步: checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链</span></span><br><span class="line">checkscopeContext = &#123;</span><br><span class="line">    Scope: checkscope.[[scope]],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 第四步： 将活动对象压入 checkscope 作用域链顶端</span></span><br><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</span></span><br><span class="line">ECStack = [</span><br><span class="line">    checkscopeContext,</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 函数执行完毕， 吧checkscopeContext从执行上下文栈中删除</span></span><br><span class="line">ECStack = [</span><br><span class="line"> globalContext </span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h5><p>当查找变量时，会从当前上下文中的变量对象中查找，如果找不到就会从父级的执行上下文的变量对象中查找，这样由多个执行上下文中的变量对象构成的链表就叫作用域链</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之执行上下文</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(3)-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<h5 id="js之执行上下文"><a href="#js之执行上下文" class="headerlink" title="js之执行上下文"></a>js之执行上下文</h5><p>在JavaScript中有三种代码运行环境</p>
<ul>
<li>Global Code: JavaScript代码开始运行的默认环境</li>
<li>Function Code: 代码进入一个JavaScript函数</li>
<li>Eval Code: 使用eval()执行代码</li>
</ul>
<p>js 代码被执行的时候进入不同的执行环境，这些执行环就构成了执行环境栈（Execution context stack，ECS）</p>
<img src="../../../static/js执行环境栈.png" />

<p style="color: red; font-size: 18px;">对于每个Execution Context都有三个重要的属性，变量对象（Variable object，VO），作用域链（Scope chain）和this</p>

<ul>
<li><p>VO(variable object):变量对象， 包含当前执行环境的<span style="color: red;">变量 (var, Variable Declaration)， 函数声明 (Function Declaration, FD)， 函数的形参</span></p>
<pre><code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VariableObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.variableDeclaration = &#123;&#125;  <span class="comment">// 变量声明</span></span><br><span class="line">    <span class="built_in">this</span>.functionDeclatration = &#123;&#125; <span class="comment">// 函数声明</span></span><br><span class="line">    <span class="built_in">this</span>.functionArguments = &#123;&#125; <span class="comment">// 函数的形参</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  VO: 对象中不包含函数表达式和没有使用var声明的变量</p>
</li>
<li><p>作用域</p>
</li>
<li><p>this属性</p>
</li>
</ul>
<p>活动对象（Activation object）<br>在函数上下文执行中， vo是不能直接访问的， 此时由激活的对象AO扮演vo角色，激活对象进入函数上下文时被创建， 它是通过函数的arguments属性</p>
<p>Arguments Object对象包含：</p>
<ul>
<li>callee: 指向当前函数的引用</li>
<li>length: 真正传递的参数个数</li>
<li>properties-indexes：就是函数的参数值(按参数列表从左到右排列)</li>
</ul>
<p>执行环境的创建分为创建阶段和激活/代码执行阶段</p>
<ul>
<li><p>创建阶段（当函数被调用，但是开始执行函数内部代码之前）</p>
<ul>
<li>创建Scope chain</li>
<li>创建VO/AO（variables, functions and arguments）</li>
<li>设置this的值</li>
</ul>
</li>
<li><p>激活/代码执行阶段</p>
<ul>
<li>设置变量的值、函数的引用，然后解释/执行代码</li>
</ul>
</li>
<li><p>创建VO/AO</p>
<ol>
<li><p>根据函数的参数，创建并初始化arguments object</p>
</li>
<li><p>扫描函数内部代码，查找函数声明（Function declaration）<br> a. 对于所有找到的函数声明，将函数名和函数引用存入VO/AO中<br> b. 如果VO/AO中已经有同名的函数，那么就进行覆盖</p>
</li>
<li><p>扫描函数内部代码，查找变量声明（Variable declaration）</p>
</li>
</ol>
</li>
</ul>
<pre><code class="javascript">    <span class="comment">// 创建执行环境</span>
    <span class="function"><span class="keyword">function</span> <span class="title">CreateExecutionContext</span>(<span class="params"></span>) </span>&#123;
        <span class="keyword">this</span>.status = <span class="string">'created'</span>
        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="string">'created'</span>) &#123;
            CreatedScopeChin() <span class="comment">// 创建作用域连</span>
            VariableObject() <span class="comment">// 创建VO或者AO对象</span>
            SetCurrentThisValue() <span class="comment">// 设置当前this的值</span>
        &#125;
    &#125;

    <span class="function"><span class="keyword">function</span> <span class="title">demoExecutionContext</span>(<span class="params">param1, param2</span>) </span>&#123;

        <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;
            <span class="built_in">console</span>.log(<span class="string">'测试'</span>)
        &#125;

        <span class="keyword">var</span> demo = <span class="string">'created'</span>

        <span class="keyword">var</span> a = <span class="string">'测试'</span>
    &#125;

    demoExecutionContext(<span class="string">'ryfrgyfrgyfr'</span>, <span class="string">'参数以'</span>)

    <span class="comment">// 创阶段</span>
    demoExecutionContextCreated&#123;
        scopeChain: &#123;&#125;,
        VO: &#123;
            <span class="built_in">arguments</span>: &#123;
                <span class="number">0</span>: <span class="string">' ryfrgyfrgyfr '</span>,
                <span class="number">1</span>: <span class="string">'参数以'</span> 
            &#125;,
            param1: <span class="string">' ryfrgyfrgyfr'</span>,
            param2: <span class="string">'参数以'</span>,
            demo: point to <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;.....&#125;,
            a: <span class="literal">undefined</span>
        &#125;,
    &#125;

    <span class="comment">// 执阶段</span>
    demoExecutionContextExe&#123;
       scopeChain: &#123;&#125;,
        VO: &#123;
            <span class="built_in">arguments</span>: &#123;
                <span class="number">0</span>: <span class="string">' ryfrgyfrgyfr '</span>,
                <span class="number">1</span>: <span class="string">'参数以'</span> 
            &#125;,
            param1: <span class="string">' ryfrgyfrgyfr'</span>,
            param2: <span class="string">'参数以'</span>,
            demo: <span class="string">'created'</span>,
            a: <span class="string">'测试'</span> 
        &#125;, 
    &#125;
<span class="string">`</span></code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之this</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(6)-this/</url>
    <content><![CDATA[<h5 id="this"><a href="#this" class="headerlink" title="this"></a>this</h5><p>this可以叫做上下文对象, 也就是用来指明执行上下文是在那个上下文中被触发的对象</p>
<h6 id="普通函数的this指向函数运行时所在的环境"><a href="#普通函数的this指向函数运行时所在的环境" class="headerlink" title="普通函数的this指向函数运行时所在的环境"></a>普通函数的this指向函数运行时所在的环境</h6>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// window</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>) <span class="comment">// true</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="js中this指向的情况"><a href="#js中this指向的情况" class="headerlink" title="js中this指向的情况"></a>js中this指向的情况</h6><ol>
<li>函数作为对象的属性</li>
<li><span style="color: red;">通过apply, bind等方法显示改变this的值</span></li>
<li><span style="color: red;">通过new 关键词实例化函数, this指向初始化的函数</span></li>
<li>自执行函数中的this指向window</li>
<li>函数作为对象的属性，但是不通过对象的调用， this指向window</li>
</ol>
<h6 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h6><p>先看看 箭头函数通过babel转码为es5是什么样的….</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 转码之前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> test = <span class="string">&#x27;测试&#x27;</span>   </span><br><span class="line">    <span class="keyword">const</span> a = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过babel转码之后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 箭头函数的this指向</span></span><br><span class="line">  <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">let</span> test = <span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(_this);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以通过上面可以看出： 箭头函数的this指向当前箭头函数所在的上下文中</p>
<h6 id="总结：箭头函数和普通函数的区别？"><a href="#总结：箭头函数和普通函数的区别？" class="headerlink" title="总结：箭头函数和普通函数的区别？"></a>总结：箭头函数和普通函数的区别？</h6><ol>
<li>this指向： 箭头函数没有自己的this指向， 它只会从自己作用域链上一层继承this</li>
<li>构造函数: 箭头函数不能作为构造函数, 箭头函数没有原型</li>
<li>箭头函数没有自己的arguments对象</li>
<li>因为没有自己的this指向，所以不能调用 call / apply方法改变内部的this指向</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** apply(需要改变的this值， 参数数组)</span></span><br><span class="line"><span class="comment"> *  output: 返回函数执行的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockApply</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [currentThis, params] = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">    currentThis.fn = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> result = currentThis.fn(...params)</span><br><span class="line">    <span class="keyword">delete</span> currentThis.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.mockCall = mockApply</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param1) <span class="comment">// 测试1</span></span><br><span class="line">    <span class="built_in">console</span>.log(param2) <span class="comment">// ceshi12</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a) <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> param1</span><br><span class="line">&#125;</span><br><span class="line">f.mockCall(obj1, [<span class="string">&#x27;测试1&#x27;</span>, <span class="string">&#x27;ceshi12&#x27;</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟化call函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>函数执行的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockCall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> params = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">const</span> [ currentThis ]= params</span><br><span class="line">    currentThis.fn = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> result = currentThis.fn(...params.slice(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">delete</span> currentThis.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.mockCall = mockCall</span><br><span class="line"></span><br><span class="line"><span class="comment">//  测试</span></span><br><span class="line"><span class="keyword">var</span> getValue = <span class="function"><span class="keyword">function</span> (<span class="params">paralist</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a) <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(paralist) <span class="comment">// [&#x27;参数1&#x27;, &#x27;参数2&#x27;]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    getValue: getValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getValue.mockCall(obj, [<span class="string">&#x27;参数1&#x27;</span>, <span class="string">&#x27;参数2&#x27;</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@params</span>0: this 对象</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@params</span>1： 参数列表</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@return </span>: Function</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    a: <span class="string">&#x27;eydgeye&#x27;</span>,</span><br><span class="line">    getValue: <span class="function"><span class="keyword">function</span> (<span class="params">c, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(c, b)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> newBindFun = a.getValue.bind(a, <span class="number">12</span>, <span class="string">&#x27;teftdede&#x27;</span>)</span><br><span class="line">newBindFun()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之继承</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(2)-%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h5 id="js的继承"><a href="#js的继承" class="headerlink" title="js的继承"></a>js的继承</h5><img src="../../../static/js继承.png" alt="">

<h6 id="1-1-原型链继承"><a href="#1-1-原型链继承" class="headerlink" title="1.1 原型链继承"></a>1.1 原型链继承</h6><p> 将父类的实例作为子类的原型</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Subtype.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">Subtype.prototype.constructor = Subtype</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点：<br> 父类方法可以复用</p>
<p>缺点：<br>  1, 父类的引用属性会被所有子类实例共享<br>  2, 子类构建父类实例时不能向父类传递参数</p>
<h4 id="构造函数式继承-经典继承"><a href="#构造函数式继承-经典继承" class="headerlink" title="构造函数式继承(经典继承)"></a>构造函数式继承(经典继承)</h4><p> 将父类构造函数的内容复制给子类的构造函数</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.color = [ <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> SuperType.call(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> SubType()</span><br><span class="line">instance.color.push(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">alert(instance.color) <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;, block&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> SubType()</span><br><span class="line">alert(instance1.color) <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li><p>父类的方法可以被复用</p>
</li>
<li><p>避免了引用类型的属性被所有实例共享</p>
</li>
<li><p>子类构建实例时可以想父类传递参数</p>
</li>
</ol>
<p>缺点：</p>
<p>每次创建实例都会创建一遍方法。</p>
<h4 id="组合继承（原型链继承和经典继承双剑合璧）"><a href="#组合继承（原型链继承和经典继承双剑合璧）" class="headerlink" title="组合继承（原型链继承和经典继承双剑合璧）"></a>组合继承（原型链继承和经典继承双剑合璧）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.name =<span class="string">&#x27;created&#x27;</span></span><br><span class="line"> <span class="built_in">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;this is parent&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> SuperType.call(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br></pre></td></tr></table></figure>

<p>优点： 融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</p>
<p>缺点： 组合继承最大的缺点是会调用两次父构造函数。</p>
<h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> F.prototype = o;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><p> 创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clone =  <span class="built_in">Object</span>.create(original);</span><br><span class="line">  clone.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   alert(<span class="string">&#x27;hi)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  return clone;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let person = &#123;</span></span><br><span class="line"><span class="string"> name: &#x27;</span>Nicholas<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> friends: [&#x27;</span>shelby<span class="string">&#x27;, &#x27;</span>court<span class="string">&#x27;, &#x27;</span>van<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var anotherPerson = createAnother(person)</span></span><br><span class="line"><span class="string">anotherPerson.sayHi()</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h4 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(superType.prototype)</span><br><span class="line">  prototype.constructor = subType</span><br><span class="line">  subType.prototype = prototype</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="built_in">this</span>, name)</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> inheritPrototype(SubType, SuperType)</span><br></pre></td></tr></table></figure>

<p>优点： 保持原型链不变，正常使用instanceof 和 isPrototypeOf</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之从原型到原型链</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/JavaScript/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B(1)-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h4 id="JavaScript之原型到原型链"><a href="#JavaScript之原型到原型链" class="headerlink" title="JavaScript之原型到原型链"></a>JavaScript之原型到原型链</h4><h5 id="彻底理解原型、-原型链、构造函数的区别"><a href="#彻底理解原型、-原型链、构造函数的区别" class="headerlink" title="彻底理解原型、 原型链、构造函数的区别"></a>彻底理解原型、 原型链、构造函数的区别</h5><h6 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型: prototype"></a>原型: prototype</h6><p>每个函数都有一个prototype属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.name) <span class="comment">// John</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.name) <span class="comment">// John</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>函数的prototype属性指向一个对象，该对象指向创建构造函数实例的原型, 该对象中包含指向构造函数的执政constructor和原型<strong>proto</strong>属性</p>
<p>在上述例子中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p1.__proto__ === Person.prototype <span class="comment">// true</span></span><br><span class="line">p2.__proto__ === Person.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h6 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h6><p>每个对象(除null以外)都有<strong>proto</strong>属性, 该属性会指向该对象的原型</p>
<h6 id="constructor：-每个原型都有一个constructor属性，指向该关联的函数"><a href="#constructor：-每个原型都有一个constructor属性，指向该关联的函数" class="headerlink" title="constructor： 每个原型都有一个constructor属性，指向该关联的函数"></a>constructor： 每个原型都有一个constructor属性，指向该关联的函数</h6><p>总结：<strong>proto</strong> 、 prototype、 constructor三者之间的关系：</p>
<p>prototype: 函数才有，指向该构造函数创建的实例的原型</p>
<p><strong>proto</strong>: 每个对象都有, 指向构造函数的原型</p>
<p>constructor: 指向关联的构造函数</p>
<h6 id="实例和原型"><a href="#实例和原型" class="headerlink" title="实例和原型"></a>实例和原型</h6><p>当读取实例的属性时，如果找不到就会到与对象的原型中去查找</p>
<h6 id="如何理解原型链"><a href="#如何理解原型链" class="headerlink" title="如何理解原型链"></a>如何理解原型链</h6><ol>
<li>首先每个对象都有原型属性，从当前对象中读取属性找不到时就会从当前对象中的原型中去找，这样一层一层形成的查找关系就叫原型链</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端基础</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/%E5%85%B6%E4%BB%96/%E7%AE%97%E6%B3%95/08-22-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>跨端通信</title>
    <url>/%E5%85%B6%E4%BB%96/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E8%B7%A8%E7%AB%AF%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">st&#x3D;&gt; start: 客户端调用</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>webrtc之媒体协商</title>
    <url>/%E5%85%B6%E4%BB%96/webrtc/webrtc%E4%B9%8B%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/</url>
    <content><![CDATA[<h4 id="媒体协商是让双方找到共同支持的媒体能力"><a href="#媒体协商是让双方找到共同支持的媒体能力" class="headerlink" title="媒体协商是让双方找到共同支持的媒体能力"></a>媒体协商是让双方找到共同支持的媒体能力</h4><h6 id="媒体协商的过程"><a href="#媒体协商的过程" class="headerlink" title="媒体协商的过程"></a>媒体协商的过程</h6><p>在通讯双方都创建好 RTCPeerConnection 对象后，它们就可以开始进行媒体协商了。<br>不过在进行媒体协商之前，有两个重要的概念，即 Offer 与 Answer ，你必须要弄清楚。Offer 与 Answer 是什么呢？对于 1 对 1 通信的双方来说，我们称首先发送媒体协商消息的一方为呼叫方，而另一方则为被呼叫方。</p>
<p>Offer，在双方通讯时，呼叫方发送的 SDP 消息称为 Offer。<br>Answer，在双方通讯时，被呼叫方发送的 SDP 消息称为 Answer</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RTC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">construct</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rtc = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">initRtcPer</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rtc = <span class="keyword">new</span> RTCPeerConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">createOffer</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; rtc &#125; = <span class="built_in">this</span>;</span><br><span class="line">        rtc.createOffer(</span><br><span class="line">            (sessionDescription) =&gt; &#123;</span><br><span class="line">                rtc.setLocalDescription(sessionDescription);</span><br><span class="line">            &#125;,</span><br><span class="line">            (err) =&gt; &#123;&#125;,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webrtc</category>
      </categories>
      <tags>
        <tag>webrtc</tag>
      </tags>
  </entry>
  <entry>
    <title>webrtc之录制</title>
    <url>/%E5%85%B6%E4%BB%96/webrtc/webrtc%E4%B9%8B%E5%BD%95%E5%88%B6/</url>
    <content><![CDATA[<h4 id="js存储二进制数据的类型"><a href="#js存储二进制数据的类型" class="headerlink" title="js存储二进制数据的类型"></a>js存储二进制数据的类型</h4><p>ArrayBuffer: 表示通用的、固定长度的二进制数据缓冲区(实例化之后才能存在内存中)</p>
<p>ArrayBufferView: 表示不同类型的Array的描述</p>
<p>blob: js的大型二进制对象类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * array: ArrayBuffer、ArrayBufferView、Blob、DOMString</span></span><br><span class="line"><span class="comment"> *  options: 指定存储成的媒体类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> ablob = <span class="keyword">new</span> Blob(array, options);</span><br></pre></td></tr></table></figure>

<h5 id="录制音视频流"><a href="#录制音视频流" class="headerlink" title="录制音视频流"></a>录制音视频流</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Recorder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buffer = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e &amp;&amp; e.data &amp;&amp; e.data.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.buffer.push(e.data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始录制</span></span><br><span class="line">    <span class="function"><span class="title">startRecorder</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> option = &#123;</span><br><span class="line">            mimeType: <span class="string">&#x27;video/webm;codecs=vp8&#x27;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> mediaRecorder = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!MediaRecorder.isTypeSupported(option.mimeType)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">`<span class="subst">$&#123;option.mimeType&#125;</span> is not supported!`</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建录制对象</span></span><br><span class="line">            mediaRecorder = <span class="keyword">new</span> MediaRecorder(<span class="built_in">window</span>.stream, option);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;Failed to create MediaRecorder:&#x27;</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mediaRecorder.ondataavailable = <span class="built_in">this</span>.handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建录制的url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">createUrl</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; buffer &#125; = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">const</span> url = <span class="keyword">new</span> Blob(buffer, &#123; <span class="attr">type</span>: <span class="string">&#x27;video/webm&#x27;</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webrtc</category>
      </categories>
      <tags>
        <tag>webrtc</tag>
      </tags>
  </entry>
  <entry>
    <title>webview</title>
    <url>/%E5%85%B6%E4%BB%96/%E7%A7%BB%E5%8A%A8%E7%AB%AF/webview/</url>
    <content><![CDATA[<h4 id="Webview-是一个基于webkit的引擎，可以解析DOM-元素，展示html页面的控件，它和浏览器展示页面的原理是相同的，所以可以把它当做浏览器看待"><a href="#Webview-是一个基于webkit的引擎，可以解析DOM-元素，展示html页面的控件，它和浏览器展示页面的原理是相同的，所以可以把它当做浏览器看待" class="headerlink" title="Webview 是一个基于webkit的引擎，可以解析DOM 元素，展示html页面的控件，它和浏览器展示页面的原理是相同的，所以可以把它当做浏览器看待"></a>Webview 是一个基于webkit的引擎，可以解析DOM 元素，展示html页面的控件，它和浏览器展示页面的原理是相同的，所以可以把它当做浏览器看待</h4><h4 id="webview-是一个可加载网页的对象-类似于浏览器的功能"><a href="#webview-是一个可加载网页的对象-类似于浏览器的功能" class="headerlink" title="webview: 是一个可加载网页的对象, 类似于浏览器的功能"></a>webview: 是一个可加载网页的对象, 类似于浏览器的功能</h4><h4 id="h5-调用-native"><a href="#h5-调用-native" class="headerlink" title="h5 调用 native"></a>h5 调用 native</h4><ol>
<li>ios下的 uiwebview 和 wkwebview</li>
</ol>
<p>uiwebview和wkwebview能够拦截h5内发起的网络请求； 在h5内发起约好的特定协议的网络请求带上需要传递給ios的参数, 客户端拦截到指定协议请求后解析url上的参数</p>
<ol>
<li><p>网络拦截</p>
<img src="../../../static/h5-native.png">
</li>
<li><p>native想webview中注入全局变量并挂载到window上</p>
</li>
</ol>
<hr>
<h4 id="native-调用-h5"><a href="#native-调用-h5" class="headerlink" title="native 调用 h5"></a>native 调用 h5</h4><ol>
<li>h5根据约定将一组API绑定到window对象上， native通过evaluateJavaScript函数调用window对象中的方法</li>
</ol>
<img src="../../../static/jsbrige.png">

<h4 id="通信实现"><a href="#通信实现" class="headerlink" title="通信实现"></a>通信实现</h4><h5 id="h5调用native"><a href="#h5调用native" class="headerlink" title="h5调用native"></a>h5调用native</h5><ol>
<li>通过拦截url的形式(更加类似于jsonp)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">JSBridge</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.callback = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">initIframe</span>(<span class="params"><span class="built_in">module</span>, params</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">        iframe.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">JSON</span>.parse(params);</span><br><span class="line">        <span class="keyword">const</span> src = <span class="string">`myiframe://mathod=<span class="subst">$&#123;<span class="built_in">module</span>&#125;</span>?param=<span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">        iframe.src = src;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * h5调用native</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">invokeNative</span>(<span class="params"><span class="built_in">module</span>, params, handler</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.callback.push(&#123; <span class="built_in">module</span>, params, handler &#125;);</span><br><span class="line">        <span class="built_in">this</span>.initIframe(<span class="built_in">module</span>, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * native 调用 h5, evaluateJavascript</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">invokeH5</span>(<span class="params"><span class="built_in">module</span>, params</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.callback</span><br><span class="line">            .filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.module === <span class="built_in">module</span>)</span><br><span class="line">            .forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; handler &#125; = item;</span><br><span class="line">                handler(params);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>native注入上下文</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> bridge =</span><br><span class="line">   <span class="built_in">window</span>.bridge ||</span><br><span class="line">   (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">const</span> result = &#123;</span><br><span class="line">           call, <span class="comment">// H5调用native</span></span><br><span class="line">           response, <span class="comment">//native调用js</span></span><br><span class="line">           pf: <span class="literal">null</span>,</span><br><span class="line">           enable: <span class="literal">false</span>,</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> nativeBrigge = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> callback = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> bridgeAndroid = <span class="built_in">window</span>.bridgeAndroid;</span><br><span class="line">       <span class="keyword">const</span> bridgeIOS = <span class="built_in">window</span>.bridgeIOS;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (bridgeAndroid) &#123;</span><br><span class="line">           nativeBrigge = bridgeAndroid;</span><br><span class="line">           result.pf = <span class="string">&#x27;android&#x27;</span>;</span><br><span class="line">           result.enable = <span class="literal">true</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bridgeIOS) &#123;</span><br><span class="line">           nativeBrigge = bridgeIOS;</span><br><span class="line">           result.pf = <span class="string">&#x27;ios&#x27;</span>;</span><br><span class="line">           result.enable = <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> lastCallId = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">initCallbackId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">`birdge:<span class="subst">$&#123;lastCallId&#125;</span>`</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// js 调用native方法</span></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params"><span class="built_in">module</span>, params, success, failure, once = <span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">const</span> callId = initCallbackId();</span><br><span class="line">           callback[callId] = &#123;</span><br><span class="line">               <span class="built_in">module</span>,</span><br><span class="line">               params,</span><br><span class="line">               success,</span><br><span class="line">               failure,</span><br><span class="line">               once,</span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="keyword">const</span> data = <span class="built_in">JSON</span>.stringify(&#123; <span class="built_in">module</span>, params, callId &#125;);</span><br><span class="line">           <span class="keyword">if</span> (result.pf === <span class="string">&#x27;android&#x27;</span>) &#123;</span><br><span class="line">               nativeBrigge.call(data);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.pf === <span class="string">&#x27;ios&#x27;</span>) &#123;</span><br><span class="line">               nativeBrigge.postMessage(data);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// native调用js代码</span></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">response</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">const</span> &#123; callId, erroCode, error, data &#125; = params;</span><br><span class="line">           <span class="keyword">const</span> item = callback[callId];</span><br><span class="line">           <span class="keyword">if</span> (!item) <span class="keyword">return</span>;</span><br><span class="line">           <span class="keyword">const</span> &#123; success, failure, once &#125; = item;</span><br><span class="line">           <span class="keyword">if</span> (erroCode === -<span class="number">1</span>) &#123;</span><br><span class="line">               failure(error);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               success(data);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (once) &#123;</span><br><span class="line">               <span class="keyword">delete</span> callback[callId];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">window</span>.bridge = bridge);</span><br><span class="line">   &#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>http-cors</title>
    <url>/%E5%85%B6%E4%BB%96/http/08-15-http%E4%B9%8Bcors/</url>
    <content><![CDATA[<h3 id="浏览器的简单请求和非简单请求"><a href="#浏览器的简单请求和非简单请求" class="headerlink" title="浏览器的简单请求和非简单请求"></a>浏览器的简单请求和非简单请求</h3><ul>
<li>简单请求：<br>  1, 请求方法为HEAD、GET、OST<ol start="2">
<li>HTTP头信息不超出以下几个字段<br>Accept / Accept-Language / Content-Language / Last-Event-ID<br>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>
</ol>
</li>
</ul>
<p>针对简单请求浏览器的请求流程是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: start</span><br><span class="line">op&#x3D;&gt;operation: 简单请求</span><br><span class="line">sub1&#x3D;&gt;subroutine: 浏览器为请求添加origin字段，origin字段代表本次请求来自那(协议 + 域名 + 端口)</span><br><span class="line">cond&#x3D;&gt;condition: 是否在同一源内</span><br><span class="line">sub2&#x3D;&gt;subroutine: 在同一源内, 服务器在响应头中添加 Access-Control-Allow-Origin&#x2F;Access-Control-Expose-Headers&#x2F;Access-Control-Allow-Credentials&#x2F;Content-Type字段</span><br><span class="line">sub3&#x3D;&gt;subroutine: 不在同一源内，报错</span><br><span class="line">end&#x3D;&gt;end: 请求结束</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op-&gt;sub1-&gt;cond</span><br><span class="line">cond(yes)-&gt;sub2-&gt;end</span><br><span class="line">cond(no)-&gt;sub3-&gt;end</span><br></pre></td></tr></table></figure>

<ol>
<li><p>Access-Control-Allow-Origin： 它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求</p>
</li>
<li><p>Access-Control-Allow-Credentials: 它的值是一个布尔值，表示是否允许发送Cookie</p>
</li>
<li><p>Access-Control-Expose-Headers: 该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段</p>
</li>
<li><p>Content-Type: text/html; charset=utf-8</p>
</li>
</ol>
<h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4> <p style="color: red;"> 非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。</p>

<p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p>
<p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://api.alice.com/cors&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">&#x27;PUT&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;X-Custom-Header&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>


<p>OPTIONS: 用来作为预捡请求</p>
<p>Access-Control-Request-Method： 该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。<br>Access-Control-Request-Headers： 该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。<br>Origin: 表示请求来自哪个源</p>
<h4 id="预检请求的回应"><a href="#预检请求的回应" class="headerlink" title="预检请求的回应"></a>预检请求的回应</h4><p>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的HTTP回应中，关键的是Access-Control-Allow-Origin字段，表示<a href="http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。">http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</a></p>
<p><code>Access-Control-Allow-Origin: *</code></p>
<p>如果服务器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http:&#x2F;&#x2F;api.alice.com.</span><br><span class="line">Origin http:&#x2F;&#x2F;api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务器回应的其他CORS相关字段如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure>


<ol>
<li>Access-Control-Allow-Methods </li>
</ol>
<p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求</p>
<ol start="2">
<li>Access-Control-Allow-Headers</li>
</ol>
<p>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p>
<ol start="3">
<li>Access-Control-Allow-Credentials</li>
</ol>
<p>该字段与简单请求时的含义相同。</p>
<ol start="4">
<li>Access-Control-Max-Age</li>
</ol>
<p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p>
<h4 id="浏览器的正常请求和回应"><a href="#浏览器的正常请求和回应" class="headerlink" title="浏览器的正常请求和回应"></a>浏览器的正常请求和回应</h4><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">参考链接</a></p>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/%E5%85%B6%E4%BB%96/nginx/08-14-nginx/</url>
    <content><![CDATA[<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><h4 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h4><ul>
<li>nginx -s stop // 停止</li>
<li>nginx -s quit //退出</li>
<li>nginx -s reload // 重新加载配置文件</li>
<li>ps aux|gre nginx // 查看nginx进程</li>
</ul>
<p>/usr/local/etc/nginx/nginx.conf （配置文件路径）<br>/usr/local/var/www （服务器默认路径）<br>/usr/local/Cellar/nginx/1.6.2 （貌似是安装路径）</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>js设计模式(2)-观察者模式</title>
    <url>/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/08-13-js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(2)-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="发布订阅模式又叫观察者模式-它定义对象间的一种1对多的依赖关系-当一个对象的状态发生变化时，-所有依赖于它的对象都将得到通知"><a href="#发布订阅模式又叫观察者模式-它定义对象间的一种1对多的依赖关系-当一个对象的状态发生变化时，-所有依赖于它的对象都将得到通知" class="headerlink" title="发布订阅模式又叫观察者模式; 它定义对象间的一种1对多的依赖关系, 当一个对象的状态发生变化时， 所有依赖于它的对象都将得到通知"></a>发布订阅模式又叫观察者模式; 它定义对象间的一种1对多的依赖关系, 当一个对象的状态发生变化时， 所有依赖于它的对象都将得到通知</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventStack = [];</span><br><span class="line">        <span class="built_in">this</span>.eventId = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.cacheStack = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">createdEventId</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventId++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.eventId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">subscribe</span>(<span class="params">eventName, callback, once = <span class="literal">false</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> id = <span class="built_in">this</span>.createdEventId();</span><br><span class="line">        <span class="keyword">if</span> (!eventName) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;eventName must be provided&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.eventStack.push(&#123;</span><br><span class="line">            name: eventName,</span><br><span class="line">            fn: callback,</span><br><span class="line">            once,</span><br><span class="line">            eventId: id,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先发布后订阅，防止事件丢失</span></span><br><span class="line">        <span class="keyword">const</span> fnList = <span class="built_in">this</span>.cacheStack[eventName];</span><br><span class="line">        <span class="keyword">if</span> (fnList &amp;&amp; fnList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            fnList.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">                fn();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">unsubscribe</span>(<span class="params">eventId</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">this</span>.eventStack.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> item.id === eventId);</span><br><span class="line">        <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.eventStack.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getHandlerCallBack</span>(<span class="params">eventName</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.eventStack.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.name === eventName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">cached</span>(<span class="params">eventName, params</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> callback = <span class="built_in">this</span>.getHandlerCallBack(eventName);</span><br><span class="line">            callback.forEach(<span class="function">(<span class="params">&#123; fn &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">                fn.apply(fn, params);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">publish</span>(<span class="params">eventName, ...params</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> callBack = <span class="built_in">this</span>.getHandlerCallBack(eventName);</span><br><span class="line">        <span class="keyword">const</span> &#123; cacheStack &#125; = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">const</span> hasCallback = callBack.length &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 先发布后订阅，临时存储发布的事件和参数</span></span><br><span class="line">        <span class="keyword">if</span> (!hasCallback &amp;&amp; !cacheStack[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.cacheStack[eventName] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        callBack.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; fn, once, eventId &#125; = item;</span><br><span class="line">            fn.apply(fn, params);</span><br><span class="line">            <span class="keyword">if</span> (once) &#123;</span><br><span class="line">                <span class="built_in">this</span>.unsubscribe(eventId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!hasCallback) &#123;</span><br><span class="line">            <span class="keyword">const</span> originList = <span class="built_in">this</span>.cacheStack[eventName];</span><br><span class="line">            <span class="built_in">this</span>.cacheStack[eventName] = originList.concat(<span class="built_in">this</span>.cached(eventName, params));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> Observer();</span><br><span class="line"></span><br><span class="line">observer.publish(<span class="string">&#x27;stopSub&#x27;</span>, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;);</span><br><span class="line">observer.publish(<span class="string">&#x27;stopSub&#x27;</span>, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">3</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    observer.subscribe(<span class="string">&#x27;startSub&#x27;</span>, <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;startSub&#x27;</span>, params);</span><br><span class="line">    &#125;);</span><br><span class="line">    observer.subscribe(<span class="string">&#x27;stopSub&#x27;</span>, <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;stopSub&#x27;</span>, params);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>


<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>发布订阅模式可以使代码解耦，满足开放封闭原则</li>
<li>当过多的使用发布订阅模式，如果订阅消息始终都没有触发，则订阅者一直保存在内存中。</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>webrtc之mediaDevices</title>
    <url>/%E5%85%B6%E4%BB%96/webrtc/webrtc%E4%B9%8Bmediadevices/</url>
    <content><![CDATA[<h3 id="浏览器采集音视频流"><a href="#浏览器采集音视频流" class="headerlink" title="浏览器采集音视频流"></a>浏览器采集音视频流</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocalMediaStream</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> localStream = <span class="literal">null</span></span><br><span class="line"> <span class="keyword">return</span> navigator.mediaDevices.getUserMedia(constraints)</span><br><span class="line">  .then(<span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line">    localStream = stream</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line"> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>navigator.mediaDevices.getUserMedia 返回的是promise对象</p>
</li>
<li><p>getUserMedia接收入参为MediaStreamConstraints</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mediaStreamContrains = &#123;</span><br><span class="line"> video: <span class="literal">true</span>, <span class="comment">// 采集视频</span></span><br><span class="line"> audio: <span class="literal">true</span>, <span class="comment">// 采集音频</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mediaStreamContrains = &#123;</span><br><span class="line"> video: &#123;</span><br><span class="line">  frameRate: &#123;<span class="attr">min</span>: <span class="number">20</span>&#125;, </span><br><span class="line">  width: &#123;<span class="attr">min</span>: <span class="number">640</span>, <span class="attr">ideal</span>: <span class="number">1280</span>&#125;,</span><br><span class="line">  height: &#123;<span class="attr">min</span>: <span class="number">360</span>, <span class="attr">ideal</span>: <span class="number">720</span>&#125;,</span><br><span class="line">  aspectRatio: <span class="number">16</span>/<span class="number">9</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="../../static/webrtc参数.webp">

<h4 id="如何实现将浏览器采集的音视频流渲染到页面上"><a href="#如何实现将浏览器采集的音视频流渲染到页面上" class="headerlink" title="如何实现将浏览器采集的音视频流渲染到页面上"></a>如何实现将浏览器采集的音视频流渲染到页面上</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">initVideo = <span class="function">(<span class="params">srcObject</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">const</span> video = <span class="built_in">document</span>.createElement(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line"> video.srcObject = srcObject;</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(video);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getMediaStream = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">const</span> constraints = &#123;</span><br><span class="line">   video: <span class="literal">true</span>,</span><br><span class="line">   audio: <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> localStream = <span class="literal">null</span>;</span><br><span class="line"> <span class="keyword">return</span> navigator.mediaDevices.getUserMedia(constraints).then(</span><br><span class="line">  (mediaStream) =&gt; &#123;</span><br><span class="line">   localStream = mediaStream</span><br><span class="line">  &#125;,</span><br><span class="line"> (error) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.error(error)</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">initLocalStream = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line"> <span class="keyword">const</span> localStream = <span class="keyword">await</span> getMediaStream()</span><br><span class="line"> initVideo(localStream)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webrtc</category>
      </categories>
      <tags>
        <tag>webrtc</tag>
      </tags>
  </entry>
  <entry>
    <title>http-cors</title>
    <url>/%E5%85%B6%E4%BB%96/http/08-11-http%E4%B9%8B%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<p><a href="https://segmentfault.com/a/1190000015597029">参考链接</a></p>
<h3 id="浏览器的同源策略"><a href="#浏览器的同源策略" class="headerlink" title="浏览器的同源策略"></a>浏览器的同源策略</h3><p>两个url的protocol、port(如果有指定的话)和 host 都相同的话</p>
<h4 id="源的更改"><a href="#源的更改" class="headerlink" title="源的更改"></a>源的更改</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设 http://store.company.com/dir/other.html 文档中的一个脚本执行以下语句</span></span><br><span class="line"> <span class="built_in">document</span>.domain =<span class="string">&#x27;company.info&#x27;</span></span><br><span class="line"> <span class="comment">// 这条语句执行之后，页面将会成功地通过与 http://company.com/dir/page.html 的同源检测</span></span><br></pre></td></tr></table></figure>

<h4 id="解决跨域的方式"><a href="#解决跨域的方式" class="headerlink" title="解决跨域的方式"></a>解决跨域的方式</h4><h5 id="JsonP-请求连接中加上请求成功之后的callback-get请求"><a href="#JsonP-请求连接中加上请求成功之后的callback-get请求" class="headerlink" title="JsonP: 请求连接中加上请求成功之后的callback(get请求)"></a>JsonP: 请求连接中加上请求成功之后的callback(get请求)</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="function">(<span class="params">url, urlData</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> handlerData = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">    <span class="keyword">return</span> keys.reduce(<span class="function">(<span class="params">pre, key, index</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> value = data[key];</span><br><span class="line">     <span class="keyword">const</span> preValue = pre || <span class="string">&#x27;&#x27;</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;preValue&#125;</span><span class="subst">$&#123;preValue ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span><span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">    &#125;, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line"> <span class="comment">// 接口返回的参数</span></span><br><span class="line"> <span class="built_in">window</span>.jsonpcb = <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  resolve(res)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;handlerData(urlData)&#125;</span>&amp;cd=jsonpcb`</span></span><br><span class="line"> <span class="built_in">document</span>.appendChild(script)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="空iframe和form"><a href="#空iframe和form" class="headerlink" title="空iframe和form"></a>空iframe和form</h4><h4 id="Access-Control-Allow-Origin："><a href="#Access-Control-Allow-Origin：" class="headerlink" title="Access-Control-Allow-Origin：*"></a>Access-Control-Allow-Origin：*</h4><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"> listen: 9090;</span><br><span class="line"> <span class="attribute">server_name</span> localhost;</span><br><span class="line"> <span class="attribute">location</span><span class="regexp"> ^~</span> /api &#123;</span><br><span class="line">       <span class="attribute">proxy_pass</span> http://localhost:9871;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="cors（浏览器自己完成）"><a href="#cors（浏览器自己完成）" class="headerlink" title="cors（浏览器自己完成）"></a>cors（浏览器自己完成）</h4>]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>http-cookies</title>
    <url>/%E5%85%B6%E4%BB%96/http/08-11-http%E4%B9%8Bcookies/</url>
    <content><![CDATA[<h3 id="什么是cookies"><a href="#什么是cookies" class="headerlink" title="什么是cookies"></a>什么是cookies</h3><p style="color: red;">服务器发送到用户浏览器并保存在本地的一小块数据, 他会在浏览器下次向同一服务器发起请求时被携带并发送到服务器上</p>

<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li>会话状态管理</li>
<li>个性化设置</li>
<li>浏览器行为跟踪</li>
</ol>
<h3 id="创建-cookies"><a href="#创建-cookies" class="headerlink" title="创建 cookies"></a>创建 cookies</h3><ul>
<li><p>服务端:</p>
  <p style="color:red;">服务器使用 set-Cookie发送Cookie信息</p>

<p>  <code>set-Cookie: &lt;cookie名&gt;=&lt;cookie值&gt;</code></p>
</li>
<li><p>客户端：</p>
<p>  <code>document.cookie = &#39;name=Jonh; &quot;;</code></p>
</li>
</ul>
<h3 id="cookie的运行机制"><a href="#cookie的运行机制" class="headerlink" title="cookie的运行机制"></a>cookie的运行机制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: start</span><br><span class="line">op&#x3D;&gt;operation: 下一次发起http请求，浏览器会检查是否有cookie</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>

<h3 id="cookie的格式"><a href="#cookie的格式" class="headerlink" title="cookie的格式"></a>cookie的格式</h3><ol>
<li><p>document.cookie: 获取cookie</p>
</li>
<li><p>cookie的属性：<br> a. expires: 设置cookie的有效时间<br> b. domain: 域名<br> c. path: 路径, domain + path决定哪些域名下的请求会被加上cookie<br> d. httpOnly: 设置cookie是否能通过js去访问<br> e. secure: 设置cookie在确保安全的请求中才会发送,当请求时https或者其他安全协议时，包含secure选项的cookie才能被发送到服务器</p>
</li>
</ol>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>javascript</tag>
        <tag>cookies</tag>
      </tags>
  </entry>
  <entry>
    <title>js设计模式(1)-单例模式</title>
    <url>/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/08-10-js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(1)-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="定义-保证一个类仅有一个实例并提供一个访问它的全局访问点"><a href="#定义-保证一个类仅有一个实例并提供一个访问它的全局访问点" class="headerlink" title="定义: 保证一个类仅有一个实例并提供一个访问它的全局访问点"></a>定义: 保证一个类仅有一个实例并提供一个访问它的全局访问点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="title">createLayout</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  div.innerHTML = <span class="string">&#x27;Hello, 我是弹窗&#x27;</span></span><br><span class="line">  <span class="built_in">document</span>.boyd.appendChild(div);</span><br><span class="line">  div.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> div</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="title">getSingle</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result =  <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> result || (result = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小结：-单例模式的主要思想就是实例如果已经创建就直接返回-利用闭包的原理"><a href="#小结：-单例模式的主要思想就是实例如果已经创建就直接返回-利用闭包的原理" class="headerlink" title="小结： 单例模式的主要思想就是实例如果已经创建就直接返回 (利用闭包的原理)"></a>小结： 单例模式的主要思想就是实例如果已经创建就直接返回 (利用闭包的原理)</h3>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>vue源码解读(3)</title>
    <url>/%E6%A1%86%E6%9E%B6/08-05-vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB(3)/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue源码解析(2)</title>
    <url>/%E6%A1%86%E6%9E%B6/08-04-vue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(2)/</url>
    <content><![CDATA[<h4 id="Vue数据响应原理"><a href="#Vue数据响应原理" class="headerlink" title="Vue数据响应原理"></a>Vue数据响应原理</h4><p>core/instance/state</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span>(<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">	vm._watchers = [];</span><br><span class="line">	<span class="keyword">const</span> opt = vm.$options</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (opts.props) &#123;</span><br><span class="line">		initProps(vm, opts.props);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (opts.methods) &#123;</span><br><span class="line">		initMethods(vm, opts.methods);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">		initData(vm)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		observe( (vm._data = &#123;&#125;), <span class="literal">true</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (opts.computed) &#123;</span><br><span class="line">		initComputed(vm, opts.computed)</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">		initWatch(vvm, opts.watch)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="先解析data的数据响应"><a href="#先解析data的数据响应" class="headerlink" title="先解析data的数据响应"></a>先解析data的数据响应</h5><p>core/instance/state</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">		<span class="comment">// 为vm上添加 _data属性</span></span><br><span class="line">		data = vm._data === <span class="keyword">typeof</span> data === <span class="string">&#x27;function&#x27;</span> ? getData(data, vm) : data || &#123;&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 判断data 是否是一个普通的对象， 使用的是原型上的toString方法</span></span><br><span class="line">		<span class="keyword">if</span> (!isPlainObject(data)) &#123;</span><br><span class="line">			data = &#123;&#125;</span><br><span class="line">			process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; warn(<span class="string">&quot; data function should return an object&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">		<span class="keyword">const</span> props= vm.$options.props</span><br><span class="line">		<span class="keyword">const</span> methods= vm.$options.methods</span><br><span class="line"></span><br><span class="line">		<span class="keyword">let</span> i = keys.length</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="title">while</span>(<span class="params">i--</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">const</span> key = keys[i]</span><br><span class="line">				<span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">						<span class="keyword">if</span> (methods &amp;&amp; hasOwn(methods, key)) &#123;</span><br><span class="line">							warn(</span><br><span class="line">								<span class="string">`Method &quot;<span class="subst">$&#123;key&#125;</span>&quot; has already been defined as a data property.`</span>,</span><br><span class="line">								vm</span><br><span class="line">							);</span><br><span class="line">						&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">					process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">						warn(</span><br><span class="line">							<span class="string">`The data property &quot;<span class="subst">$&#123;key&#125;</span>&quot; is already declared as a prop. `</span> +</span><br><span class="line">								<span class="string">`Use prop default value instead.`</span>,</span><br><span class="line">							vm</span><br><span class="line">						);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isReserved(key)) &#123;</span><br><span class="line">					<span class="comment">// 为vm上添加对应的属性值，这就是为什么data中的数据为什么使用this能访问到的原因</span></span><br><span class="line">					proxy(vm, <span class="string">`_data`</span>, key);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		observe(data, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看看 Observe方法中做了什么</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">value: any, asRootData: ?boolean</span>): <span class="title">Observer</span> | <span class="title">void</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!isObject(value) || value <span class="keyword">instanceof</span> VNode) &#123; </span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> ob: Observer | <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (hasOwn(value, <span class="string">&quot;__ob__&quot;</span>) &amp;&amp; value.__ob__ <span class="keyword">instanceof</span> Observer) &#123;</span><br><span class="line">		ob = value.__ob__;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// Object.isExtensible: 判断一个对象是否可以扩展， 返回boolean值</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( shouldObserve &amp;&amp; !isServerRendering &amp;&amp; (<span class="built_in">Array</span>.isArray(value)  || isPlainObject(value)) &amp;&amp; <span class="built_in">Object</span>.isExtensible(value) &amp;&amp; !value.isVue) &#123;</span><br><span class="line"></span><br><span class="line">		ob = <span class="keyword">new</span> Observer(value)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>在来看看Observer类做了什么， 首先该类有三个方法 构造函数、walk、 observeArray</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">	value: any,</span><br><span class="line">	dep: Dep,</span><br><span class="line">	vmCount: number</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造函数</span></span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">value: any</span>)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.value = value;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="built_in">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">		<span class="built_in">this</span>.vmCount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		df(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (hasProto) &#123;</span><br><span class="line">				<span class="comment">// 该方法就是 将 value的 __proto__ 设置为 arrayMethods</span></span><br><span class="line">				protoAugment(value, arrayMethods)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				copyAugment(value, arrayMethods, arrayKeys)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">this</span>.observeArray(value)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">this</span>.walk(value)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">observeArray</span>(<span class="params">items: any</span>)</span> &#123;</span><br><span class="line">		<span class="function"><span class="title">for</span>(<span class="params"> <span class="keyword">let</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++</span>)</span> &#123;</span><br><span class="line">			oberve(items[i])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">walk</span>(<span class="params">obj: <span class="built_in">Object</span></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">		<span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= keys.length; i++</span>)</span> &#123;</span><br><span class="line">			definaReactive(obj, keys[i])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来我们看一下 definaReactive方法做了什么</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">definaReactive</span>(<span class="params"> obj: <span class="built_in">Object</span>, key: string, val: any, customSetter?: ? Funtion, shallow ?: boolean</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> prototype = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (prototype &amp;&amp; prototype.configuration === <span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">const</span> getter = prototype &amp;&amp; prototype.get</span><br><span class="line">	<span class="keyword">const</span> setter = prototype &amp;&amp; prototype.set</span><br><span class="line">	<span class="keyword">if</span> ( (!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">		val = obj[key]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> childOb = !shallow &amp;&amp; observe(val)</span><br><span class="line">	<span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">		enumerable: <span class="literal">true</span>,</span><br><span class="line">		configurable: <span class="literal">true</span>,</span><br><span class="line">		get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">const</span> value = getter ? getter.call(obj) :val</span><br><span class="line">			<span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">				dep.depend();</span><br><span class="line">				<span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">					childOb.dep.depend();</span><br><span class="line">					<span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">						dependArray(value)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> value</span><br><span class="line">		&#125;,</span><br><span class="line">		set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">				<span class="keyword">if</span> (newVal ===  value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span> &amp;&amp; customSettr) &#123;</span><br><span class="line">					customSetter()</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (getter &amp;&amp; !setter) <span class="keyword">return</span> </span><br><span class="line">				<span class="keyword">if</span> (setter) &#123;</span><br><span class="line">					setter.call(obj, newVal)</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					val = newVal</span><br><span class="line">				&#125;</span><br><span class="line">				childOb = ! shallow &amp;&amp; observe(newVal)</span><br><span class="line">				dep.notify()</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue源码解析(1)</title>
    <url>/%E6%A1%86%E6%9E%B6/08-03-vue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(1)/</url>
    <content><![CDATA[<h2 id="创建Vue实例的两步"><a href="#创建Vue实例的两步" class="headerlink" title="创建Vue实例的两步"></a>创建Vue实例的两步</h2><h5 id="创建Vue实例只需要两步"><a href="#创建Vue实例只需要两步" class="headerlink" title="创建Vue实例只需要两步"></a>创建Vue实例只需要两步</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> 	<span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">new</span> Vue(options)</span><br></pre></td></tr></table></figure>

<h3 id="创建Vue类-为Vue构造函数上添加属性和方法，但是函数未执行"><a href="#创建Vue类-为Vue构造函数上添加属性和方法，但是函数未执行" class="headerlink" title="创建Vue类(为Vue构造函数上添加属性和方法，但是函数未执行)"></a>创建Vue类(为Vue构造函数上添加属性和方法，但是函数未执行)</h3><p>在导入Vue构造函数之前会生成一个Vue的构造函数</p>
<p>platforms/web/entry-runtime.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;./runtime/index&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure>

<p>platforms/web/runtime</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * extend(to, _from)方法将_from对象上的属性添加到to对象中并返回to对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">extend(Vue.options.directives, platformDirectives)</span><br><span class="line">extend(Vue.options.components, platformComponents)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加__patch__ 方法</span></span><br><span class="line">Vue.prototype.__patch__ = isBrower ? patch : noop</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加mount方法</span></span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">	el: string | Element, </span></span></span><br><span class="line"><span class="function"><span class="params">	hydrating ?: boolean</span>)</span>&#123;</span><br><span class="line">		el = el &amp;&amp; isBrower ? query(el) : <span class="literal">undefined</span></span><br><span class="line">		<span class="keyword">return</span> mountComponent(<span class="built_in">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure>

<p>core/index</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;./instance/index&#x27;</span></span><br><span class="line">initGlobalAPI(Vue)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>core/global-api</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 添加 set、delete、nextTick方法</span></span><br><span class="line">Vue.set = set</span><br><span class="line">Vue.delete = del</span><br><span class="line">Vue.nextTick = nextTick</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建空的options对象</span></span><br><span class="line">Vue.options = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ASSET_TYPES: component/ filer / directive</span></span><br><span class="line"><span class="comment">//  创建空的components、directives、filters容器</span></span><br><span class="line">ASSET_TYPES.forEach(<span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">	Vue.options[type + <span class="string">&#x27;s&#x27;</span>]  = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化use,</span></span><br><span class="line">initUse(Vue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 mixin</span></span><br><span class="line">initMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 extend</span></span><br><span class="line">initExtend(Vue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始 filter、component、directive</span></span><br><span class="line">initAssetRegisters(Vue)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>instance/index : Vue构造函数， 在vue的构造函数中只调用了_init方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (process.env.NODE_EVN !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vue) ) &#123;</span><br><span class="line">			warn(<span class="string">&#x27;Vue is a constructor ans should be called with the `new` keyword&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 关键</span></span><br><span class="line">		<span class="built_in">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Vue原型上添加 _init方法</span></span><br><span class="line">initMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 $data 、 $props、 $watch 、 $set 、 $delete 属性</span></span><br><span class="line">stateMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 $on、$emit、 $off 、 $once事件</span></span><br><span class="line">eventsMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 _update、 $foreceupdate、 $destory 方法</span></span><br><span class="line">liftcycleMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 $nextTick、 _render 函数</span></span><br><span class="line">renderMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure>

<p>总结： 至此，我们就构建出了一个 Vue 类，这个类上的方法都已经添加完毕; 总结一下，我们创建的Vue类都包含了哪些内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>._init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局config对象，我们几乎不会用到</span></span><br><span class="line">Vue.config = &#123;</span><br><span class="line">  keyCodes,</span><br><span class="line">  _lifecycleHooks: [<span class="string">&#x27;beforeCreate&#x27;</span>, <span class="string">&#x27;created&#x27;</span>, ...]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的options配置，我们每个组件都会继承这个配置。</span></span><br><span class="line">Vue.options = &#123;</span><br><span class="line">  beforeCreate, <span class="comment">// 比如 vue-router 就会注册这个回调，因此会每一个组件继承</span></span><br><span class="line">  components, <span class="comment">// 前面提到了，默认组件有三个 `KeepAlive`,`transition`, `transitionGroup`，这里注册的组件就是全局组件，因为任何一个组件中不用声明就能用了。所以全局组件的原理就是这么简单</span></span><br><span class="line">  directives, <span class="comment">// 默认只有 `v-show` 和 `v-model`</span></span><br><span class="line">  filters <span class="comment">// 不推荐使用了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一些全局方法</span></span><br><span class="line">Vue.use <span class="comment">// 注册插件</span></span><br><span class="line">Vue.component <span class="comment">// 注册组件</span></span><br><span class="line">Vue.directive <span class="comment">// 注册指令</span></span><br><span class="line">Vue.nextTick <span class="comment">//下一个tick执行函数</span></span><br><span class="line">Vue.set/<span class="keyword">delete</span> <span class="comment">// 数据的修改操作</span></span><br><span class="line">Vue.mixin <span class="comment">// 混入mixin用的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue.prototype 上有几种不同作用的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由initMixin 添加的 `_init` 方法，是Vue实例初始化的入口方法，会调用其他的功能初始话函数</span></span><br><span class="line">Vue.prototype._init</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由 initState 添加的三个用来进行数据操作的方法</span></span><br><span class="line">Vue.prototype.$data</span><br><span class="line">Vue.prototype.$props</span><br><span class="line">Vue.prototype.$watch</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由initEvents添加的事件方法</span></span><br><span class="line">Vue.prototype.$on</span><br><span class="line">Vue.prototype.$off</span><br><span class="line">Vue.prototype.$one</span><br><span class="line">Vue.prototype.$emit</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由 lifecycle添加的生命周期相关的方法</span></span><br><span class="line">Vue.prototype._update</span><br><span class="line">Vue.prototype.$forceUpdate</span><br><span class="line">Vue.prototype.$destroy</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 platform 中添加的生命周期方法</span></span><br><span class="line">Vue.prototype.$mount</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由renderMixin添加的`$nextTick` 和 `_render` 以及一堆renderHelper</span></span><br><span class="line">Vue.prototype.$nextTick</span><br><span class="line">Vue.prototype._render</span><br><span class="line">Vue.prototype._b</span><br><span class="line">Vue.prototype._e</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="Vue创建阶段：-通过-new-Vue创建Vue的实例；实例的创建，肯定是从构造函数开始的，然后会进行一系列的初始化操作，我们依次看一下创建过程都进行了什么初始化操作"><a href="#Vue创建阶段：-通过-new-Vue创建Vue的实例；实例的创建，肯定是从构造函数开始的，然后会进行一系列的初始化操作，我们依次看一下创建过程都进行了什么初始化操作" class="headerlink" title="Vue创建阶段： 通过 new Vue创建Vue的实例；实例的创建，肯定是从构造函数开始的，然后会进行一系列的初始化操作，我们依次看一下创建过程都进行了什么初始化操作"></a>Vue创建阶段： 通过 new Vue创建Vue的实例；实例的创建，肯定是从构造函数开始的，然后会进行一系列的初始化操作，我们依次看一下创建过程都进行了什么初始化操作</h4><p>core/instance/init.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.prototype._init  = <span class="function"><span class="keyword">function</span> (<span class="params">options: object</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// vm是this的别名</span></span><br><span class="line">	<span class="keyword">const</span> vm: Component = <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">	vm._uid = uid++</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> startTag, endTag;</span><br><span class="line">	<span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">		starTag = <span class="string">`vue-perf-start: <span class="subst">$&#123;vm._uid&#125;</span>`</span></span><br><span class="line">		endTag = <span class="string">`vue-perf-end: <span class="subst">$&#123;vm._uid&#125;</span>`</span></span><br><span class="line">		mark(startTag)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	vm._isVue = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">		initInternalComponent(vm, options)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		vm.$options = margeOptions(</span><br><span class="line">			resolveConstructorOptions(vm.constructor),</span><br><span class="line">			options || &#123;&#125;,</span><br><span class="line">			vm</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">		initProxy(vm)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		vm._renderProxy = vm</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	vm._self = vm</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** </span></span><br><span class="line"><span class="comment">	 * 做了一些生命周期的初始化工作，初始化了很多变量</span></span><br><span class="line"><span class="comment">	 * 最主要是设置了父子组件的引用关系，也就是设置了 </span></span><br><span class="line"><span class="comment">	 * `$parent` 和 `$children`、 $root、 $refs、</span></span><br><span class="line"><span class="comment">	 *  _watcher、 _inactive、 _directInactive、 </span></span><br><span class="line"><span class="comment">	 * _isMounted、_isDestroyed、 _isBeingDestroyed</span></span><br><span class="line"><span class="comment">	 * 的值</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	initLifecycle(vm)</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 注册事件，注意这里注册的不是自己的，而是父组件的。因为很明显父组件的监听器才会注册到孩子身上</span></span><br><span class="line"><span class="comment">	 * _events、_hasHookEvent</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	initEvents(vm)</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 做一些 render 的准备工作，比如处理父子继承关系等，并没有真的开始 render</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	initRender(vm)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 执行beforecreate事件</span></span><br><span class="line">	callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从options中获取对应的inject值遍历处理</span></span><br><span class="line">	initInjections(vm)</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 数据校验( $options中的数据校验)</span></span><br><span class="line"><span class="comment">	 * props、 method、 data、 computed、watch</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	initState(vm)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// resolve provide after data/props</span></span><br><span class="line">	initProvide(vm)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 执行created函数</span></span><br><span class="line">	callHook(vm, <span class="string">&#x27;created&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果传入了el元素执行mountd方法</span></span><br><span class="line">	<span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">		vm.$mount(vm.$options.el)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>vue的实例化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	router,</span><br><span class="line">	store,</span><br><span class="line">	i18n,</span><br><span class="line">	render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex源码分析</title>
    <url>/%E6%A1%86%E6%9E%B6/07-12-vuex%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>先抛出问题<br>1， vuex是什么<br>2， vuex是如何实现注入的，为什么每个组件都能通过访问$store访问store<br>3， vuex是如何处理模块以及模块嵌套的<br>4， vuex是如何保证只能通过matation实现改变state数据的</p>
<p>先看看官网怎么定义vuex<br>    vuex是一个专为vue应用程序开发的状态管理模式；采用集中式存储管理应用的所有组件的状态</p>
<p>进行源码分析之前，先了解一下官方文档中提供的核心思想，它代表着整个vuex框架的运行流程</p>
<img align="center" src="../../static/vuex.png">

<ul>
<li><p>Vue components: vue组件，负责接收用户操作等交互行为，执行dispatch方法触发对应的action</p>
</li>
<li><p>dispatch：操作行为触发方法，是唯一能执行action的方法。</p>
</li>
<li><p>actions: 操作行为处理模块， 负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发</p>
</li>
<li><p>commit：状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。</p>
</li>
<li><p>mutations：状态改变操作方法。是Vuex修改state的唯一推荐方法，其他修改方式在严格模式下将会报错。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。</p>
</li>
<li><p>state：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。</p>
</li>
<li><p>getters：state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。</p>
</li>
</ul>
<p>先分析store函数</p>
<p>1, 先分析构造函数中的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">options = &#123;&#125;</span>)</span> &#123;</span><br><span class="line">	<span class="comment">// 判断</span></span><br><span class="line">	<span class="keyword">if</span> (!Vue &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">		install(<span class="built_in">window</span>.Vue)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码分析：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.store(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	store</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue.use实现：实际上会执行插件中的install方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">plugin: <span class="built_in">Function</span> | <span class="built_in">Object</span></span>) </span>&#123;</span><br><span class="line"><span class="comment">/* istanbul ignore if */</span></span><br><span class="line"><span class="keyword">if</span> (plugin.installed) &#123;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// additional parameters</span></span><br><span class="line"><span class="keyword">const</span> args = toArray(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">args.unshift(<span class="built_in">this</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> plugin.install === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">	<span class="comment">// 实际执行插件的install方法</span></span><br><span class="line">	plugin.install.apply(plugin, args)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	plugin.apply(<span class="literal">null</span>, args)</span><br><span class="line">&#125;</span><br><span class="line">plugin.installed = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol>
<li>vuex初始化装载分析 </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Vue</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">if</span> (!Vue &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">	install(<span class="built_in">window</span>.vue)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>判断若处于浏览器环境下且加载过Vue，则执行install方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断若处于浏览器环境下且加载过Vue，则执行install方法</span></span><br><span class="line">  <span class="keyword">if</span> (!Vue &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">    install(<span class="built_in">window</span>.Vue)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>install函数， 将Vue变量赋值为全局的_vue变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Vue &amp;&amp; _Vue === Vue) &#123;</span><br><span class="line">		<span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">		<span class="built_in">console</span>.error(</span><br><span class="line">			<span class="string">&#x27;[vuex] already installed. Vue.use(Vuex) should be called only once.&#x27;</span></span><br><span class="line">		)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	Vue = _Vue</span><br><span class="line">	applyMixin(Vue)</span><br><span class="line">&#125;</span><br><span class="line">applyMixin</span><br></pre></td></tr></table></figure>

<p>applyMixin函数, 判断vue版本，通过hook注入或者重写原型链上的_init方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 其实就是对象的合并</span></span><br><span class="line">        Vue.mixin(&#123; <span class="attr">beforeCreate</span>: vuexInit &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// override init and inject vuex init procedure</span></span><br><span class="line">        <span class="comment">// for 1.x backwards compatibility.</span></span><br><span class="line">        <span class="comment">// 查找vue原型链上的init方法</span></span><br><span class="line">        <span class="keyword">const</span> _init = Vue.prototype._init</span><br><span class="line">        Vue.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params">options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">            options.init = options.init ?</span><br><span class="line">                [vuexInit].concat(options.init) :</span><br><span class="line">                vuexInit</span><br><span class="line">            _init.call(<span class="built_in">this</span>, options)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Vuex init hook, injected into each instances init hooks list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">// 将初始化vue跟组件时传入的store设置到this对象上的$store属性上，子组件从起父组件引用$store属性，层次嵌套进行设置</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vuexInit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> options = <span class="built_in">this</span>.$options</span><br><span class="line">            <span class="comment">// store injection</span></span><br><span class="line">        <span class="keyword">if</span> (options.store) &#123;</span><br><span class="line">            <span class="built_in">this</span>.$store = <span class="keyword">typeof</span> options.store === <span class="string">&#x27;function&#x27;</span> ?</span><br><span class="line">                options.store() :</span><br><span class="line">                options.store</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</span><br><span class="line">            <span class="built_in">this</span>.$store = options.parent.$store</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<p>&lt;img align=”center” src=”../../vuex-store注入.png&gt;</p>
]]></content>
      <categories>
        <category>vuex</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript深入浅出13(es5-generator)</title>
    <url>/ecmascript/07-06-es%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA13(es5-generator)/</url>
    <content><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。</p>
<p>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</p>
<p>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>
<p>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，<code>function</code>关键字与函数名之间有一个星号；<br>二是，函数体内部使用<code>yield</code>表达式，定义不同的内部状态（<code>yield</code>在英语里的意思就是“产出”）。</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;ending&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个 Generator 函数<code>helloWorldGenerator</code>，它内部有两个<code>yield</code>表达式（<code>hello</code>和<code>world</code>），即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p>
<p>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。</p>
<p>下一步，必须调用遍历器对象的<code>next</code>方法，使得指针移向下一个状态。也就是说，每次调用<code>next</code>方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个<code>yield</code>表达式（或<code>return</code>语句）为止。换言之，Generator 函数是分段执行的，<code>yield</code>表达式是暂停执行的标记，而<code>next</code>方法可以恢复执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<p>上面代码一共调用了四次<code>next</code>方法。</p>
<p>第一次调用，Generator 函数开始执行，直到遇到第一个<code>yield</code>表达式为止。<code>next</code>方法返回一个对象，它的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>hello</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>
<p>第二次调用，Generator 函数从上次<code>yield</code>表达式停下的地方，一直执行到下一个<code>yield</code>表达式。<code>next</code>方法返回的对象的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>world</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>
<p>第三次调用，Generator 函数从上次<code>yield</code>表达式停下的地方，一直执行到<code>return</code>语句（如果没有<code>return</code>语句，就执行到函数结束）。<code>next</code>方法返回的对象的<code>value</code>属性，就是紧跟在<code>return</code>语句后面的表达式的值（如果没有<code>return</code>语句，则<code>value</code>属性的值为<code>undefined</code>），<code>done</code>属性的值<code>true</code>，表示遍历已经结束。</p>
<p>第四次调用，此时 Generator 函数已经运行完毕，<code>next</code>方法返回对象的<code>value</code>属性为<code>undefined</code>，<code>done</code>属性为<code>true</code>。以后再调用<code>next</code>方法，返回的都是这个值。</p>
<p>总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的<code>next</code>方法，就会返回一个有着<code>value</code>和<code>done</code>两个属性的对象。<code>value</code>属性表示当前的内部状态的值，是<code>yield</code>表达式后面那个表达式的值；<code>done</code>属性是一个布尔值，表示是否遍历结束。</p>
<p>ES6 没有规定，<code>function</code>关键字与函数名之间的星号，写在哪个位置。这导致下面的写法都能通过。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br></pre></td></tr></table></figure>

<p>由于 Generator 函数仍然是普通函数，所以一般的写法是上面的第三种，即星号紧跟在<code>function</code>关键字后面。本书也采用这种写法。</p>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>EcmaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>重学算法(1)-栈</title>
    <url>/%E5%85%B6%E4%BB%96/%E7%AE%97%E6%B3%95/07-06-%E9%87%8D%E5%AD%A6%E7%AE%97%E6%B3%95(1)-%E6%A0%88/</url>
    <content><![CDATA[<h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><h4 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h4><p>后进者先出，先进者后出，简称 后进先出（LIFO） </p>
1, 新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端就叫栈底。
2, 在栈里，新元素都靠近栈顶，旧元素都接近栈底。
3, 从栈的操作特性来看，是一种 操作受限的线性表，只允许在一端插入和删除数据。
4, 不包含任何元素的栈称为空栈。
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>es深入浅出系列(2)</title>
    <url>/ecmascript/06-09-es%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B3%BB%E5%88%97-2/</url>
    <content><![CDATA[<h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
<p>以前，为变量赋值，只能直接指定值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>ES6 允许写成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>解构赋值允许指定默认值。</p>
<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [firstItem = []] = []</span><br><span class="line"></span><br><span class="line">firstItem <span class="comment">// []; 解构赋值在解构出来的值为undefined时，默认值才会生效</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>EcmaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>es深入浅出系列(1)</title>
    <url>/ecmascript/06-09-es%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B3%BB%E5%88%97-1/</url>
    <content><![CDATA[<h4 id="let和const系列"><a href="#let和const系列" class="headerlink" title="let和const系列"></a>let和const系列</h4><h3 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h3><p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">11</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not undefined</span></span><br><span class="line">b <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<p>上面代码在代码块之中，分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。这表明，<code>let</code>声明的变量只在它所在的代码块有效。</p>
<h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><p>  const声明一个只读的常量。一旦声明，常量的值就不能改变。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PI &#x3D; 3.1415</span><br><span class="line"></span><br><span class="line">PI &#x2F;&#x2F; 3.1415</span><br><span class="line"></span><br><span class="line">pI &#x3D; 3 &#x2F;&#x2F; TypeError: Assignment to constant variable</span><br></pre></td></tr></table></figure>

<p>const语法对于引用类型是可以更改和增加其属性值， 因为对于引用类型在内存中存储的是一个引用地址； 对于const命令不能将引用地址更改</p>
<p>1, let 和 const 的出现解决了什么问题？</p>
<pre><code>在es5中只有全局作用域和函数作用域，带来很多不合理的场景

第一种场景： 内层变量覆盖外层变量

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;这不是时间&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// 这不是时间， 原因在于用var 声明的变量存在变量提升， 导致函数执行时在当前函数作用域中就能找到对应的a变量因此进行了输出</span></span><br></pre></td></tr></table></figure>

第二中场景： 变量泄露为全局变量

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"> <span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= s.length-<span class="number">1</span>; i++</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// 5; 原因在于 变量i用var 声明， 导致循环执行结束之后，变量i并没有销毁, 泄露成了全局变量</span></span><br></pre></td></tr></table></figure></code></pre><p>2, let 和const的共同点<br>    1, 没有变量提升<br>    2, 增加了块级作用域<br>    3, 必须先定义后使用, 都存在暂时性死区(在代码块内，使用<code>let</code>和 <code>const</code>命令声明变量之前，该变量都是不可用的变)<br>    4, 在同一个块级作用域中不能重复定义相同的变量</p>
<p>注意点：</p>
<ul>
<li>允许在块级作用域中声明函数</li>
<li>函数声明类似于 ‘var’，即会提升到全局作用域或者函数作用域的头部（var的变量声明）</li>
<li>函数声明还会提升到所在的块级作用域的头部</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 浏览器的 ES6 环境</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am outside!&#x27;</span>); &#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// 重复声明一次函数f</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am inside!&#x27;</span>); &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  f();</span><br><span class="line">&#125;());</span><br><span class="line"><span class="comment">// Uncaught TypeError: f is not a function</span></span><br></pre></td></tr></table></figure>

<p>相当于运行以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浏览器的 ES6 环境</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am outside!&#x27;</span>); &#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> f = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;I am inside!&#x27;</span>); &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  f();</span><br><span class="line">&#125;());</span><br><span class="line"><span class="comment">// Uncaught TypeError: f is not a function</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>EcmaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>webrtc基础概念介绍</title>
    <url>/%E5%85%B6%E4%BB%96/webrtc/webrtc%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h4 id="webrtc-是一个支持实时语音、视频和数据传输的开源系统"><a href="#webrtc-是一个支持实时语音、视频和数据传输的开源系统" class="headerlink" title="webrtc 是一个支持实时语音、视频和数据传输的开源系统"></a>webrtc 是一个支持实时语音、视频和数据传输的开源系统</h4><h4 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h4><img src="../../static/webrtc.webp">

<ol>
<li>webrtc的终端设备，负责音视频采集、编解码、NAT 穿越、音视频数据传输</li>
<li>Signal 服务器，负责信令处理，如加入房间、离开房间、媒体协商消息的传递等</li>
<li>STUN/TURN 服务器，负责获取 WebRTC 终端在公网的 IP 地址，以及 NAT 穿越失败后的数据中转。</li>
</ol>
<h4 id="音视频采集的基本概念"><a href="#音视频采集的基本概念" class="headerlink" title="音视频采集的基本概念"></a>音视频采集的基本概念</h4><ul>
<li>摄像头： 用于采集图像和视频</li>
<li>帧率： 摄像头一秒钟采集图像的次数</li>
<li>分辨率: 屏幕分辨率</li>
<li>宽高比： 分辨率的宽高比</li>
<li>麦克风: 用于采集音频</li>
<li>轨：借鉴火车的轨道概念， 在多媒体中表示每条轨数据都是独立的</li>
<li>流： 分为媒体流和数据流（媒体流中可存放多个音频轨和视频轨； 数据流中可以存放多个数据流）</li>
</ul>
]]></content>
      <categories>
        <category>webrtc</category>
      </categories>
      <tags>
        <tag>webrtc</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs介绍</title>
    <url>/nodejs/05-31-nodejs%E4%BB%8B%E7%BB%8D(2)/</url>
    <content><![CDATA[<p>ECMAScript: 定义了语法（本身只有语法和词法， 简称语法); 比如: 变量定义、循环、判断、函数、原型、原型链、作用域、闭包、异步<br>(ES教程)[<a href="https://es6.ruanyifeng.com/]">https://es6.ruanyifeng.com/]</a></p>
<p>javascript:  是用ES语法规范 + web API; 两者结合，即可完成浏览器端的任何操作<br>    web Api: BOM、DOM、事件绑定、Ajax、 websock等</p>
<p>nodejs: 使用ES语法规范 + nodejs api；</p>
]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm控制node版本</title>
    <url>/nodejs/05-31-nvm%E6%8E%A7%E5%88%B6node%E7%89%88%E6%9C%AC(1)/</url>
    <content><![CDATA[<p>nvm 控制node 版本</p>
<p>nvm:  (github地址)[<a href="https://github.com/nvm-sh/nvm]">https://github.com/nvm-sh/nvm]</a></p>
<p>commender list:</p>
<ul>
<li>nvm list</li>
<li>nvm use</li>
<li>nvm install</li>
</ul>
]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令详解</title>
    <url>/%E5%85%B6%E4%BB%96/git/05-06-git%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h4><ol>
<li>homebrew 安装<br><a href="https://www.jianshu.com/p/7edb6b838a2e">git 安装</a><br><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE">git 资料</a></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Homebrew</span></span><br><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br><span class="line"><span class="comment"># 安装git</span></span><br><span class="line">brew install git</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>git 常用命令：</p>
<ul>
<li>git init: 初始化一个 Git 仓库</li>
<li>git clone: 从远端拉取一个 git 仓库到本地</li>
<li>git tag: 查看 tag 列表</li>
<li>git tag ${tagName}: 在当前提交上打上 tag</li>
<li>git push origin ${tagName}: 把 tagName 提交到代码服务器</li>
<li>git tag –delete ${tagName}: 删除本地 tag</li>
<li>git push origin :${tagName} &amp;&amp; git tag –delete ${tagName}: 删除本地和远程的标签</li>
<li>git symbolic-ref –short HEAD： 获取当前分支的名字</li>
<li>git remote get-url origin： 获取远程 git 仓库地址</li>
<li>git tag -l –points-at HEAD： 获取当前 commit 上的 tag</li>
<li>git branch： 查看所有的分支</li>
<li>git branch ${tagName} ： 删除本地分支</li>
<li>git branch -ｒ： 查看远端所有的分支</li>
<li>git branch -a: 查看本地和远端的分支</li>
<li>git branch -d: 删除本地分支</li>
<li>git push origin –delete ${branchName}: 删除远端分支</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>GIT</category>
      </categories>
      <tags>
        <tag>GIT</tag>
      </tags>
  </entry>
</search>
